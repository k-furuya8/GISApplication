{"ast":null,"code":"/**\n * @module ol/style/Circle\n */\nimport RegularShape from './RegularShape.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\n\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {\n      radius: 5\n    };\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    });\n  }\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n\n\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n\n}\n\nexport default CircleStyle;","map":{"version":3,"names":["RegularShape","CircleStyle","constructor","options","radius","points","Infinity","fill","stroke","scale","undefined","rotation","rotateWithView","displacement","declutterMode","clone","getScale","style","getFill","getStroke","getRadius","Array","isArray","slice","getRotation","getRotateWithView","getDisplacement","getDeclutterMode","setOpacity","getOpacity","setRadius","radius_","render"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/style/Circle.js"],"sourcesContent":["/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {radius: 5};\n\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n}\n\nexport default CircleStyle;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,mBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BD,YAA1B,CAAuC;EACrC;AACF;AACA;EACEE,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa;MAACC,MAAM,EAAE;IAAT,CAA9B;IAEA,MAAM;MACJC,MAAM,EAAEC,QADJ;MAEJC,IAAI,EAAEJ,OAAO,CAACI,IAFV;MAGJH,MAAM,EAAED,OAAO,CAACC,MAHZ;MAIJI,MAAM,EAAEL,OAAO,CAACK,MAJZ;MAKJC,KAAK,EAAEN,OAAO,CAACM,KAAR,KAAkBC,SAAlB,GAA8BP,OAAO,CAACM,KAAtC,GAA8C,CALjD;MAMJE,QAAQ,EAAER,OAAO,CAACQ,QAAR,KAAqBD,SAArB,GAAiCP,OAAO,CAACQ,QAAzC,GAAoD,CAN1D;MAOJC,cAAc,EACZT,OAAO,CAACS,cAAR,KAA2BF,SAA3B,GAAuCP,OAAO,CAACS,cAA/C,GAAgE,KAR9D;MASJC,YAAY,EACVV,OAAO,CAACU,YAAR,KAAyBH,SAAzB,GAAqCP,OAAO,CAACU,YAA7C,GAA4D,CAAC,CAAD,EAAI,CAAJ,CAV1D;MAWJC,aAAa,EAAEX,OAAO,CAACW;IAXnB,CAAN;EAaD;EAED;AACF;AACA;AACA;AACA;;;EACEC,KAAK,GAAG;IACN,MAAMN,KAAK,GAAG,KAAKO,QAAL,EAAd;IACA,MAAMC,KAAK,GAAG,IAAIhB,WAAJ,CAAgB;MAC5BM,IAAI,EAAE,KAAKW,OAAL,KAAiB,KAAKA,OAAL,GAAeH,KAAf,EAAjB,GAA0CL,SADpB;MAE5BF,MAAM,EAAE,KAAKW,SAAL,KAAmB,KAAKA,SAAL,GAAiBJ,KAAjB,EAAnB,GAA8CL,SAF1B;MAG5BN,MAAM,EAAE,KAAKgB,SAAL,EAHoB;MAI5BX,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAcb,KAAd,IAAuBA,KAAK,CAACc,KAAN,EAAvB,GAAuCd,KAJlB;MAK5BE,QAAQ,EAAE,KAAKa,WAAL,EALkB;MAM5BZ,cAAc,EAAE,KAAKa,iBAAL,EANY;MAO5BZ,YAAY,EAAE,KAAKa,eAAL,GAAuBH,KAAvB,EAPc;MAQ5BT,aAAa,EAAE,KAAKa,gBAAL;IARa,CAAhB,CAAd;IAUAV,KAAK,CAACW,UAAN,CAAiB,KAAKC,UAAL,EAAjB;IACA,OAAOZ,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEa,SAAS,CAAC1B,MAAD,EAAS;IAChB,KAAK2B,OAAL,GAAe3B,MAAf;IACA,KAAK4B,MAAL;EACD;;AApDoC;;AAuDvC,eAAe/B,WAAf"},"metadata":{},"sourceType":"module"}