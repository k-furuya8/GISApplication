{"ast":null,"code":"/**\n * @module ol/source/ImageCanvas\n */\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./Source.js\").State} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\n\nclass ImageCanvasSource extends ImageSource {\n  /**\n   * @param {Options} [options] ImageCanvas options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    });\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n\n    this.canvasFunction_ = options.canvasFunction;\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n\n\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    let canvas = this.canvas_;\n\n    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n    return canvas;\n  }\n\n}\n\nexport default ImageCanvasSource;","map":{"version":3,"names":["ImageCanvas","ImageSource","containsExtent","getHeight","getWidth","scaleFromCenter","ImageCanvasSource","constructor","options","attributions","interpolate","projection","resolutions","state","canvasFunction_","canvasFunction","canvas_","renderedRevision_","ratio_","ratio","undefined","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","canvas","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","canvasElement","call"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/ImageCanvas.js"],"sourcesContent":["/**\n * @module ol/source/ImageCanvas\n */\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport {\n  containsExtent,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./Source.js\").State} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nclass ImageCanvasSource extends ImageSource {\n  /**\n   * @param {Options} [options] ImageCanvas options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state,\n    });\n\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    this.canvasFunction_ = options.canvasFunction;\n\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n\n    let canvas = this.canvas_;\n    if (\n      canvas &&\n      this.renderedRevision_ == this.getRevision() &&\n      canvas.getResolution() == resolution &&\n      canvas.getPixelRatio() == pixelRatio &&\n      containsExtent(canvas.getExtent(), extent)\n    ) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    const canvasElement = this.canvasFunction_.call(\n      this,\n      extent,\n      resolution,\n      pixelRatio,\n      size,\n      projection\n    );\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n\n    return canvas;\n  }\n}\n\nexport default ImageCanvasSource;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,eAJF,QAKO,cALP;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAN,SAAgCL,WAAhC,CAA4C;EAC1C;AACF;AACA;EACEM,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;IAEA,MAAM;MACJC,YAAY,EAAED,OAAO,CAACC,YADlB;MAEJC,WAAW,EAAEF,OAAO,CAACE,WAFjB;MAGJC,UAAU,EAAEH,OAAO,CAACG,UAHhB;MAIJC,WAAW,EAAEJ,OAAO,CAACI,WAJjB;MAKJC,KAAK,EAAEL,OAAO,CAACK;IALX,CAAN;IAQA;AACJ;AACA;AACA;;IACI,KAAKC,eAAL,GAAuBN,OAAO,CAACO,cAA/B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,iBAAL,GAAyB,CAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcV,OAAO,CAACW,KAAR,KAAkBC,SAAlB,GAA8BZ,OAAO,CAACW,KAAtC,GAA8C,GAA5D;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEE,gBAAgB,CAACC,MAAD,EAASC,UAAT,EAAqBC,UAArB,EAAiCb,UAAjC,EAA6C;IAC3DY,UAAU,GAAG,KAAKE,qBAAL,CAA2BF,UAA3B,CAAb;IAEA,IAAIG,MAAM,GAAG,KAAKV,OAAlB;;IACA,IACEU,MAAM,IACN,KAAKT,iBAAL,IAA0B,KAAKU,WAAL,EAD1B,IAEAD,MAAM,CAACE,aAAP,MAA0BL,UAF1B,IAGAG,MAAM,CAACG,aAAP,MAA0BL,UAH1B,IAIAtB,cAAc,CAACwB,MAAM,CAACI,SAAP,EAAD,EAAqBR,MAArB,CALhB,EAME;MACA,OAAOI,MAAP;IACD;;IAEDJ,MAAM,GAAGA,MAAM,CAACS,KAAP,EAAT;IACA1B,eAAe,CAACiB,MAAD,EAAS,KAAKJ,MAAd,CAAf;IACA,MAAMc,KAAK,GAAG5B,QAAQ,CAACkB,MAAD,CAAR,GAAmBC,UAAjC;IACA,MAAMU,MAAM,GAAG9B,SAAS,CAACmB,MAAD,CAAT,GAAoBC,UAAnC;IACA,MAAMW,IAAI,GAAG,CAACF,KAAK,GAAGR,UAAT,EAAqBS,MAAM,GAAGT,UAA9B,CAAb;IAEA,MAAMW,aAAa,GAAG,KAAKrB,eAAL,CAAqBsB,IAArB,CACpB,IADoB,EAEpBd,MAFoB,EAGpBC,UAHoB,EAIpBC,UAJoB,EAKpBU,IALoB,EAMpBvB,UANoB,CAAtB;;IAQA,IAAIwB,aAAJ,EAAmB;MACjBT,MAAM,GAAG,IAAI1B,WAAJ,CAAgBsB,MAAhB,EAAwBC,UAAxB,EAAoCC,UAApC,EAAgDW,aAAhD,CAAT;IACD;;IACD,KAAKnB,OAAL,GAAeU,MAAf;IACA,KAAKT,iBAAL,GAAyB,KAAKU,WAAL,EAAzB;IAEA,OAAOD,MAAP;EACD;;AAlFyC;;AAqF5C,eAAepB,iBAAf"},"metadata":{},"sourceType":"module"}