{"ast":null,"code":"/**\n * @module ol/source/TileDebug\n */\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\n\nclass TileDebug extends XYZ {\n  /**\n   * @param {Options} [options] Debug tile options.\n   */\n  constructor(options) {\n    /**\n     * @type {Options}\n     */\n    options = options || {};\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: (tile, text) => {\n        const z = tile.getTileCoord()[0];\n        const tileSize = toSize(this.tileGrid.getTileSize(z));\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        /** @type {import(\"../ImageTile.js\").default} */\n\n        tile.setImage(context.canvas);\n      }\n    });\n  }\n\n}\n\nexport default TileDebug;","map":{"version":3,"names":["XYZ","createCanvasContext2D","toSize","TileDebug","constructor","options","opaque","projection","tileGrid","wrapX","undefined","zDirection","url","template","tileLoadFunction","tile","text","z","getTileCoord","tileSize","getTileSize","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","setImage","canvas"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/TileDebug.js"],"sourcesContent":["/**\n * @module ol/source/TileDebug\n */\n\nimport XYZ from './XYZ.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\nclass TileDebug extends XYZ {\n  /**\n   * @param {Options} [options] Debug tile options.\n   */\n  constructor(options) {\n    /**\n     * @type {Options}\n     */\n    options = options || {};\n\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: (tile, text) => {\n        const z = tile.getTileCoord()[0];\n        const tileSize = toSize(this.tileGrid.getTileSize(z));\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n\n        /** @type {import(\"../ImageTile.js\").default} */ (tile).setImage(\n          context.canvas\n        );\n      },\n    });\n  }\n}\n\nexport default TileDebug;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAAQC,qBAAR,QAAoC,WAApC;AACA,SAAQC,MAAR,QAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBH,GAAxB,CAA4B;EAC1B;AACF;AACA;EACEI,WAAW,CAACC,OAAD,EAAU;IACnB;AACJ;AACA;IACIA,OAAO,GAAGA,OAAO,IAAI,EAArB;IAEA,MAAM;MACJC,MAAM,EAAE,KADJ;MAEJC,UAAU,EAAEF,OAAO,CAACE,UAFhB;MAGJC,QAAQ,EAAEH,OAAO,CAACG,QAHd;MAIJC,KAAK,EAAEJ,OAAO,CAACI,KAAR,KAAkBC,SAAlB,GAA8BL,OAAO,CAACI,KAAtC,GAA8C,IAJjD;MAKJE,UAAU,EAAEN,OAAO,CAACM,UALhB;MAMJC,GAAG,EAAEP,OAAO,CAACQ,QAAR,IAAoB,mBANrB;MAOJC,gBAAgB,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgB;QAChC,MAAMC,CAAC,GAAGF,IAAI,CAACG,YAAL,GAAoB,CAApB,CAAV;QACA,MAAMC,QAAQ,GAAGjB,MAAM,CAAC,KAAKM,QAAL,CAAcY,WAAd,CAA0BH,CAA1B,CAAD,CAAvB;QACA,MAAMI,OAAO,GAAGpB,qBAAqB,CAACkB,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,CAArC;QAEAE,OAAO,CAACC,WAAR,GAAsB,MAAtB;QACAD,OAAO,CAACE,UAAR,CAAmB,GAAnB,EAAwB,GAAxB,EAA6BJ,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA3C,EAAgDA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA9D;QAEAE,OAAO,CAACG,SAAR,GAAoB,MAApB;QACAH,OAAO,CAACC,WAAR,GAAsB,OAAtB;QACAD,OAAO,CAACI,SAAR,GAAoB,QAApB;QACAJ,OAAO,CAACK,YAAR,GAAuB,QAAvB;QACAL,OAAO,CAACM,IAAR,GAAe,iBAAf;QACAN,OAAO,CAACO,SAAR,GAAoB,CAApB;QACAP,OAAO,CAACQ,UAAR,CAAmBb,IAAnB,EAAyBG,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAvC,EAA0CA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxD,EAA2DA,QAAQ,CAAC,CAAD,CAAnE;QACAE,OAAO,CAACS,QAAR,CAAiBd,IAAjB,EAAuBG,QAAQ,CAAC,CAAD,CAAR,GAAc,CAArC,EAAwCA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAtD,EAAyDA,QAAQ,CAAC,CAAD,CAAjE;QAEA;;QAAkDJ,IAAD,CAAOgB,QAAP,CAC/CV,OAAO,CAACW,MADuC;MAGlD;IA3BG,CAAN;EA6BD;;AAvCyB;;AA0C5B,eAAe7B,SAAf"},"metadata":{},"sourceType":"module"}