{"ast":null,"code":"/**\n * @module ol/source/TileArcGISRest\n */\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { createEmpty } from '../extent.js';\nimport { modulo } from '../math.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\n\nclass TileArcGISRest extends TileImage {\n  /**\n   * @param {Options} [options] Tile ArcGIS Rest options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.tmpExtent_ = createEmpty();\n    this.setKey(this.getKeyForParams_());\n  }\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  getParams() {\n    return this.params_;\n  }\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    } // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n\n\n    const srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n    let url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    const modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  }\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  getTilePixelRatio(pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  }\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  }\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n\n\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    } // Apply default params and override with user specified values.\n\n\n    const baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    Object.assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  }\n\n}\n\nexport default TileArcGISRest;","map":{"version":3,"names":["TileImage","appendParams","createEmpty","modulo","scale","scaleSize","toSize","hash","tileCoordHash","TileArcGISRest","constructor","options","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","zDirection","params_","params","hidpi_","hidpi","tmpExtent_","setKey","getKeyForParams_","i","res","key","join","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","index","modifiedUrl","replace","getTilePixelRatio","updateParams","Object","assign","tileUrlFunction","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","getTileSize","tmpSize","baseParams"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/TileArcGISRest.js"],"sourcesContent":["/**\n * @module ol/source/TileArcGISRest\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {scale as scaleSize, toSize} from '../size.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nclass TileArcGISRest extends TileImage {\n  /**\n   * @param {Options} [options] Tile ArcGIS Rest options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection\n      .getCode()\n      .split(/:(?=\\d+$)/)\n      .pop();\n\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n    );\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    // Apply default params and override with user specified values.\n    const baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileArcGISRest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}