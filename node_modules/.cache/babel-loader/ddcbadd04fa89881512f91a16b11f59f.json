{"ast":null,"code":"/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\n\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\n\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.type = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.usage = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n\n\n  ofSize(size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  }\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   */\n\n\n  fromArray(array) {\n    this.array = getArrayClassForType(this.type).from(array);\n  }\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n\n\n  fromArrayBuffer(buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  }\n  /**\n   * @return {number} Buffer type.\n   */\n\n\n  getType() {\n    return this.type;\n  }\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n\n\n  getArray() {\n    return this.array;\n  }\n  /**\n   * @return {number} Usage.\n   */\n\n\n  getUsage() {\n    return this.usage;\n  }\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n\n\n  getSize() {\n    return this.array ? this.array.length : 0;\n  }\n\n}\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\n\n\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;","map":{"version":3,"names":["ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","STREAM_DRAW","assert","BufferUsage","WebGLArrayBuffer","constructor","type","usage","array","undefined","ofSize","size","getArrayClassForType","fromArray","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","length","Float32Array","Uint32Array"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/webgl/Buffer.js"],"sourcesContent":["/**\n * @module ol/webgl/Buffer\n */\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\nimport {assert} from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type = type;\n\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n  ofSize(size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   */\n  fromArray(array) {\n    this.array = getArrayClassForType(this.type).from(array);\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n  fromArrayBuffer(buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n  getArray() {\n    return this.array;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array ? this.array.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n"],"mappings":"AAAA;AACA;AACA;AACA,SACEA,YADF,EAEEC,YAFF,EAGEC,oBAHF,EAIEC,WAJF,EAKEC,WALF,QAMO,aANP;AAOA,SAAQC,MAAR,QAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBH,WAAW,EAAEA,WADY;EAEzBC,WAAW,EAAEA,WAFY;EAGzBH,YAAY,EAAEA;AAHW,CAApB;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMM,gBAAN,CAAuB;EACrB;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;IACvB;AACJ;AACA;AACA;IACI,KAAKC,KAAL,GAAa,IAAb;IAEA;AACJ;AACA;AACA;;IACI,KAAKF,IAAL,GAAYA,IAAZ;IAEAJ,MAAM,CAACI,IAAI,KAAKT,YAAT,IAAyBS,IAAI,KAAKP,oBAAnC,EAAyD,EAAzD,CAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKQ,KAAL,GAAaA,KAAK,KAAKE,SAAV,GAAsBF,KAAtB,GAA8BJ,WAAW,CAACH,WAAvD;EACD;EAED;AACF;AACA;AACA;;;EACEU,MAAM,CAACC,IAAD,EAAO;IACX,KAAKH,KAAL,GAAa,KAAKI,oBAAoB,CAAC,KAAKN,IAAN,CAAzB,EAAsCK,IAAtC,CAAb;EACD;EAED;AACF;AACA;AACA;;;EACEE,SAAS,CAACL,KAAD,EAAQ;IACf,KAAKA,KAAL,GAAaI,oBAAoB,CAAC,KAAKN,IAAN,CAApB,CAAgCQ,IAAhC,CAAqCN,KAArC,CAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEO,eAAe,CAACC,MAAD,EAAS;IACtB,KAAKR,KAAL,GAAa,KAAKI,oBAAoB,CAAC,KAAKN,IAAN,CAAzB,EAAsCU,MAAtC,CAAb;EACD;EAED;AACF;AACA;;;EACEC,OAAO,GAAG;IACR,OAAO,KAAKX,IAAZ;EACD;EAED;AACF;AACA;AACA;;;EACEY,QAAQ,GAAG;IACT,OAAO,KAAKV,KAAZ;EACD;EAED;AACF;AACA;;;EACEW,QAAQ,GAAG;IACT,OAAO,KAAKZ,KAAZ;EACD;EAED;AACF;AACA;AACA;;;EACEa,OAAO,GAAG;IACR,OAAO,KAAKZ,KAAL,GAAa,KAAKA,KAAL,CAAWa,MAAxB,GAAiC,CAAxC;EACD;;AAjFoB;AAoFvB;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAST,oBAAT,CAA8BN,IAA9B,EAAoC;EACzC,QAAQA,IAAR;IACE,KAAKT,YAAL;MACE,OAAOyB,YAAP;;IACF,KAAKvB,oBAAL;MACE,OAAOwB,WAAP;;IACF;MACE,OAAOD,YAAP;EANJ;AAQD;AAED,eAAelB,gBAAf"},"metadata":{},"sourceType":"module"}