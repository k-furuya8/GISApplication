{"ast":null,"code":"/**\n * @module ol/webgl/TileTexture\n */\nimport DataTile from '../DataTile.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { toSize } from '../size.js';\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\n\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\n\nfunction uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n\n  switch (bandCount) {\n    case 1:\n      {\n        format = gl.LUMINANCE;\n        break;\n      }\n\n    case 2:\n      {\n        format = gl.LUMINANCE_ALPHA;\n        break;\n      }\n\n    case 3:\n      {\n        format = gl.RGB;\n        break;\n      }\n\n    case 4:\n      {\n        format = gl.RGBA;\n        break;\n      }\n\n    default:\n      {\n        throw new Error(`Unsupported number of bands: ${bandCount}`);\n      }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n/**\n * @type {CanvasRenderingContext2D}\n */\n\n\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @typedef {Object} Options\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n\nclass TileTexture extends EventTarget {\n  /**\n   * @param {Options} options The tile texture options.\n   */\n  constructor(options) {\n    super();\n    /**\n     * @type {TileType}\n     */\n\n    this.tile;\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n\n    this.textures = [];\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n\n    this.renderSize_ = toSize(options.grid.getTileSize(options.tile.tileCoord[0]));\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.gutter_ = options.gutter || 0;\n    /**\n     * @type {number}\n     */\n\n    this.bandCount = NaN;\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @private\n     */\n\n    this.helper_ = options.helper;\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([0, // P0\n    1, 1, // P1\n    1, 1, // P2\n    0, 0, // P3\n    0]);\n    this.helper_.flushBufferData(coords);\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n\n    this.coords = coords;\n    this.setTile(options.tile);\n  }\n  /**\n   * @param {TileType} tile Tile.\n   */\n\n\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n\n      this.tile = tile;\n      this.textures.length = 0;\n      this.loaded = tile.getState() === TileState.LOADED;\n\n      if (this.loaded) {\n        this.uploadTile_();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  uploadTile_() {\n    const helper = this.helper_;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, tile.getImage(), tile.interpolate);\n      return;\n    }\n\n    const sourceTileSize = tile.getSize();\n    const pixelSize = [sourceTileSize[0] + 2 * this.gutter_, sourceTileSize[1] + 2 * this.gutter_];\n    const data = tile.getData();\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(helper, texture, data, pixelSize, this.bandCount, tile.interpolate);\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      const bandCount = textureIndex < textureCount - 1 ? 4 : (this.bandCount - 1) % 4 + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n        ++dataIndex;\n      }\n\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(helper, texture, textureData, pixelSize, bandCount, tile.interpolate);\n    }\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile_();\n      this.dispatchEvent(EventType.CHANGE);\n    }\n  }\n\n  disposeInternal() {\n    const gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n\n    for (let i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").Data|null} The data.\n   */\n\n\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    const gutter = this.gutter_;\n\n    if (this.tile instanceof DataTile) {\n      const sourceSize = this.tile.getSize();\n      const sourceWidthWithoutGutter = sourceSize[0];\n      const sourceHeightWithoutGutter = sourceSize[1];\n      const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n      const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n      const sourceCol = gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n      const sourceRow = gutter + Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n      const data = this.tile.getData();\n\n      if (data instanceof DataView) {\n        const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n        const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n        const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n        return new DataView(buffer);\n      }\n\n      const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n      return data.slice(offset, offset + this.bandCount);\n    }\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    const image = this.tile.getImage();\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n    const sourceCol = gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n    const sourceRow = gutter + Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n    let data;\n\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n\n    return data;\n  }\n\n}\n\nexport default TileTexture;","map":{"version":3,"names":["DataTile","EventTarget","EventType","ImageTile","ReprojTile","TileState","WebGLArrayBuffer","ARRAY_BUFFER","STATIC_DRAW","toSize","bindAndConfigure","gl","texture","interpolate","resampleFilter","LINEAR","NEAREST","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","uploadImageTexture","image","texImage2D","RGBA","UNSIGNED_BYTE","uploadDataTexture","helper","data","size","bandCount","getGL","textureType","canInterpolate","Float32Array","FLOAT","getExtension","extension","bytesPerRow","byteLength","unpackAlignment","format","LUMINANCE","LUMINANCE_ALPHA","RGB","Error","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","canvas","document","createElement","width","height","getContext","TileTexture","constructor","options","tile","textures","handleTileChange_","bind","renderSize_","grid","getTileSize","tileCoord","gutter_","gutter","NaN","helper_","coords","fromArray","flushBufferData","setTile","removeEventListener","CHANGE","length","loaded","getState","LOADED","uploadTile_","getImage","Image","crossOrigin","addEventListener","createTexture","push","sourceTileSize","getSize","pixelSize","getData","isFloat","pixelCount","DataType","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","Math","floor","textureCount","ceil","textureDataArrays","Array","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","textureBandIndex","dispatchEvent","disposeInternal","deleteBuffer","i","deleteTexture","getPixelData","renderCol","renderRow","renderWidth","renderHeight","sourceSize","sourceWidthWithoutGutter","sourceHeightWithoutGutter","sourceWidth","sourceHeight","sourceCol","sourceRow","DataView","bytesPerPixel","offset","buffer","slice","clearRect","drawImage","getImageData","err"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/webgl/TileTexture.js"],"sourcesContent":["/**\n * @module ol/webgl/TileTexture\n */\n\nimport DataTile from '../DataTile.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @typedef {Object} Options\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\nclass TileTexture extends EventTarget {\n  /**\n   * @param {Options} options The tile texture options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0])\n    );\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.gutter_ = options.gutter || 0;\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @private\n     */\n    this.helper_ = options.helper;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper_.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.textures.length = 0;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile_();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  uploadTile_() {\n    const helper = this.helper_;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, tile.getImage(), tile.interpolate);\n      return;\n    }\n\n    const sourceTileSize = tile.getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter_,\n      sourceTileSize[1] + 2 * this.gutter_,\n    ];\n    const data = tile.getData();\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate\n      );\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate\n      );\n    }\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile_();\n      this.dispatchEvent(EventType.CHANGE);\n    }\n  }\n\n  disposeInternal() {\n    const gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n    for (let i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").Data|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    const gutter = this.gutter_;\n\n    if (this.tile instanceof DataTile) {\n      const sourceSize = this.tile.getSize();\n\n      const sourceWidthWithoutGutter = sourceSize[0];\n      const sourceHeightWithoutGutter = sourceSize[1];\n      const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n      const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n      const sourceCol =\n        gutter +\n        Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n      const sourceRow =\n        gutter +\n        Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n      const data = this.tile.getData();\n      if (data instanceof DataView) {\n        const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n        const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n        const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n        return new DataView(buffer);\n      }\n\n      const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n      return data.slice(offset, offset + this.bandCount);\n    }\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const image = this.tile.getImage();\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n}\n\nexport default TileTexture;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}