{"ast":null,"code":"/**\n * @module ol/source/Cluster\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport { add as addCoordinate, scale as scaleCoordinate } from '../coordinate.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty, createOrUpdateFromCoordinate, getCenter } from '../extent.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(Feature):Point} [geometryFunction]\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n */\n\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options} options Cluster options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX\n    });\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n\n    this.resolution = undefined;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    this.distance = options.distance !== undefined ? options.distance : 20;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    this.minDistance = options.minDistance || 0;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    this.interpolationRatio = 0;\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n\n    this.features = [];\n    /**\n     * @param {Feature} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n\n    this.geometryFunction = options.geometryFunction || function (feature) {\n      const geometry =\n      /** @type {Point} */\n      feature.getGeometry();\n      assert(geometry.getType() == 'Point', 10); // The default `geometryFunction` can only handle `Point` geometries\n\n      return geometry;\n    };\n    /**\n     * @type {function(Point, Array<Feature>):Feature}\n     * @private\n     */\n\n\n    this.createCustomCluster_ = options.createCluster;\n    /**\n     * @type {VectorSource|null}\n     * @protected\n     */\n\n    this.source = null;\n    /**\n     * @private\n     */\n\n    this.boundRefresh_ = this.refresh.bind(this);\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   */\n\n\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n\n\n  getDistance() {\n    return this.distance;\n  }\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource|null} Source.\n   * @api\n   */\n\n\n  getSource() {\n    return this.source;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  loadFeatures(extent, resolution, projection) {\n    this.source.loadFeatures(extent, resolution, projection);\n\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n\n\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n\n\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n\n\n  getMinDistance() {\n    return this.minDistance;\n  }\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource|null} source The new source for this instance.\n   * @api\n   */\n\n\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n\n    this.source = source;\n\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n\n    this.refresh();\n  }\n  /**\n   * Handle the source changing.\n   */\n\n\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n\n\n  updateDistance(distance, minDistance) {\n    const ratio = distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed = distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n\n    if (changed) {\n      this.refresh();\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n    /** @type {Object<string, true>} */\n\n    const clustered = {};\n\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n          const neighbors = this.source.getFeaturesInExtent(extent).filter(function (neighbor) {\n            const uid = getUid(neighbor);\n\n            if (uid in clustered) {\n              return false;\n            }\n\n            clustered[uid] = true;\n            return true;\n          });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n  /**\n   * @param {Array<Feature>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n\n\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([centroid[0] * (1 - ratio) + searchCenter[0] * ratio, centroid[1] * (1 - ratio) + searchCenter[1] * ratio]);\n\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    } else {\n      return new Feature({\n        geometry,\n        features\n      });\n    }\n  }\n\n}\n\nexport default Cluster;","map":{"version":3,"names":["EventType","Feature","Point","VectorSource","add","addCoordinate","scale","scaleCoordinate","assert","buffer","createEmpty","createOrUpdateFromCoordinate","getCenter","getUid","Cluster","constructor","options","attributions","wrapX","resolution","undefined","distance","minDistance","interpolationRatio","features","geometryFunction","feature","geometry","getGeometry","getType","createCustomCluster_","createCluster","source","boundRefresh_","refresh","bind","updateDistance","setSource","clear","fast","length","getDistance","getSource","loadFeatures","extent","projection","setDistance","setMinDistance","getMinDistance","removeEventListener","CHANGE","addEventListener","cluster","addFeatures","ratio","Math","min","changed","mapDistance","getFeatures","clustered","i","ii","coordinates","getCoordinates","neighbors","getFeaturesInExtent","filter","neighbor","uid","push","centroid","splice","searchCenter"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/Cluster.js"],"sourcesContent":["/**\n * @module ol/source/Cluster\n */\n\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport {add as addCoordinate, scale as scaleCoordinate} from '../coordinate.js';\nimport {assert} from '../asserts.js';\nimport {\n  buffer,\n  createEmpty,\n  createOrUpdateFromCoordinate,\n  getCenter,\n} from '../extent.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(Feature):Point} [geometryFunction]\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n */\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options} options Cluster options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX,\n    });\n\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n    this.resolution = undefined;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.distance = options.distance !== undefined ? options.distance : 20;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.minDistance = options.minDistance || 0;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.interpolationRatio = 0;\n\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n    this.features = [];\n\n    /**\n     * @param {Feature} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n    this.geometryFunction =\n      options.geometryFunction ||\n      function (feature) {\n        const geometry = /** @type {Point} */ (feature.getGeometry());\n        assert(geometry.getType() == 'Point', 10); // The default `geometryFunction` can only handle `Point` geometries\n        return geometry;\n      };\n\n    /**\n     * @type {function(Point, Array<Feature>):Feature}\n     * @private\n     */\n    this.createCustomCluster_ = options.createCluster;\n\n    /**\n     * @type {VectorSource|null}\n     * @protected\n     */\n    this.source = null;\n\n    /**\n     * @private\n     */\n    this.boundRefresh_ = this.refresh.bind(this);\n\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n  getDistance() {\n    return this.distance;\n  }\n\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource|null} Source.\n   * @api\n   */\n  getSource() {\n    return this.source;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    this.source.loadFeatures(extent, resolution, projection);\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n  getMinDistance() {\n    return this.minDistance;\n  }\n\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource|null} source The new source for this instance.\n   * @api\n   */\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.source = source;\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.refresh();\n  }\n\n  /**\n   * Handle the source changing.\n   */\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n  updateDistance(distance, minDistance) {\n    const ratio =\n      distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed =\n      distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n    if (changed) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n\n    /** @type {Object<string, true>} */\n    const clustered = {};\n\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n\n          const neighbors = this.source\n            .getFeaturesInExtent(extent)\n            .filter(function (neighbor) {\n              const uid = getUid(neighbor);\n              if (uid in clustered) {\n                return false;\n              }\n              clustered[uid] = true;\n              return true;\n            });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<Feature>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([\n      centroid[0] * (1 - ratio) + searchCenter[0] * ratio,\n      centroid[1] * (1 - ratio) + searchCenter[1] * ratio,\n    ]);\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    } else {\n      return new Feature({\n        geometry,\n        features,\n      });\n    }\n  }\n}\n\nexport default Cluster;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}