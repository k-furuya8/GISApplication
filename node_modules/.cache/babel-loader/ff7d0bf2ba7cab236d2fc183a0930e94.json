{"ast":null,"code":"/**\n * @module ol/layer/Heatmap\n */\nimport BaseVector from './BaseVector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { clamp } from '../math.js';\nimport { createCanvasContext2D } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\n\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n/**\n * @const\n * @type {Array<string>}\n */\n\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {BaseVector<import(\"../source/Vector.js\").default, WebGLPointsLayerRenderer>}\n * @api\n */\n\nclass Heatmap extends BaseVector {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.gradient_ = null;\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n    const weight = options.weight ? options.weight : 'weight';\n\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    } // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n\n\n    this.setRenderOrder(null);\n  }\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n\n\n  getBlur() {\n    return (\n      /** @type {number} */\n      this.get(Property.BLUR)\n    );\n  }\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n\n\n  getGradient() {\n    return (\n      /** @type {Array<string>} */\n      this.get(Property.GRADIENT)\n    );\n  }\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n\n\n  getRadius() {\n    return (\n      /** @type {number} */\n      this.get(Property.RADIUS)\n    );\n  }\n  /**\n   * @private\n   */\n\n\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n\n\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n\n\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n\n\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [{\n        name: 'weight',\n        callback: function (feature) {\n          const weight = this.weightFunction_(feature);\n          return weight !== undefined ? clamp(weight, 0, 1) : 1;\n        }.bind(this)\n      }],\n      vertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }`,\n      hitVertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }`,\n      hitFragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha < 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }`,\n      uniforms: {\n        u_size: function () {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function () {\n          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));\n        }.bind(this)\n      },\n      postProcesses: [{\n        fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n            uniform float u_opacity;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a * u_opacity;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n        uniforms: {\n          u_gradientTexture: function () {\n            return this.gradient_;\n          }.bind(this),\n          u_opacity: function () {\n            return this.getOpacity();\n          }.bind(this)\n        }\n      }]\n    });\n  }\n\n  renderDeclutter() {}\n\n}\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\n\n\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n  return context.canvas;\n}\n\nexport default Heatmap;","map":{"version":3,"names":["BaseVector","WebGLPointsLayerRenderer","clamp","createCanvasContext2D","Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","Heatmap","constructor","options","baseOptions","Object","assign","gradient","radius","blur","weight","gradient_","addChangeListener","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","getBlur","getGradient","getRadius","createGradient","set","colors","createRenderer","className","getClassName","attributes","name","callback","bind","vertexShader","fragmentShader","hitVertexShader","hitFragmentShader","uniforms","u_size","u_blurSlope","Math","max","postProcesses","u_gradientTexture","u_opacity","getOpacity","renderDeclutter","width","height","context","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/layer/Heatmap.js"],"sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport BaseVector from './BaseVector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {clamp} from '../math.js';\nimport {createCanvasContext2D} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius',\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {BaseVector<import(\"../source/Vector.js\").default, WebGLPointsLayerRenderer>}\n * @api\n */\nclass Heatmap extends BaseVector {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    const weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    }\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [\n        {\n          name: 'weight',\n          callback: function (feature) {\n            const weight = this.weightFunction_(feature);\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\n          }.bind(this),\n        },\n      ],\n      vertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }`,\n      hitVertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }`,\n      hitFragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha < 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }`,\n      uniforms: {\n        u_size: function () {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function () {\n          return (\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\n          );\n        }.bind(this),\n      },\n      postProcesses: [\n        {\n          fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n            uniform float u_opacity;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a * u_opacity;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n          uniforms: {\n            u_gradientTexture: function () {\n              return this.gradient_;\n            }.bind(this),\n            u_opacity: function () {\n              return this.getOpacity();\n            }.bind(this),\n          },\n        },\n      ],\n    });\n  }\n\n  renderDeclutter() {}\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.canvas;\n}\n\nexport default Heatmap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}