{"ast":null,"code":"/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\n\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n\n    this.geometries_ = geometries ? geometries : null;\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    this.changeEventsKeys_ = [];\n    this.listenGeometriesChange_();\n  }\n  /**\n   * @private\n   */\n\n\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n  /**\n   * @private\n   */\n\n\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n    }\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n\n\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n\n    return minSquaredDistance;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n\n    return extent;\n  }\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n\n\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n        /** @type {GeometryCollection} */\n        geometries[i].getGeometriesArrayRecursive());\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n\n    return geometriesArray;\n  }\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n\n\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  getType() {\n    return 'GeometryCollection';\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n\n    this.changed();\n  }\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n\n    this.changed();\n  }\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n\n\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n\n\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n\n\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n\n    this.changed();\n  }\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n\n    this.changed();\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n\n}\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\n\n\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;","map":{"version":3,"names":["EventType","Geometry","closestSquaredDistanceXY","createOrUpdateEmpty","extend","getCenter","listen","unlistenByKey","GeometryCollection","constructor","geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","length","i","ii","push","CHANGE","changed","clone","geometryCollection","setGeometries","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","containsXY","computeExtent","extent","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","getType","concat","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","intersectsExtent","isEmpty","rotate","angle","anchor","scale","sx","sy","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","clonedGeometries"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/geom/GeometryCollection.js"],"sourcesContent":["/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}