{"ast":null,"code":"/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n\n    this.color_ = options.color !== undefined ? options.color : null;\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n\n    this.lineCap_ = options.lineCap;\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lineDashOffset_ = options.lineDashOffset;\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n\n    this.lineJoin_ = options.lineJoin;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.miterLimit_ = options.miterLimit;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.width_ = options.width;\n  }\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth()\n    });\n  }\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n\n\n  getColor() {\n    return this.color_;\n  }\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n\n\n  getLineCap() {\n    return this.lineCap_;\n  }\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>|null} Line dash.\n   * @api\n   */\n\n\n  getLineDash() {\n    return this.lineDash_;\n  }\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n\n\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n\n\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n\n\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n\n\n  getWidth() {\n    return this.width_;\n  }\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n\n\n  setColor(color) {\n    this.color_ = color;\n  }\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n\n\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n  /**\n   * Set the line dash.\n   *\n   * @param {Array<number>|null} lineDash Line dash.\n   * @api\n   */\n\n\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n\n\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n\n\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n\n\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n\n\n  setWidth(width) {\n    this.width_ = width;\n  }\n\n}\n\nexport default Stroke;","map":{"version":3,"names":["Stroke","constructor","options","color_","color","undefined","lineCap_","lineCap","lineDash_","lineDash","lineDashOffset_","lineDashOffset","lineJoin_","lineJoin","miterLimit_","miterLimit","width_","width","clone","getColor","Array","isArray","slice","getLineCap","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","getWidth","setColor","setLineCap","setLineDash","setLineDashOffset","setLineJoin","setMiterLimit","setWidth"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/style/Stroke.js"],"sourcesContent":["/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth(),\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>|null} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * @param {Array<number>|null} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\n\nexport default Stroke;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAN,CAAa;EACX;AACF;AACA;EACEC,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,IAAI,EAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcD,OAAO,CAACE,KAAR,KAAkBC,SAAlB,GAA8BH,OAAO,CAACE,KAAtC,GAA8C,IAA5D;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,QAAL,GAAgBJ,OAAO,CAACK,OAAxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBN,OAAO,CAACO,QAAR,KAAqBJ,SAArB,GAAiCH,OAAO,CAACO,QAAzC,GAAoD,IAArE;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,eAAL,GAAuBR,OAAO,CAACS,cAA/B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBV,OAAO,CAACW,QAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmBZ,OAAO,CAACa,UAA3B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcd,OAAO,CAACe,KAAtB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,KAAK,GAAG;IACN,MAAMd,KAAK,GAAG,KAAKe,QAAL,EAAd;IACA,OAAO,IAAInB,MAAJ,CAAW;MAChBI,KAAK,EAAEgB,KAAK,CAACC,OAAN,CAAcjB,KAAd,IAAuBA,KAAK,CAACkB,KAAN,EAAvB,GAAuClB,KAAK,IAAIC,SADvC;MAEhBE,OAAO,EAAE,KAAKgB,UAAL,EAFO;MAGhBd,QAAQ,EAAE,KAAKe,WAAL,KAAqB,KAAKA,WAAL,GAAmBF,KAAnB,EAArB,GAAkDjB,SAH5C;MAIhBM,cAAc,EAAE,KAAKc,iBAAL,EAJA;MAKhBZ,QAAQ,EAAE,KAAKa,WAAL,EALM;MAMhBX,UAAU,EAAE,KAAKY,aAAL,EANI;MAOhBV,KAAK,EAAE,KAAKW,QAAL;IAPS,CAAX,CAAP;EASD;EAED;AACF;AACA;AACA;AACA;;;EACET,QAAQ,GAAG;IACT,OAAO,KAAKhB,MAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEoB,UAAU,GAAG;IACX,OAAO,KAAKjB,QAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEkB,WAAW,GAAG;IACZ,OAAO,KAAKhB,SAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEiB,iBAAiB,GAAG;IAClB,OAAO,KAAKf,eAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgB,WAAW,GAAG;IACZ,OAAO,KAAKd,SAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEe,aAAa,GAAG;IACd,OAAO,KAAKb,WAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEc,QAAQ,GAAG;IACT,OAAO,KAAKZ,MAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEa,QAAQ,CAACzB,KAAD,EAAQ;IACd,KAAKD,MAAL,GAAcC,KAAd;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE0B,UAAU,CAACvB,OAAD,EAAU;IAClB,KAAKD,QAAL,GAAgBC,OAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEwB,WAAW,CAACtB,QAAD,EAAW;IACpB,KAAKD,SAAL,GAAiBC,QAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEuB,iBAAiB,CAACrB,cAAD,EAAiB;IAChC,KAAKD,eAAL,GAAuBC,cAAvB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEsB,WAAW,CAACpB,QAAD,EAAW;IACpB,KAAKD,SAAL,GAAiBC,QAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEqB,aAAa,CAACnB,UAAD,EAAa;IACxB,KAAKD,WAAL,GAAmBC,UAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEoB,QAAQ,CAAClB,KAAD,EAAQ;IACd,KAAKD,MAAL,GAAcC,KAAd;EACD;;AAvMU;;AA0Mb,eAAejB,MAAf"},"metadata":{},"sourceType":"module"}