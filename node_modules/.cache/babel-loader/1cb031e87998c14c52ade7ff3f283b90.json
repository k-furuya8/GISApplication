{"ast":null,"code":"/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return length;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\n\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}","map":{"version":3,"names":["lineStringLength","flatCoordinates","offset","end","stride","x1","y1","length","i","x2","y2","Math","sqrt","linearRingLength","perimeter","dx","dy"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/geom/flat/length.js"],"sourcesContent":["/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,eAA1B,EAA2CC,MAA3C,EAAmDC,GAAnD,EAAwDC,MAAxD,EAAgE;EACrE,IAAIC,EAAE,GAAGJ,eAAe,CAACC,MAAD,CAAxB;EACA,IAAII,EAAE,GAAGL,eAAe,CAACC,MAAM,GAAG,CAAV,CAAxB;EACA,IAAIK,MAAM,GAAG,CAAb;;EACA,KAAK,IAAIC,CAAC,GAAGN,MAAM,GAAGE,MAAtB,EAA8BI,CAAC,GAAGL,GAAlC,EAAuCK,CAAC,IAAIJ,MAA5C,EAAoD;IAClD,MAAMK,EAAE,GAAGR,eAAe,CAACO,CAAD,CAA1B;IACA,MAAME,EAAE,GAAGT,eAAe,CAACO,CAAC,GAAG,CAAL,CAA1B;IACAD,MAAM,IAAII,IAAI,CAACC,IAAL,CAAU,CAACH,EAAE,GAAGJ,EAAN,KAAaI,EAAE,GAAGJ,EAAlB,IAAwB,CAACK,EAAE,GAAGJ,EAAN,KAAaI,EAAE,GAAGJ,EAAlB,CAAlC,CAAV;IACAD,EAAE,GAAGI,EAAL;IACAH,EAAE,GAAGI,EAAL;EACD;;EACD,OAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,gBAAT,CAA0BZ,eAA1B,EAA2CC,MAA3C,EAAmDC,GAAnD,EAAwDC,MAAxD,EAAgE;EACrE,IAAIU,SAAS,GAAGd,gBAAgB,CAACC,eAAD,EAAkBC,MAAlB,EAA0BC,GAA1B,EAA+BC,MAA/B,CAAhC;EACA,MAAMW,EAAE,GAAGd,eAAe,CAACE,GAAG,GAAGC,MAAP,CAAf,GAAgCH,eAAe,CAACC,MAAD,CAA1D;EACA,MAAMc,EAAE,GAAGf,eAAe,CAACE,GAAG,GAAGC,MAAN,GAAe,CAAhB,CAAf,GAAoCH,eAAe,CAACC,MAAM,GAAG,CAAV,CAA9D;EACAY,SAAS,IAAIH,IAAI,CAACC,IAAL,CAAUG,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAb;EACA,OAAOF,SAAP;AACD"},"metadata":{},"sourceType":"module"}