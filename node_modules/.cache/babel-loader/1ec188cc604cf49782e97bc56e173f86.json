{"ast":null,"code":"/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\n\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\n\nclass GeolocationError extends BaseEvent {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  constructor(error) {\n    super(EventType.ERROR);\n    /**\n     * @type {number}\n     */\n\n    this.code = error.code;\n    /**\n     * @type {string}\n     */\n\n    this.message = error.message;\n  }\n\n}\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\n\n\nclass Geolocation extends BaseObject {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n\n    this.un;\n    options = options || {};\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    this.position_ = null;\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n\n    this.transform_ = identityTransform;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.watchId_ = undefined;\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n  /**\n   * @private\n   */\n\n\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  handleTrackingChanged_() {\n    if ('geolocation' in navigator) {\n      const tracking = this.getTracking();\n\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n\n\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  positionError_(error) {\n    this.dispatchEvent(new GeolocationError(error));\n  }\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  getAccuracy() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ACCURACY)\n    );\n  }\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n\n\n  getAccuracyGeometry() {\n    return (\n      /** @type {?import(\"./geom/Polygon.js\").default} */\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  }\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n\n\n  getAltitude() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE)\n    );\n  }\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  getAltitudeAccuracy() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  }\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n\n\n  getHeading() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.HEADING)\n    );\n  }\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n\n\n  getPosition() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  }\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  getProjection() {\n    return (\n      /** @type {import(\"./proj/Projection.js\").default|undefined} */\n      this.get(Property.PROJECTION)\n    );\n  }\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n\n\n  getSpeed() {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.SPEED)\n    );\n  }\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n\n\n  getTracking() {\n    return (\n      /** @type {boolean} */\n      this.get(Property.TRACKING)\n    );\n  }\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  getTrackingOptions() {\n    return (\n      /** @type {PositionOptions|undefined} */\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  }\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n\n\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n\n}\n\nexport default Geolocation;","map":{"version":3,"names":["BaseEvent","BaseObject","EventType","circular","circularPolygon","get","getProjection","getTransformFromProjections","identityTransform","toRadians","Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","GeolocationError","constructor","error","ERROR","code","message","Geolocation","options","on","once","un","position_","transform_","watchId_","undefined","addChangeListener","handleProjectionChanged_","handleTrackingChanged_","projection","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","disposeInternal","set","navigator","getTracking","geolocation","watchPosition","positionChange_","bind","positionError_","getTrackingOptions","clearWatch","position","coords","accuracy","altitude","altitudeAccuracy","heading","longitude","latitude","projectedPosition","speed","geometry","applyTransform","changed","dispatchEvent","getAccuracy","getAccuracyGeometry","getAltitude","getAltitudeAccuracy","getHeading","getPosition","getSpeed"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/Geolocation.js"],"sourcesContent":["/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport {circular as circularPolygon} from './geom/Polygon.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  identityTransform,\n} from './proj.js';\nimport {toRadians} from './math.js';\n\n/**\n * @enum {string}\n */\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions',\n};\n\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\nclass GeolocationError extends BaseEvent {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  constructor(error) {\n    super(EventType.ERROR);\n\n    /**\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * @type {string}\n     */\n    this.message = error.message;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nclass Geolocation extends BaseObject {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    this.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.watchId_ = undefined;\n\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        projection\n      );\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleTrackingChanged_() {\n    if ('geolocation' in navigator) {\n      const tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(\n          this.positionChange_.bind(this),\n          this.positionError_.bind(this),\n          this.getTrackingOptions()\n        );\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(\n      Property.ALTITUDE,\n      coords.altitude === null ? undefined : coords.altitude\n    );\n    this.set(\n      Property.ALTITUDE_ACCURACY,\n      coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy\n    );\n    this.set(\n      Property.HEADING,\n      coords.heading === null ? undefined : toRadians(coords.heading)\n    );\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n  positionError_(error) {\n    this.dispatchEvent(new GeolocationError(error));\n  }\n\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAccuracy() {\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n  }\n\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  getAccuracyGeometry() {\n    return /** @type {?import(\"./geom/Polygon.js\").default} */ (\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  }\n\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  getAltitude() {\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n  }\n\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAltitudeAccuracy() {\n    return /** @type {number|undefined} */ (\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  }\n\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  getHeading() {\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\n  }\n\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (\n      this.get(Property.PROJECTION)\n    );\n  }\n\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  getSpeed() {\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\n  }\n\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  getTracking() {\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\n  }\n\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  getTrackingOptions() {\n    return /** @type {PositionOptions|undefined} */ (\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  }\n\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n}\n\nexport default Geolocation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}