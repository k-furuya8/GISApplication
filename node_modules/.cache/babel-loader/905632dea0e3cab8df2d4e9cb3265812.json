{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nconst CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n/**\n * @enum {string}\n */\n\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\n\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<import(\"../Feature\").FeatureLike>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  constructor(type, features, mapBrowserEvent) {\n    super(type);\n    /**\n     * The features being modified.\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @api\n     */\n\n    this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\n\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(\n    /** @type {import(\"./Pointer.js\").Options} */\n    options);\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n\n    this.un;\n    /** @private */\n\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n\n    this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n    this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n\n    this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n\n    this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @private\n     */\n\n    this.featuresBeingModified_ = null;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n\n    this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n\n    this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n\n    this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n\n    this.source_ = null;\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n\n    this.hitDetection_ = null;\n    /** @type {Collection<Feature>} */\n\n    let features;\n\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(VectorEventType.ADDFEATURE, this.handleSourceAdd_.bind(this));\n      this.source_.addEventListener(VectorEventType.REMOVEFEATURE, this.handleSourceRemove_.bind(this));\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n\n    if (options.hitDetection) {\n      this.hitDetection_ = options.hitDetection;\n    }\n    /**\n     * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n     * @private\n     */\n\n\n    this.features_ = features;\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(CollectionEventType.ADD, this.handleFeatureAdd_.bind(this));\n    this.features_.addEventListener(CollectionEventType.REMOVE, this.handleFeatureRemove_.bind(this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n\n    this.lastPointerEvent_ = null;\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n\n    this.delta_ = [0, 0];\n    /**\n     * @private\n     */\n\n    this.snapToPointer_ = options.snapToPointer === undefined ? !this.hitDetection_ : options.snapToPointer;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n\n    const map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n\n\n  willModifyFeatures_(evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      const features = this.featuresBeingModified_.getArray();\n\n      for (let i = 0, ii = segments.length; i < ii; ++i) {\n        const segment = segments[i];\n\n        for (let s = 0, ss = segment.length; s < ss; ++s) {\n          const feature = segment[s].feature;\n\n          if (feature && !features.includes(feature)) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n      }\n    }\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of candidate features is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n\n    const nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n\n      rBush.remove(nodeToRemove);\n    }\n  }\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    super.setActive(active);\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n\n\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  getOverlay() {\n    return this.overlay_;\n  }\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n\n\n  handleFeatureAdd_(evt) {\n    this.addFeature_(evt.element);\n  }\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n\n\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature =\n      /** @type {Feature} */\n      evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n\n\n  handleFeatureRemove_(evt) {\n    this.removeFeature_(evt.element);\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n\n\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n      /** @type {SegmentData} */\n\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry =\n    /** @type {import(\"../geom/Geometry.js\").default} */\n    geometry;\n    const userProjection = getUserProjection();\n\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle(\n      /** @type {import(\"../geom/Circle.js\").default} */\n      circleGeometry).transform(projection, userProjection);\n    }\n\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n\n\n  createOrUpdateVertexFeature_(coordinates, features, geometries) {\n    let vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n\n\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    this.lastPointerEvent_ = mapBrowserEvent;\n    let handled;\n\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n\n\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n    const vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n    const features = [];\n    const geometries = [];\n\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const feature = segmentData.feature;\n\n      if (!features.includes(feature)) {\n        features.push(feature);\n      }\n\n      const geometry = segmentData.geometry;\n\n      if (!geometries.includes(geometry)) {\n        geometries.push(geometry);\n      }\n\n      const depth = segmentData.depth;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            const userProjection = getUserProjection();\n\n            if (userProjection) {\n              const circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  }\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n\n    const pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    const vertexFeature = this.vertexFeature_;\n\n    if (vertexFeature) {\n      const projection = evt.map.getView().getProjection();\n      const insertVertices = [];\n      const vertex = vertexFeature.getGeometry().getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.geometry);\n        const depth = segmentDataMatch.depth;\n\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (segmentDataMatch.geometry.getType() === 'Circle' && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n\n          continue;\n        }\n\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          if (componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            let coordinates = segmentDataMatch.geometry.getCoordinates();\n\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n\n              /* falls through */\n\n              case 'Polygon':\n                if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {\n                  continue;\n                }\n\n                break;\n\n              default: // pass\n\n            }\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n\n    return !!this.vertexFeature_;\n  }\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        let circleGeometry = geometry;\n        const userProjection = getUserProjection();\n\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n    }\n\n    return false;\n  }\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n\n\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  }\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../Map.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [coordinate] The pixel Coordinate.\n   * @private\n   */\n\n\n  handlePointerAtPixel_(pixel, map, coordinate) {\n    const pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);\n    const projection = map.getView().getProjection();\n\n    const sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    /** @type {Array<SegmentData>|undefined} */\n\n\n    let nodes;\n    let hitPointGeometry;\n\n    if (this.hitDetection_) {\n      const layerFilter = typeof this.hitDetection_ === 'object' ? layer => layer === this.hitDetection_ : undefined;\n      map.forEachFeatureAtPixel(pixel, (feature, layer, geometry) => {\n        geometry = geometry ||\n        /** @type {import(\"../geom/SimpleGeometry\").default} */\n        feature.getGeometry();\n\n        if (geometry.getType() === 'Point' && this.features_.getArray().includes(feature)) {\n          hitPointGeometry = geometry;\n          const coordinate = geometry.getFlatCoordinates().slice(0, 2);\n          nodes = [{\n            feature,\n            geometry,\n            segment: [coordinate, coordinate]\n          }];\n        }\n\n        return true;\n      }, {\n        layerFilter\n      });\n    }\n\n    if (!nodes) {\n      const viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n      const buffer = map.getView().getResolution() * this.pixelTolerance_;\n      const box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      const node = nodes.sort(sortByDistance)[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n\n        if (node.geometry.getType() === 'Circle' && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          const geometries = {};\n          geometries[getUid(node.geometry)] = true;\n\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              const geometryUid = getUid(nodes[i].geometry);\n\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n\n\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n\n\n  removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      const removed = this.removeVertex_();\n\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      }\n\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n\n    return false;\n  }\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n\n\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  }\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n\n\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n\n\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  }\n\n}\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle') {\n    let circleGeometry =\n    /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n\n      if (userProjection) {\n        circleGeometry =\n        /** @type {import(\"../geom/Circle.js\").default} */\n        circleGeometry.clone().transform(userProjection, projection);\n      }\n\n      const distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      const distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle' && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    let circleGeometry =\n    /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n    const userProjection = getUserProjection();\n\n    if (userProjection) {\n      circleGeometry =\n      /** @type {import(\"../geom/Circle.js\").default} */\n      circleGeometry.clone().transform(userProjection, projection);\n    }\n\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\nexport default Modify;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","Feature","MapBrowserEventType","Point","PointerInteraction","RBush","VectorEventType","VectorLayer","VectorSource","altKeyOnly","always","primaryAction","singleClick","boundingExtent","buffer","bufferExtent","createOrUpdateFromCoordinate","createExtent","closestOnSegment","distance","coordinateDistance","equals","coordinatesEqual","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","fromCircle","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","getUid","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","tempExtent","tempSegment","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","constructor","type","features","mapBrowserEvent","Modify","options","on","once","un","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","featuresBeingModified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","hitDetection_","getFeatures","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","hitDetection","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","delta_","snapToPointer_","snapToPointer","feature","geometry","getGeometry","writer","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","segments","getArray","i","ii","length","segment","s","ss","includes","push","getLength","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","nodeToRemove","j","splice","remove","setActive","active","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","insert","getExtent","points","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","projection","getView","getProjection","clone","transform","geometries","getGeometriesArray","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","set","handleEvent","originalEvent","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","setCenter","radius","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","Array","closestVertex","closestOnSegmentData","insertVertex_","handleUpEvent","update","getCoordinateFromPixel","sortByDistance","a","b","projectedDistanceToSegmentDataSquared","nodes","hitPointGeometry","layerFilter","layer","forEachFeatureAtPixel","getFlatCoordinates","viewExtent","getResolution","box","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","geometryUid","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","resolution"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/interaction/Modify.js"],"sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {\n  altKeyOnly,\n  always,\n  primaryAction,\n  singleClick,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  buffer as bufferExtent,\n  createOrUpdateFromCoordinate as createExtent,\n} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  equals as coordinatesEqual,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {equals} from '../array.js';\nimport {fromCircle} from '../geom/Polygon.js';\nimport {\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from '../proj.js';\nimport {getUid} from '../util.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend',\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<import(\"../Feature\").FeatureLike>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  constructor(type, features, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    this.un;\n\n    /** @private */\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition\n      ? options.deleteCondition\n      : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition\n      ? options.insertVertexCondition\n      : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @private\n     */\n    this.featuresBeingModified_ = null;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n    this.hitDetection_ = null;\n\n    /** @type {Collection<Feature>} */\n    let features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(\n        VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_.bind(this)\n      );\n      this.source_.addEventListener(\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_.bind(this)\n      );\n    }\n    if (!features) {\n      throw new Error(\n        'The modify interaction requires features, a source or a layer'\n      );\n    }\n    if (options.hitDetection) {\n      this.hitDetection_ = options.hitDetection;\n    }\n\n    /**\n     * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(\n      CollectionEventType.ADD,\n      this.handleFeatureAdd_.bind(this)\n    );\n    this.features_.addEventListener(\n      CollectionEventType.REMOVE,\n      this.handleFeatureRemove_.bind(this)\n    );\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n    this.delta_ = [0, 0];\n\n    /**\n     * @private\n     */\n    this.snapToPointer_ =\n      options.snapToPointer === undefined\n        ? !this.hitDetection_\n        : options.snapToPointer;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n  willModifyFeatures_(evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      const features = this.featuresBeingModified_.getArray();\n      for (let i = 0, ii = segments.length; i < ii; ++i) {\n        const segment = segments[i];\n        for (let s = 0, ss = segment.length; s < ss; ++s) {\n          const feature = segment[s].feature;\n          if (feature && !features.includes(feature)) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYSTART,\n            this.featuresBeingModified_,\n            evt\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of candidate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(\n      EventType.CHANGE,\n      this.boundHandleFeatureChange_\n    );\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    const nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function (node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      }\n    );\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(evt.element);\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    this.removeFeature_(evt.element);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    /** @type {SegmentData} */\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates],\n    };\n\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates],\n      };\n\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment,\n      };\n\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment,\n          };\n\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n\n    /** @type {SegmentData} */\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    /** @type {SegmentData} */\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n      circleGeometry = fromCircle(\n        /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)\n      ).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates, features, geometries) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (\n      !mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (\n        mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n        !this.ignoreNextSingleClick_\n      ) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n\n    const vertex = [\n      evt.coordinate[0] + this.delta_[0],\n      evt.coordinate[1] + this.delta_[1],\n    ];\n    const features = [];\n    const geometries = [];\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const feature = segmentData.feature;\n      if (!features.includes(feature)) {\n        features.push(feature);\n      }\n      const geometry = segmentData.geometry;\n      if (!geometries.includes(geometry)) {\n        geometries.push(geometry);\n      }\n      const depth = segmentData.depth;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(\n              fromUserCoordinate(geometry.getCenter(), projection),\n              fromUserCoordinate(vertex, projection)\n            );\n            const userProjection = getUserProjection();\n            if (userProjection) {\n              const circleGeometry = geometry\n                .clone()\n                .transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry\n                .transform(projection, userProjection)\n                .getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    const pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const projection = evt.map.getView().getProjection();\n      const insertVertices = [];\n      const vertex = vertexFeature.getGeometry().getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.geometry);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (\n          segmentDataMatch.geometry.getType() === 'Circle' &&\n          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          const closestVertex = closestOnSegmentData(\n            pixelCoordinate,\n            segmentDataMatch,\n            projection\n          );\n          if (\n            coordinatesEqual(closestVertex, vertex) &&\n            !componentSegments[uid][0]\n          ) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[0], vertex) &&\n          !componentSegments[uid][0]\n        ) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[1], vertex) &&\n          !componentSegments[uid][1]\n        ) {\n          if (\n            componentSegments[uid][0] &&\n            componentSegments[uid][0].index === 0\n          ) {\n            let coordinates = segmentDataMatch.geometry.getCoordinates();\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n              /* falls through */\n              case 'Polygon':\n                if (\n                  segmentDataMatch.index !==\n                  coordinates[depth[0]].length - 2\n                ) {\n                  continue;\n                }\n                break;\n              default:\n              // pass\n            }\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          getUid(segment) in this.vertexSegments_ &&\n          !componentSegments[uid][0] &&\n          !componentSegments[uid][1] &&\n          this.insertVertexCondition_(evt)\n        ) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        let circleGeometry = geometry;\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry\n            .clone()\n            .transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(\n            projection,\n            userProjection\n          );\n        }\n        this.rBush_.update(\n          circleGeometry.getExtent(),\n          circumferenceSegmentData\n        );\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(\n        new ModifyEvent(\n          ModifyEventType.MODIFYEND,\n          this.featuresBeingModified_,\n          evt\n        )\n      );\n      this.featuresBeingModified_ = null;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../Map.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [coordinate] The pixel Coordinate.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map, coordinate) {\n    const pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);\n    const projection = map.getView().getProjection();\n    const sortByDistance = function (a, b) {\n      return (\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)\n      );\n    };\n\n    /** @type {Array<SegmentData>|undefined} */\n    let nodes;\n    let hitPointGeometry;\n    if (this.hitDetection_) {\n      const layerFilter =\n        typeof this.hitDetection_ === 'object'\n          ? (layer) => layer === this.hitDetection_\n          : undefined;\n      map.forEachFeatureAtPixel(\n        pixel,\n        (feature, layer, geometry) => {\n          geometry =\n            geometry ||\n            /** @type {import(\"../geom/SimpleGeometry\").default} */ (\n              feature.getGeometry()\n            );\n          if (\n            geometry.getType() === 'Point' &&\n            this.features_.getArray().includes(feature)\n          ) {\n            hitPointGeometry = geometry;\n            const coordinate = geometry.getFlatCoordinates().slice(0, 2);\n            nodes = [\n              {\n                feature,\n                geometry,\n                segment: [coordinate, coordinate],\n              },\n            ];\n          }\n          return true;\n        },\n        {layerFilter}\n      );\n    }\n    if (!nodes) {\n      const viewExtent = fromUserExtent(\n        createExtent(pixelCoordinate, tempExtent),\n        projection\n      );\n      const buffer = map.getView().getResolution() * this.pixelTolerance_;\n      const box = toUserExtent(\n        bufferExtent(viewExtent, buffer, tempExtent),\n        projection\n      );\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      const node = nodes.sort(sortByDistance)[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n        if (\n          node.geometry.getType() === 'Circle' &&\n          node.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry]\n          );\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex =\n              squaredDist1 > squaredDist2\n                ? closestSegment[1]\n                : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry]\n          );\n          const geometries = {};\n          geometries[getUid(node.geometry)] = true;\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if (\n              (coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1])) ||\n              (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0]))\n            ) {\n              const geometryUid = getUid(nodes[i].geometry);\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n\n    /** @type {SegmentData} */\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    /** @type {SegmentData} */\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (\n      this.lastPointerEvent_ &&\n      this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG\n    ) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      const removed = this.removeVertex_();\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYEND,\n            this.featuresBeingModified_,\n            evt\n          )\n        );\n      }\n\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments,\n          };\n\n          this.rBush_.insert(\n            boundingExtent(newSegmentData.segment),\n            newSegmentData\n          );\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(\n      geometry.getExtent(),\n      function (segmentDataMatch) {\n        if (\n          segmentDataMatch.geometry === geometry &&\n          (depth === undefined ||\n            segmentDataMatch.depth === undefined ||\n            equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index\n        ) {\n          segmentDataMatch.index += delta;\n        }\n      }\n    );\n  }\n}\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(\n  pointCoordinates,\n  segmentData,\n  projection\n) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle') {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n          circleGeometry.clone().transform(userProjection, projection)\n        );\n      }\n      const distanceToCenterSquared = squaredCoordinateDistance(\n        circleGeometry.getCenter(),\n        fromUserCoordinate(pointCoordinates, projection)\n      );\n      const distanceToCircumference =\n        Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (\n    geometry.getType() === 'Circle' &&\n    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX\n  ) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n        circleGeometry.clone().transform(userProjection, projection)\n      );\n    }\n    return toUserCoordinate(\n      circleGeometry.getClosestPoint(\n        fromUserCoordinate(pointCoordinates, projection)\n      ),\n      projection\n    );\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(\n    closestOnSegment(coordinate, tempSegment),\n    projection\n  );\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\nexport default Modify;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,kBAAP,MAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SACEC,UADF,EAEEC,MAFF,EAGEC,aAHF,EAIEC,WAJF,QAKO,wBALP;AAMA,SACEC,cADF,EAEEC,MAAM,IAAIC,YAFZ,EAGEC,4BAA4B,IAAIC,YAHlC,QAIO,cAJP;AAKA,SACEC,gBADF,EAEEC,QAAQ,IAAIC,kBAFd,EAGEC,MAAM,IAAIC,gBAHZ,EAIEC,eAAe,IAAIC,yBAJrB,EAKEC,wBALF,QAMO,kBANP;AAOA,SAAQC,kBAAR,QAAiC,mBAAjC;AACA,SAAQL,MAAR,QAAqB,aAArB;AACA,SAAQM,UAAR,QAAyB,oBAAzB;AACA,SACEC,kBADF,EAEEC,cAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,YALF,QAMO,YANP;AAOA,SAAQC,MAAR,QAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,CAA5B;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,0BAA0B,GAAG,CAAnC;AAEA,MAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,WAAW,EAAE,aANS;;EAOtB;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE;AAZW,CAAxB;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,SAA0B1C,KAA1B,CAAgC;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;EACE2C,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiBC,eAAjB,EAAkC;IAC3C,MAAMF,IAAN;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBA,QAAhB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,eAAL,GAAuBA,eAAvB;EACD;;AAxBoC;AA2BvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAN,SAAqB1C,kBAArB,CAAwC;EACtC;AACF;AACA;EACEsC,WAAW,CAACK,OAAD,EAAU;IACnB;IAAM;IAA+CA,OAArD;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;;IACI,KAAKC,IAAL;IAEA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;;IACA,KAAKC,yBAAL,GAAiC,KAAKC,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAAjC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBP,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAA5B,GAAwC5C,aAA1D;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAK6C,uBAAL,GAA+B,UAAUX,eAAV,EAA2B;MACxD,OAAOpC,UAAU,CAACoC,eAAD,CAAV,IAA+BjC,WAAW,CAACiC,eAAD,CAAjD;IACD,CAFD;IAIA;AACJ;AACA;AACA;;;IACI,KAAKY,gBAAL,GAAwBV,OAAO,CAACW,eAAR,GACpBX,OAAO,CAACW,eADY,GAEpB,KAAKF,uBAFT;IAIA;AACJ;AACA;AACA;;IACI,KAAKG,sBAAL,GAA8BZ,OAAO,CAACa,qBAAR,GAC1Bb,OAAO,CAACa,qBADkB,GAE1BlD,MAFJ;IAIA;AACJ;AACA;AACA;AACA;;IACI,KAAKmD,cAAL,GAAsB,IAAtB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,eAAL,GAAuB,IAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,KAAKC,sBAAL,GAA8B,KAA9B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,sBAAL,GAA8B,IAA9B;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,IAAI7D,KAAJ,EAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAK8D,eAAL,GACEpB,OAAO,CAACqB,cAAR,KAA2BC,SAA3B,GAAuCtB,OAAO,CAACqB,cAA/C,GAAgE,EADlE;IAGA;AACJ;AACA;AACA;;IACI,KAAKE,gBAAL,GAAwB,KAAxB;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,KAAKC,gBAAL,GAAwB,KAAxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,aAAL,GAAqB,EAArB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,QAAL,GAAgB,IAAIlE,WAAJ,CAAgB;MAC9BmE,MAAM,EAAE,IAAIlE,YAAJ,CAAiB;QACvBmE,eAAe,EAAE,KADM;QAEvBC,KAAK,EAAE,CAAC,CAAC7B,OAAO,CAAC6B;MAFM,CAAjB,CADsB;MAK9BC,KAAK,EAAE9B,OAAO,CAAC8B,KAAR,GAAgB9B,OAAO,CAAC8B,KAAxB,GAAgCC,uBAAuB,EALhC;MAM9BC,oBAAoB,EAAE,IANQ;MAO9BC,sBAAsB,EAAE;IAPM,CAAhB,CAAhB;IAUA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,gBAAL,GAAwB;MACtB,SAAS,KAAKC,mBAAL,CAAyB7B,IAAzB,CAA8B,IAA9B,CADa;MAEtB,cAAc,KAAK8B,wBAAL,CAA8B9B,IAA9B,CAAmC,IAAnC,CAFQ;MAGtB,cAAc,KAAK8B,wBAAL,CAA8B9B,IAA9B,CAAmC,IAAnC,CAHQ;MAItB,WAAW,KAAK+B,qBAAL,CAA2B/B,IAA3B,CAAgC,IAAhC,CAJW;MAKtB,cAAc,KAAKgC,wBAAL,CAA8BhC,IAA9B,CAAmC,IAAnC,CALQ;MAMtB,mBAAmB,KAAKiC,6BAAL,CAAmCjC,IAAnC,CAAwC,IAAxC,CANG;MAOtB,gBAAgB,KAAKkC,0BAAL,CAAgClC,IAAhC,CAAqC,IAArC,CAPM;MAQtB,UAAU,KAAKmC,oBAAL,CAA0BnC,IAA1B,CAA+B,IAA/B,CARY;MAStB,sBAAsB,KAAKoC,gCAAL,CAAsCpC,IAAtC,CAA2C,IAA3C;IATA,CAAxB;IAYA;AACJ;AACA;AACA;;IACI,KAAKqC,OAAL,GAAe,IAAf;IAEA;AACJ;AACA;;IACI,KAAKC,aAAL,GAAqB,IAArB;IAEA;;IACA,IAAI/C,QAAJ;;IACA,IAAIG,OAAO,CAACH,QAAZ,EAAsB;MACpBA,QAAQ,GAAGG,OAAO,CAACH,QAAnB;IACD,CAFD,MAEO,IAAIG,OAAO,CAAC2B,MAAZ,EAAoB;MACzB,KAAKgB,OAAL,GAAe3C,OAAO,CAAC2B,MAAvB;MACA9B,QAAQ,GAAG,IAAI/C,UAAJ,CAAe,KAAK6F,OAAL,CAAaE,WAAb,EAAf,CAAX;MACA,KAAKF,OAAL,CAAaG,gBAAb,CACEvF,eAAe,CAACwF,UADlB,EAEE,KAAKC,gBAAL,CAAsB1C,IAAtB,CAA2B,IAA3B,CAFF;MAIA,KAAKqC,OAAL,CAAaG,gBAAb,CACEvF,eAAe,CAAC0F,aADlB,EAEE,KAAKC,mBAAL,CAAyB5C,IAAzB,CAA8B,IAA9B,CAFF;IAID;;IACD,IAAI,CAACT,QAAL,EAAe;MACb,MAAM,IAAIsD,KAAJ,CACJ,+DADI,CAAN;IAGD;;IACD,IAAInD,OAAO,CAACoD,YAAZ,EAA0B;MACxB,KAAKR,aAAL,GAAqB5C,OAAO,CAACoD,YAA7B;IACD;IAED;AACJ;AACA;AACA;;;IACI,KAAKC,SAAL,GAAiBxD,QAAjB;IAEA,KAAKwD,SAAL,CAAeC,OAAf,CAAuB,KAAKC,WAAL,CAAiBjD,IAAjB,CAAsB,IAAtB,CAAvB;IACA,KAAK+C,SAAL,CAAeP,gBAAf,CACE/F,mBAAmB,CAACyG,GADtB,EAEE,KAAKC,iBAAL,CAAuBnD,IAAvB,CAA4B,IAA5B,CAFF;IAIA,KAAK+C,SAAL,CAAeP,gBAAf,CACE/F,mBAAmB,CAAC2G,MADtB,EAEE,KAAKC,oBAAL,CAA0BrD,IAA1B,CAA+B,IAA/B,CAFF;IAKA;AACJ;AACA;AACA;;IACI,KAAKsD,iBAAL,GAAyB,IAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,CAAC,CAAD,EAAI,CAAJ,CAAd;IAEA;AACJ;AACA;;IACI,KAAKC,cAAL,GACE9D,OAAO,CAAC+D,aAAR,KAA0BzC,SAA1B,GACI,CAAC,KAAKsB,aADV,GAEI5C,OAAO,CAAC+D,aAHd;EAID;EAED;AACF;AACA;AACA;;;EACER,WAAW,CAACS,OAAD,EAAU;IACnB,MAAMC,QAAQ,GAAGD,OAAO,CAACE,WAAR,EAAjB;;IACA,IAAID,QAAJ,EAAc;MACZ,MAAME,MAAM,GAAG,KAAKjC,gBAAL,CAAsB+B,QAAQ,CAACG,OAAT,EAAtB,CAAf;;MACA,IAAID,MAAJ,EAAY;QACVA,MAAM,CAACH,OAAD,EAAUC,QAAV,CAAN;MACD;IACF;;IACD,MAAMI,GAAG,GAAG,KAAKC,MAAL,EAAZ;;IACA,IAAID,GAAG,IAAIA,GAAG,CAACE,UAAJ,EAAP,IAA2B,KAAKC,SAAL,EAA/B,EAAiD;MAC/C,KAAKC,qBAAL,CAA2B,KAAKzD,UAAhC,EAA4CqD,GAA5C;IACD;;IACDL,OAAO,CAAClB,gBAAR,CAAyB7F,SAAS,CAACyH,MAAnC,EAA2C,KAAKtE,yBAAhD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEuE,mBAAmB,CAACC,GAAD,EAAMC,QAAN,EAAgB;IACjC,IAAI,CAAC,KAAK3D,sBAAV,EAAkC;MAChC,KAAKA,sBAAL,GAA8B,IAAIpE,UAAJ,EAA9B;MACA,MAAM+C,QAAQ,GAAG,KAAKqB,sBAAL,CAA4B4D,QAA5B,EAAjB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGH,QAAQ,CAACI,MAA9B,EAAsCF,CAAC,GAAGC,EAA1C,EAA8C,EAAED,CAAhD,EAAmD;QACjD,MAAMG,OAAO,GAAGL,QAAQ,CAACE,CAAD,CAAxB;;QACA,KAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,OAAO,CAACD,MAA7B,EAAqCE,CAAC,GAAGC,EAAzC,EAA6C,EAAED,CAA/C,EAAkD;UAChD,MAAMnB,OAAO,GAAGkB,OAAO,CAACC,CAAD,CAAP,CAAWnB,OAA3B;;UACA,IAAIA,OAAO,IAAI,CAACnE,QAAQ,CAACwF,QAAT,CAAkBrB,OAAlB,CAAhB,EAA4C;YAC1C,KAAK9C,sBAAL,CAA4BoE,IAA5B,CAAiCtB,OAAjC;UACD;QACF;MACF;;MACD,IAAI,KAAK9C,sBAAL,CAA4BqE,SAA5B,OAA4C,CAAhD,EAAmD;QACjD,KAAKrE,sBAAL,GAA8B,IAA9B;MACD,CAFD,MAEO;QACL,KAAKsE,aAAL,CACE,IAAI9F,WAAJ,CACEH,eAAe,CAACC,WADlB,EAEE,KAAK0B,sBAFP,EAGE0D,GAHF,CADF;MAOD;IACF;EACF;EAED;AACF;AACA;AACA;;;EACEa,cAAc,CAACzB,OAAD,EAAU;IACtB,KAAK0B,yBAAL,CAA+B1B,OAA/B,EADsB,CAEtB;;IACA,IAAI,KAAKlD,cAAL,IAAuB,KAAKuC,SAAL,CAAekC,SAAf,OAA+B,CAA1D,EAA6D;MAC3D,KAAK7D,QAAL,CAAciE,SAAd,GAA0BC,aAA1B,CAAwC,KAAK9E,cAA7C;MACA,KAAKA,cAAL,GAAsB,IAAtB;IACD;;IACDkD,OAAO,CAAC6B,mBAAR,CACE5I,SAAS,CAACyH,MADZ,EAEE,KAAKtE,yBAFP;EAID;EAED;AACF;AACA;AACA;;;EACEsF,yBAAyB,CAAC1B,OAAD,EAAU;IACjC,MAAM8B,KAAK,GAAG,KAAK3E,MAAnB;IACA;;IACA,MAAM4E,aAAa,GAAG,EAAtB;IACAD,KAAK,CAACxC,OAAN;IACE;AACN;AACA;IACM,UAAU0C,IAAV,EAAgB;MACd,IAAIhC,OAAO,KAAKgC,IAAI,CAAChC,OAArB,EAA8B;QAC5B+B,aAAa,CAACT,IAAd,CAAmBU,IAAnB;MACD;IACF,CARH;;IAUA,KAAK,IAAIjB,CAAC,GAAGgB,aAAa,CAACd,MAAd,GAAuB,CAApC,EAAuCF,CAAC,IAAI,CAA5C,EAA+C,EAAEA,CAAjD,EAAoD;MAClD,MAAMkB,YAAY,GAAGF,aAAa,CAAChB,CAAD,CAAlC;;MACA,KAAK,IAAImB,CAAC,GAAG,KAAKzE,aAAL,CAAmBwD,MAAnB,GAA4B,CAAzC,EAA4CiB,CAAC,IAAI,CAAjD,EAAoD,EAAEA,CAAtD,EAAyD;QACvD,IAAI,KAAKzE,aAAL,CAAmByE,CAAnB,EAAsB,CAAtB,MAA6BD,YAAjC,EAA+C;UAC7C,KAAKxE,aAAL,CAAmB0E,MAAnB,CAA0BD,CAA1B,EAA6B,CAA7B;QACD;MACF;;MACDJ,KAAK,CAACM,MAAN,CAAaH,YAAb;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEI,SAAS,CAACC,MAAD,EAAS;IAChB,IAAI,KAAKxF,cAAL,IAAuB,CAACwF,MAA5B,EAAoC;MAClC,KAAK5E,QAAL,CAAciE,SAAd,GAA0BC,aAA1B,CAAwC,KAAK9E,cAA7C;MACA,KAAKA,cAAL,GAAsB,IAAtB;IACD;;IACD,MAAMuF,SAAN,CAAgBC,MAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,MAAM,CAAClC,GAAD,EAAM;IACV,KAAK3C,QAAL,CAAc6E,MAAd,CAAqBlC,GAArB;IACA,MAAMkC,MAAN,CAAalC,GAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEmC,UAAU,GAAG;IACX,OAAO,KAAK9E,QAAZ;EACD;EAED;AACF;AACA;AACA;;;EACEsB,gBAAgB,CAACyD,KAAD,EAAQ;IACtB,IAAIA,KAAK,CAACzC,OAAV,EAAmB;MACjB,KAAKX,SAAL,CAAeiC,IAAf,CAAoBmB,KAAK,CAACzC,OAA1B;IACD;EACF;EAED;AACF;AACA;AACA;;;EACEd,mBAAmB,CAACuD,KAAD,EAAQ;IACzB,IAAIA,KAAK,CAACzC,OAAV,EAAmB;MACjB,KAAKX,SAAL,CAAe+C,MAAf,CAAsBK,KAAK,CAACzC,OAA5B;IACD;EACF;EAED;AACF;AACA;AACA;;;EACEP,iBAAiB,CAACmB,GAAD,EAAM;IACrB,KAAKrB,WAAL,CAAiBqB,GAAG,CAAC8B,OAArB;EACD;EAED;AACF;AACA;AACA;;;EACErG,oBAAoB,CAACuE,GAAD,EAAM;IACxB,IAAI,CAAC,KAAKpD,gBAAV,EAA4B;MAC1B,MAAMwC,OAAO;MAAG;MAAwBY,GAAG,CAAC+B,MAA5C;MACA,KAAKlB,cAAL,CAAoBzB,OAApB;MACA,KAAKT,WAAL,CAAiBS,OAAjB;IACD;EACF;EAED;AACF;AACA;AACA;;;EACEL,oBAAoB,CAACiB,GAAD,EAAM;IACxB,KAAKa,cAAL,CAAoBb,GAAG,CAAC8B,OAAxB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEvE,mBAAmB,CAAC6B,OAAD,EAAUC,QAAV,EAAoB;IACrC,MAAM2C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAApB;IAEA;;IACA,MAAMC,WAAW,GAAG;MAClB9C,OAAO,EAAEA,OADS;MAElBC,QAAQ,EAAEA,QAFQ;MAGlBiB,OAAO,EAAE,CAAC0B,WAAD,EAAcA,WAAd;IAHS,CAApB;IAMA,KAAKzF,MAAL,CAAY4F,MAAZ,CAAmB9C,QAAQ,CAAC+C,SAAT,EAAnB,EAAyCF,WAAzC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACExE,wBAAwB,CAAC0B,OAAD,EAAUC,QAAV,EAAoB;IAC1C,MAAMgD,MAAM,GAAGhD,QAAQ,CAAC4C,cAAT,EAAf;;IACA,KAAK,IAAI9B,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGiC,MAAM,CAAChC,MAA5B,EAAoCF,CAAC,GAAGC,EAAxC,EAA4C,EAAED,CAA9C,EAAiD;MAC/C,MAAM6B,WAAW,GAAGK,MAAM,CAAClC,CAAD,CAA1B;MAEA;;MACA,MAAM+B,WAAW,GAAG;QAClB9C,OAAO,EAAEA,OADS;QAElBC,QAAQ,EAAEA,QAFQ;QAGlBiD,KAAK,EAAE,CAACnC,CAAD,CAHW;QAIlBoC,KAAK,EAAEpC,CAJW;QAKlBG,OAAO,EAAE,CAAC0B,WAAD,EAAcA,WAAd;MALS,CAApB;MAQA,KAAKzF,MAAL,CAAY4F,MAAZ,CAAmB9C,QAAQ,CAAC+C,SAAT,EAAnB,EAAyCF,WAAzC;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACE1E,wBAAwB,CAAC4B,OAAD,EAAUC,QAAV,EAAoB;IAC1C,MAAM2C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAApB;;IACA,KAAK,IAAI9B,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG4B,WAAW,CAAC3B,MAAZ,GAAqB,CAA1C,EAA6CF,CAAC,GAAGC,EAAjD,EAAqD,EAAED,CAAvD,EAA0D;MACxD,MAAMG,OAAO,GAAG0B,WAAW,CAACQ,KAAZ,CAAkBrC,CAAlB,EAAqBA,CAAC,GAAG,CAAzB,CAAhB;MAEA;;MACA,MAAM+B,WAAW,GAAG;QAClB9C,OAAO,EAAEA,OADS;QAElBC,QAAQ,EAAEA,QAFQ;QAGlBkD,KAAK,EAAEpC,CAHW;QAIlBG,OAAO,EAAEA;MAJS,CAApB;MAOA,KAAK/D,MAAL,CAAY4F,MAAZ,CAAmBjJ,cAAc,CAACoH,OAAD,CAAjC,EAA4C4B,WAA5C;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEvE,6BAA6B,CAACyB,OAAD,EAAUC,QAAV,EAAoB;IAC/C,MAAMoD,KAAK,GAAGpD,QAAQ,CAAC4C,cAAT,EAAd;;IACA,KAAK,IAAIX,CAAC,GAAG,CAAR,EAAWoB,EAAE,GAAGD,KAAK,CAACpC,MAA3B,EAAmCiB,CAAC,GAAGoB,EAAvC,EAA2C,EAAEpB,CAA7C,EAAgD;MAC9C,MAAMU,WAAW,GAAGS,KAAK,CAACnB,CAAD,CAAzB;;MACA,KAAK,IAAInB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG4B,WAAW,CAAC3B,MAAZ,GAAqB,CAA1C,EAA6CF,CAAC,GAAGC,EAAjD,EAAqD,EAAED,CAAvD,EAA0D;QACxD,MAAMG,OAAO,GAAG0B,WAAW,CAACQ,KAAZ,CAAkBrC,CAAlB,EAAqBA,CAAC,GAAG,CAAzB,CAAhB;QAEA;;QACA,MAAM+B,WAAW,GAAG;UAClB9C,OAAO,EAAEA,OADS;UAElBC,QAAQ,EAAEA,QAFQ;UAGlBiD,KAAK,EAAE,CAAChB,CAAD,CAHW;UAIlBiB,KAAK,EAAEpC,CAJW;UAKlBG,OAAO,EAAEA;QALS,CAApB;QAQA,KAAK/D,MAAL,CAAY4F,MAAZ,CAAmBjJ,cAAc,CAACoH,OAAD,CAAjC,EAA4C4B,WAA5C;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEzE,qBAAqB,CAAC2B,OAAD,EAAUC,QAAV,EAAoB;IACvC,MAAMsD,KAAK,GAAGtD,QAAQ,CAAC4C,cAAT,EAAd;;IACA,KAAK,IAAIX,CAAC,GAAG,CAAR,EAAWoB,EAAE,GAAGC,KAAK,CAACtC,MAA3B,EAAmCiB,CAAC,GAAGoB,EAAvC,EAA2C,EAAEpB,CAA7C,EAAgD;MAC9C,MAAMU,WAAW,GAAGW,KAAK,CAACrB,CAAD,CAAzB;;MACA,KAAK,IAAInB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG4B,WAAW,CAAC3B,MAAZ,GAAqB,CAA1C,EAA6CF,CAAC,GAAGC,EAAjD,EAAqD,EAAED,CAAvD,EAA0D;QACxD,MAAMG,OAAO,GAAG0B,WAAW,CAACQ,KAAZ,CAAkBrC,CAAlB,EAAqBA,CAAC,GAAG,CAAzB,CAAhB;QAEA;;QACA,MAAM+B,WAAW,GAAG;UAClB9C,OAAO,EAAEA,OADS;UAElBC,QAAQ,EAAEA,QAFQ;UAGlBiD,KAAK,EAAE,CAAChB,CAAD,CAHW;UAIlBiB,KAAK,EAAEpC,CAJW;UAKlBG,OAAO,EAAEA;QALS,CAApB;QAQA,KAAK/D,MAAL,CAAY4F,MAAZ,CAAmBjJ,cAAc,CAACoH,OAAD,CAAjC,EAA4C4B,WAA5C;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEtE,0BAA0B,CAACwB,OAAD,EAAUC,QAAV,EAAoB;IAC5C,MAAMuD,QAAQ,GAAGvD,QAAQ,CAAC4C,cAAT,EAAjB;;IACA,KAAK,IAAIY,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,QAAQ,CAACvC,MAA9B,EAAsCwC,CAAC,GAAGC,EAA1C,EAA8C,EAAED,CAAhD,EAAmD;MACjD,MAAMF,KAAK,GAAGC,QAAQ,CAACC,CAAD,CAAtB;;MACA,KAAK,IAAIvB,CAAC,GAAG,CAAR,EAAWoB,EAAE,GAAGC,KAAK,CAACtC,MAA3B,EAAmCiB,CAAC,GAAGoB,EAAvC,EAA2C,EAAEpB,CAA7C,EAAgD;QAC9C,MAAMU,WAAW,GAAGW,KAAK,CAACrB,CAAD,CAAzB;;QACA,KAAK,IAAInB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG4B,WAAW,CAAC3B,MAAZ,GAAqB,CAA1C,EAA6CF,CAAC,GAAGC,EAAjD,EAAqD,EAAED,CAAvD,EAA0D;UACxD,MAAMG,OAAO,GAAG0B,WAAW,CAACQ,KAAZ,CAAkBrC,CAAlB,EAAqBA,CAAC,GAAG,CAAzB,CAAhB;UAEA;;UACA,MAAM+B,WAAW,GAAG;YAClB9C,OAAO,EAAEA,OADS;YAElBC,QAAQ,EAAEA,QAFQ;YAGlBiD,KAAK,EAAE,CAAChB,CAAD,EAAIuB,CAAJ,CAHW;YAIlBN,KAAK,EAAEpC,CAJW;YAKlBG,OAAO,EAAEA;UALS,CAApB;UAQA,KAAK/D,MAAL,CAAY4F,MAAZ,CAAmBjJ,cAAc,CAACoH,OAAD,CAAjC,EAA4C4B,WAA5C;QACD;MACF;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACErE,oBAAoB,CAACuB,OAAD,EAAUC,QAAV,EAAoB;IACtC,MAAM2C,WAAW,GAAG3C,QAAQ,CAAC0D,SAAT,EAApB;IAEA;;IACA,MAAMC,iBAAiB,GAAG;MACxB5D,OAAO,EAAEA,OADe;MAExBC,QAAQ,EAAEA,QAFc;MAGxBkD,KAAK,EAAEhI,mBAHiB;MAIxB+F,OAAO,EAAE,CAAC0B,WAAD,EAAcA,WAAd;IAJe,CAA1B;IAOA;;IACA,MAAMiB,wBAAwB,GAAG;MAC/B7D,OAAO,EAAEA,OADsB;MAE/BC,QAAQ,EAAEA,QAFqB;MAG/BkD,KAAK,EAAE/H,0BAHwB;MAI/B8F,OAAO,EAAE,CAAC0B,WAAD,EAAcA,WAAd;IAJsB,CAAjC;IAOA,MAAMkB,eAAe,GAAG,CAACF,iBAAD,EAAoBC,wBAApB,CAAxB;IACAD,iBAAiB,CAACE,eAAlB,GAAoCA,eAApC;IACAD,wBAAwB,CAACC,eAAzB,GAA2CA,eAA3C;IACA,KAAK3G,MAAL,CAAY4F,MAAZ,CAAmB7I,YAAY,CAAC0I,WAAD,CAA/B,EAA8CgB,iBAA9C;IACA,IAAIG,cAAc;IAAG;IACnB9D,QADF;IAGA,MAAM+D,cAAc,GAAGjJ,iBAAiB,EAAxC;;IACA,IAAIiJ,cAAc,IAAI,KAAK1D,MAAL,EAAtB,EAAqC;MACnC,MAAM2D,UAAU,GAAG,KAAK3D,MAAL,GAAc4D,OAAd,GAAwBC,aAAxB,EAAnB;MACAJ,cAAc,GAAGA,cAAc,CAC5BK,KADc,GAEdC,SAFc,CAEJL,cAFI,EAEYC,UAFZ,CAAjB;MAGAF,cAAc,GAAGnJ,UAAU;MACzB;MAAoDmJ,cAD3B,CAAV,CAEfM,SAFe,CAELJ,UAFK,EAEOD,cAFP,CAAjB;IAGD;;IACD,KAAK7G,MAAL,CAAY4F,MAAZ,CAAmBgB,cAAc,CAACf,SAAf,EAAnB,EAA+Ca,wBAA/C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEnF,gCAAgC,CAACsB,OAAD,EAAUC,QAAV,EAAoB;IAClD,MAAMqE,UAAU,GAAGrE,QAAQ,CAACsE,kBAAT,EAAnB;;IACA,KAAK,IAAIxD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,UAAU,CAACrD,MAA/B,EAAuC,EAAEF,CAAzC,EAA4C;MAC1C,MAAMd,QAAQ,GAAGqE,UAAU,CAACvD,CAAD,CAA3B;MACA,MAAMZ,MAAM,GAAG,KAAKjC,gBAAL,CAAsB+B,QAAQ,CAACG,OAAT,EAAtB,CAAf;MACAD,MAAM,CAACH,OAAD,EAAUC,QAAV,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEuE,4BAA4B,CAAC5B,WAAD,EAAc/G,QAAd,EAAwByI,UAAxB,EAAoC;IAC9D,IAAIG,aAAa,GAAG,KAAK3H,cAAzB;;IACA,IAAI,CAAC2H,aAAL,EAAoB;MAClBA,aAAa,GAAG,IAAIvL,OAAJ,CAAY,IAAIE,KAAJ,CAAUwJ,WAAV,CAAZ,CAAhB;MACA,KAAK9F,cAAL,GAAsB2H,aAAtB;MACA,KAAK/G,QAAL,CAAciE,SAAd,GAA0B+C,UAA1B,CAAqCD,aAArC;IACD,CAJD,MAIO;MACL,MAAMxE,QAAQ,GAAGwE,aAAa,CAACvE,WAAd,EAAjB;MACAD,QAAQ,CAAC0E,cAAT,CAAwB/B,WAAxB;IACD;;IACD6B,aAAa,CAACG,GAAd,CAAkB,UAAlB,EAA8B/I,QAA9B;IACA4I,aAAa,CAACG,GAAd,CAAkB,YAAlB,EAAgCN,UAAhC;IACA,OAAOG,aAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEI,WAAW,CAAC/I,eAAD,EAAkB;IAC3B,IAAI,CAACA,eAAe,CAACgJ,aAArB,EAAoC;MAClC,OAAO,IAAP;IACD;;IACD,KAAKlF,iBAAL,GAAyB9D,eAAzB;IAEA,IAAIiJ,OAAJ;;IACA,IACE,CAACjJ,eAAe,CAACuE,GAAhB,CAAoB6D,OAApB,GAA8Bc,cAA9B,EAAD,IACAlJ,eAAe,CAACF,IAAhB,IAAwBzC,mBAAmB,CAAC8L,WAD5C,IAEA,CAAC,KAAKC,sBAHR,EAIE;MACA,KAAKC,kBAAL,CAAwBrJ,eAAxB;IACD;;IACD,IAAI,KAAKgB,cAAL,IAAuB,KAAKJ,gBAAL,CAAsBZ,eAAtB,CAA3B,EAAmE;MACjE,IACEA,eAAe,CAACF,IAAhB,IAAwBzC,mBAAmB,CAACiM,WAA5C,IACA,CAAC,KAAKnI,sBAFR,EAGE;QACA8H,OAAO,GAAG,KAAKM,WAAL,EAAV;MACD,CALD,MAKO;QACLN,OAAO,GAAG,IAAV;MACD;IACF;;IAED,IAAIjJ,eAAe,CAACF,IAAhB,IAAwBzC,mBAAmB,CAACiM,WAAhD,EAA6D;MAC3D,KAAKnI,sBAAL,GAA8B,KAA9B;IACD;;IAED,OAAO,MAAM4H,WAAN,CAAkB/I,eAAlB,KAAsC,CAACiJ,OAA9C;EACD;EAED;AACF;AACA;AACA;;;EACEO,eAAe,CAAC1E,GAAD,EAAM;IACnB,KAAK3D,sBAAL,GAA8B,KAA9B;IACA,KAAK0D,mBAAL,CAAyBC,GAAzB,EAA8B,KAAKnD,aAAnC;IAEA,MAAM8H,MAAM,GAAG,CACb3E,GAAG,CAAC4E,UAAJ,CAAe,CAAf,IAAoB,KAAK3F,MAAL,CAAY,CAAZ,CADP,EAEbe,GAAG,CAAC4E,UAAJ,CAAe,CAAf,IAAoB,KAAK3F,MAAL,CAAY,CAAZ,CAFP,CAAf;IAIA,MAAMhE,QAAQ,GAAG,EAAjB;IACA,MAAMyI,UAAU,GAAG,EAAnB;;IACA,KAAK,IAAIvD,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAKvD,aAAL,CAAmBwD,MAAxC,EAAgDF,CAAC,GAAGC,EAApD,EAAwD,EAAED,CAA1D,EAA6D;MAC3D,MAAM0E,WAAW,GAAG,KAAKhI,aAAL,CAAmBsD,CAAnB,CAApB;MACA,MAAM+B,WAAW,GAAG2C,WAAW,CAAC,CAAD,CAA/B;MACA,MAAMzF,OAAO,GAAG8C,WAAW,CAAC9C,OAA5B;;MACA,IAAI,CAACnE,QAAQ,CAACwF,QAAT,CAAkBrB,OAAlB,CAAL,EAAiC;QAC/BnE,QAAQ,CAACyF,IAAT,CAActB,OAAd;MACD;;MACD,MAAMC,QAAQ,GAAG6C,WAAW,CAAC7C,QAA7B;;MACA,IAAI,CAACqE,UAAU,CAACjD,QAAX,CAAoBpB,QAApB,CAAL,EAAoC;QAClCqE,UAAU,CAAChD,IAAX,CAAgBrB,QAAhB;MACD;;MACD,MAAMiD,KAAK,GAAGJ,WAAW,CAACI,KAA1B;MACA,IAAIN,WAAJ;MACA,MAAM1B,OAAO,GAAG4B,WAAW,CAAC5B,OAA5B;MACA,MAAMiC,KAAK,GAAGsC,WAAW,CAAC,CAAD,CAAzB;;MAEA,OAAOF,MAAM,CAACtE,MAAP,GAAgBhB,QAAQ,CAACyF,SAAT,EAAvB,EAA6C;QAC3CH,MAAM,CAACjE,IAAP,CAAYJ,OAAO,CAACiC,KAAD,CAAP,CAAeoC,MAAM,CAACtE,MAAtB,CAAZ;MACD;;MAED,QAAQhB,QAAQ,CAACG,OAAT,EAAR;QACE,KAAK,OAAL;UACEwC,WAAW,GAAG2C,MAAd;UACArE,OAAO,CAAC,CAAD,CAAP,GAAaqE,MAAb;UACArE,OAAO,CAAC,CAAD,CAAP,GAAaqE,MAAb;UACA;;QACF,KAAK,YAAL;UACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;UACAD,WAAW,CAACE,WAAW,CAACK,KAAb,CAAX,GAAiCoC,MAAjC;UACArE,OAAO,CAAC,CAAD,CAAP,GAAaqE,MAAb;UACArE,OAAO,CAAC,CAAD,CAAP,GAAaqE,MAAb;UACA;;QACF,KAAK,YAAL;UACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;UACAD,WAAW,CAACE,WAAW,CAACK,KAAZ,GAAoBA,KAArB,CAAX,GAAyCoC,MAAzC;UACArE,OAAO,CAACiC,KAAD,CAAP,GAAiBoC,MAAjB;UACA;;QACF,KAAK,iBAAL;UACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;UACAD,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBJ,WAAW,CAACK,KAAZ,GAAoBA,KAA1C,IAAmDoC,MAAnD;UACArE,OAAO,CAACiC,KAAD,CAAP,GAAiBoC,MAAjB;UACA;;QACF,KAAK,SAAL;UACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;UACAD,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBJ,WAAW,CAACK,KAAZ,GAAoBA,KAA1C,IAAmDoC,MAAnD;UACArE,OAAO,CAACiC,KAAD,CAAP,GAAiBoC,MAAjB;UACA;;QACF,KAAK,cAAL;UACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;UACAD,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCJ,WAAW,CAACK,KAAZ,GAAoBA,KAApD,IAA6DoC,MAA7D;UACArE,OAAO,CAACiC,KAAD,CAAP,GAAiBoC,MAAjB;UACA;;QACF,KAAK,QAAL;UACErE,OAAO,CAAC,CAAD,CAAP,GAAaqE,MAAb;UACArE,OAAO,CAAC,CAAD,CAAP,GAAaqE,MAAb;;UACA,IAAIzC,WAAW,CAACK,KAAZ,KAAsBhI,mBAA1B,EAA+C;YAC7C,KAAKqC,gBAAL,GAAwB,IAAxB;YACAyC,QAAQ,CAAC0F,SAAT,CAAmBJ,MAAnB;YACA,KAAK/H,gBAAL,GAAwB,KAAxB;UACD,CAJD,MAIO;YACL;YACA,KAAKA,gBAAL,GAAwB,IAAxB;YACA,MAAMyG,UAAU,GAAGrD,GAAG,CAACP,GAAJ,CAAQ6D,OAAR,GAAkBC,aAAlB,EAAnB;YACA,IAAIyB,MAAM,GAAGvL,kBAAkB,CAC7BQ,kBAAkB,CAACoF,QAAQ,CAAC0D,SAAT,EAAD,EAAuBM,UAAvB,CADW,EAE7BpJ,kBAAkB,CAAC0K,MAAD,EAAStB,UAAT,CAFW,CAA/B;YAIA,MAAMD,cAAc,GAAGjJ,iBAAiB,EAAxC;;YACA,IAAIiJ,cAAJ,EAAoB;cAClB,MAAMD,cAAc,GAAG9D,QAAQ,CAC5BmE,KADoB,GAEpBC,SAFoB,CAEVL,cAFU,EAEMC,UAFN,CAAvB;cAGAF,cAAc,CAAC8B,SAAf,CAAyBD,MAAzB;cACAA,MAAM,GAAG7B,cAAc,CACpBM,SADM,CACIJ,UADJ,EACgBD,cADhB,EAEN8B,SAFM,EAAT;YAGD;;YACD7F,QAAQ,CAAC4F,SAAT,CAAmBD,MAAnB;YACA,KAAKpI,gBAAL,GAAwB,KAAxB;UACD;;UACD;;QACF,QA7DF,CA8DE;;MA9DF;;MAiEA,IAAIoF,WAAJ,EAAiB;QACf,KAAKmD,uBAAL,CAA6B9F,QAA7B,EAAuC2C,WAAvC;MACD;IACF;;IACD,KAAK4B,4BAAL,CAAkCe,MAAlC,EAA0C1J,QAA1C,EAAoDyI,UAApD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE0B,eAAe,CAACpF,GAAD,EAAM;IACnB,IAAI,CAAC,KAAKrE,UAAL,CAAgBqE,GAAhB,CAAL,EAA2B;MACzB,OAAO,KAAP;IACD;;IACD,MAAMqF,eAAe,GAAGrF,GAAG,CAAC4E,UAA5B;IACA,KAAK/E,qBAAL,CAA2BG,GAAG,CAACsF,KAA/B,EAAsCtF,GAAG,CAACP,GAA1C,EAA+C4F,eAA/C;IACA,KAAKxI,aAAL,CAAmBwD,MAAnB,GAA4B,CAA5B;IACA,KAAK/D,sBAAL,GAA8B,IAA9B;IACA,MAAMuH,aAAa,GAAG,KAAK3H,cAA3B;;IACA,IAAI2H,aAAJ,EAAmB;MACjB,MAAMR,UAAU,GAAGrD,GAAG,CAACP,GAAJ,CAAQ6D,OAAR,GAAkBC,aAAlB,EAAnB;MACA,MAAMgC,cAAc,GAAG,EAAvB;MACA,MAAMZ,MAAM,GAAGd,aAAa,CAACvE,WAAd,GAA4B2C,cAA5B,EAAf;MACA,MAAMuD,YAAY,GAAGtM,cAAc,CAAC,CAACyL,MAAD,CAAD,CAAnC;MACA,MAAMc,kBAAkB,GAAG,KAAKlJ,MAAL,CAAYmJ,WAAZ,CAAwBF,YAAxB,CAA3B;MACA,MAAMG,iBAAiB,GAAG,EAA1B;MACAF,kBAAkB,CAACG,IAAnB,CAAwBC,cAAxB;;MACA,KAAK,IAAI1F,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGqF,kBAAkB,CAACpF,MAAxC,EAAgDF,CAAC,GAAGC,EAApD,EAAwD,EAAED,CAA1D,EAA6D;QAC3D,MAAM2F,gBAAgB,GAAGL,kBAAkB,CAACtF,CAAD,CAA3C;QACA,MAAMG,OAAO,GAAGwF,gBAAgB,CAACxF,OAAjC;QACA,IAAIyF,GAAG,GAAGzL,MAAM,CAACwL,gBAAgB,CAACzG,QAAlB,CAAhB;QACA,MAAMiD,KAAK,GAAGwD,gBAAgB,CAACxD,KAA/B;;QACA,IAAIA,KAAJ,EAAW;UACTyD,GAAG,IAAI,MAAMzD,KAAK,CAAC0D,IAAN,CAAW,GAAX,CAAb,CADS,CACqB;QAC/B;;QACD,IAAI,CAACL,iBAAiB,CAACI,GAAD,CAAtB,EAA6B;UAC3BJ,iBAAiB,CAACI,GAAD,CAAjB,GAAyB,IAAIE,KAAJ,CAAU,CAAV,CAAzB;QACD;;QAED,IACEH,gBAAgB,CAACzG,QAAjB,CAA0BG,OAA1B,OAAwC,QAAxC,IACAsG,gBAAgB,CAACvD,KAAjB,KAA2B/H,0BAF7B,EAGE;UACA,MAAM0L,aAAa,GAAGC,oBAAoB,CACxCd,eADwC,EAExCS,gBAFwC,EAGxCzC,UAHwC,CAA1C;;UAKA,IACE1J,gBAAgB,CAACuM,aAAD,EAAgBvB,MAAhB,CAAhB,IACA,CAACgB,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,CAFH,EAGE;YACA,KAAKlJ,aAAL,CAAmB6D,IAAnB,CAAwB,CAACoF,gBAAD,EAAmB,CAAnB,CAAxB;YACAH,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,IAA4BD,gBAA5B;UACD;;UACD;QACD;;QAED,IACEnM,gBAAgB,CAAC2G,OAAO,CAAC,CAAD,CAAR,EAAaqE,MAAb,CAAhB,IACA,CAACgB,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,CAFH,EAGE;UACA,KAAKlJ,aAAL,CAAmB6D,IAAnB,CAAwB,CAACoF,gBAAD,EAAmB,CAAnB,CAAxB;UACAH,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,IAA4BD,gBAA5B;UACA;QACD;;QAED,IACEnM,gBAAgB,CAAC2G,OAAO,CAAC,CAAD,CAAR,EAAaqE,MAAb,CAAhB,IACA,CAACgB,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,CAFH,EAGE;UACA,IACEJ,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,KACAJ,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,EAA0BxD,KAA1B,KAAoC,CAFtC,EAGE;YACA,IAAIP,WAAW,GAAG8D,gBAAgB,CAACzG,QAAjB,CAA0B4C,cAA1B,EAAlB;;YACA,QAAQ6D,gBAAgB,CAACzG,QAAjB,CAA0BG,OAA1B,EAAR;cACE;cACA,KAAK,YAAL;cACA,KAAK,iBAAL;gBACE;cACF;cACA;;cACA,KAAK,cAAL;gBACEwC,WAAW,GAAGA,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAzB;;cACF;;cACA,KAAK,SAAL;gBACE,IACEwD,gBAAgB,CAACvD,KAAjB,KACAP,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBjC,MAAtB,GAA+B,CAFjC,EAGE;kBACA;gBACD;;gBACD;;cACF,QAlBF,CAmBE;;YAnBF;UAqBD;;UAED,KAAKxD,aAAL,CAAmB6D,IAAnB,CAAwB,CAACoF,gBAAD,EAAmB,CAAnB,CAAxB;UACAH,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,IAA4BD,gBAA5B;UACA;QACD;;QAED,IACExL,MAAM,CAACgG,OAAD,CAAN,IAAmB,KAAKnE,eAAxB,IACA,CAACwJ,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,CADD,IAEA,CAACJ,iBAAiB,CAACI,GAAD,CAAjB,CAAuB,CAAvB,CAFD,IAGA,KAAK/J,sBAAL,CAA4BgE,GAA5B,CAJF,EAKE;UACAuF,cAAc,CAAC7E,IAAf,CAAoBoF,gBAApB;QACD;MACF;;MAED,IAAIP,cAAc,CAAClF,MAAnB,EAA2B;QACzB,KAAKN,mBAAL,CAAyBC,GAAzB,EAA8B,CAACuF,cAAD,CAA9B;MACD;;MAED,KAAK,IAAIjE,CAAC,GAAGiE,cAAc,CAAClF,MAAf,GAAwB,CAArC,EAAwCiB,CAAC,IAAI,CAA7C,EAAgD,EAAEA,CAAlD,EAAqD;QACnD,KAAK8E,aAAL,CAAmBb,cAAc,CAACjE,CAAD,CAAjC,EAAsCqD,MAAtC;MACD;IACF;;IACD,OAAO,CAAC,CAAC,KAAKzI,cAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEmK,aAAa,CAACrG,GAAD,EAAM;IACjB,KAAK,IAAIG,CAAC,GAAG,KAAKtD,aAAL,CAAmBwD,MAAnB,GAA4B,CAAzC,EAA4CF,CAAC,IAAI,CAAjD,EAAoD,EAAEA,CAAtD,EAAyD;MACvD,MAAM+B,WAAW,GAAG,KAAKrF,aAAL,CAAmBsD,CAAnB,EAAsB,CAAtB,CAApB;MACA,MAAMd,QAAQ,GAAG6C,WAAW,CAAC7C,QAA7B;;MACA,IAAIA,QAAQ,CAACG,OAAT,OAAuB,QAA3B,EAAqC;QACnC;QACA,MAAMwC,WAAW,GAAG3C,QAAQ,CAAC0D,SAAT,EAApB;QACA,MAAMC,iBAAiB,GAAGd,WAAW,CAACgB,eAAZ,CAA4B,CAA5B,CAA1B;QACA,MAAMD,wBAAwB,GAAGf,WAAW,CAACgB,eAAZ,CAA4B,CAA5B,CAAjC;QACAF,iBAAiB,CAAC1C,OAAlB,CAA0B,CAA1B,IAA+B0B,WAA/B;QACAgB,iBAAiB,CAAC1C,OAAlB,CAA0B,CAA1B,IAA+B0B,WAA/B;QACAiB,wBAAwB,CAAC3C,OAAzB,CAAiC,CAAjC,IAAsC0B,WAAtC;QACAiB,wBAAwB,CAAC3C,OAAzB,CAAiC,CAAjC,IAAsC0B,WAAtC;QACA,KAAKzF,MAAL,CAAY+J,MAAZ,CAAmBhN,YAAY,CAAC0I,WAAD,CAA/B,EAA8CgB,iBAA9C;QACA,IAAIG,cAAc,GAAG9D,QAArB;QACA,MAAM+D,cAAc,GAAGjJ,iBAAiB,EAAxC;;QACA,IAAIiJ,cAAJ,EAAoB;UAClB,MAAMC,UAAU,GAAGrD,GAAG,CAACP,GAAJ,CAAQ6D,OAAR,GAAkBC,aAAlB,EAAnB;UACAJ,cAAc,GAAGA,cAAc,CAC5BK,KADc,GAEdC,SAFc,CAEJL,cAFI,EAEYC,UAFZ,CAAjB;UAGAF,cAAc,GAAGnJ,UAAU,CAACmJ,cAAD,CAAV,CAA2BM,SAA3B,CACfJ,UADe,EAEfD,cAFe,CAAjB;QAID;;QACD,KAAK7G,MAAL,CAAY+J,MAAZ,CACEnD,cAAc,CAACf,SAAf,EADF,EAEEa,wBAFF;MAID,CA1BD,MA0BO;QACL,KAAK1G,MAAL,CAAY+J,MAAZ,CAAmBpN,cAAc,CAACgJ,WAAW,CAAC5B,OAAb,CAAjC,EAAwD4B,WAAxD;MACD;IACF;;IACD,IAAI,KAAK5F,sBAAT,EAAiC;MAC/B,KAAKsE,aAAL,CACE,IAAI9F,WAAJ,CACEH,eAAe,CAACE,SADlB,EAEE,KAAKyB,sBAFP,EAGE0D,GAHF,CADF;MAOA,KAAK1D,sBAAL,GAA8B,IAA9B;IACD;;IACD,OAAO,KAAP;EACD;EAED;AACF;AACA;AACA;;;EACEiI,kBAAkB,CAACvE,GAAD,EAAM;IACtB,KAAK5D,UAAL,GAAkB4D,GAAG,CAACsF,KAAtB;IACA,KAAKzF,qBAAL,CAA2BG,GAAG,CAACsF,KAA/B,EAAsCtF,GAAG,CAACP,GAA1C,EAA+CO,GAAG,CAAC4E,UAAnD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE/E,qBAAqB,CAACyF,KAAD,EAAQ7F,GAAR,EAAamF,UAAb,EAAyB;IAC5C,MAAMS,eAAe,GAAGT,UAAU,IAAInF,GAAG,CAAC8G,sBAAJ,CAA2BjB,KAA3B,CAAtC;IACA,MAAMjC,UAAU,GAAG5D,GAAG,CAAC6D,OAAJ,GAAcC,aAAd,EAAnB;;IACA,MAAMiD,cAAc,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;MACrC,OACEC,qCAAqC,CAACtB,eAAD,EAAkBoB,CAAlB,EAAqBpD,UAArB,CAArC,GACAsD,qCAAqC,CAACtB,eAAD,EAAkBqB,CAAlB,EAAqBrD,UAArB,CAFvC;IAID,CALD;IAOA;;;IACA,IAAIuD,KAAJ;IACA,IAAIC,gBAAJ;;IACA,IAAI,KAAK7I,aAAT,EAAwB;MACtB,MAAM8I,WAAW,GACf,OAAO,KAAK9I,aAAZ,KAA8B,QAA9B,GACK+I,KAAD,IAAWA,KAAK,KAAK,KAAK/I,aAD9B,GAEItB,SAHN;MAIA+C,GAAG,CAACuH,qBAAJ,CACE1B,KADF,EAEE,CAAClG,OAAD,EAAU2H,KAAV,EAAiB1H,QAAjB,KAA8B;QAC5BA,QAAQ,GACNA,QAAQ;QACR;QACED,OAAO,CAACE,WAAR,EAHJ;;QAKA,IACED,QAAQ,CAACG,OAAT,OAAuB,OAAvB,IACA,KAAKf,SAAL,CAAeyB,QAAf,GAA0BO,QAA1B,CAAmCrB,OAAnC,CAFF,EAGE;UACAyH,gBAAgB,GAAGxH,QAAnB;UACA,MAAMuF,UAAU,GAAGvF,QAAQ,CAAC4H,kBAAT,GAA8BzE,KAA9B,CAAoC,CAApC,EAAuC,CAAvC,CAAnB;UACAoE,KAAK,GAAG,CACN;YACExH,OADF;YAEEC,QAFF;YAGEiB,OAAO,EAAE,CAACsE,UAAD,EAAaA,UAAb;UAHX,CADM,CAAR;QAOD;;QACD,OAAO,IAAP;MACD,CAvBH,EAwBE;QAACkC;MAAD,CAxBF;IA0BD;;IACD,IAAI,CAACF,KAAL,EAAY;MACV,MAAMM,UAAU,GAAGhN,cAAc,CAC/BZ,YAAY,CAAC+L,eAAD,EAAkB5K,UAAlB,CADmB,EAE/B4I,UAF+B,CAAjC;MAIA,MAAMlK,MAAM,GAAGsG,GAAG,CAAC6D,OAAJ,GAAc6D,aAAd,KAAgC,KAAK3K,eAApD;MACA,MAAM4K,GAAG,GAAG/M,YAAY,CACtBjB,YAAY,CAAC8N,UAAD,EAAa/N,MAAb,EAAqBsB,UAArB,CADU,EAEtB4I,UAFsB,CAAxB;MAIAuD,KAAK,GAAG,KAAKrK,MAAL,CAAYmJ,WAAZ,CAAwB0B,GAAxB,CAAR;IACD;;IAED,IAAIR,KAAK,IAAIA,KAAK,CAACvG,MAAN,GAAe,CAA5B,EAA+B;MAC7B,MAAMe,IAAI,GAAGwF,KAAK,CAAChB,IAAN,CAAWY,cAAX,EAA2B,CAA3B,CAAb;MACA,MAAMa,cAAc,GAAGjG,IAAI,CAACd,OAA5B;MACA,IAAIqE,MAAM,GAAGwB,oBAAoB,CAACd,eAAD,EAAkBjE,IAAlB,EAAwBiC,UAAxB,CAAjC;MACA,MAAMiE,WAAW,GAAG7H,GAAG,CAAC8H,sBAAJ,CAA2B5C,MAA3B,CAApB;MACA,IAAI6C,IAAI,GAAG/N,kBAAkB,CAAC6L,KAAD,EAAQgC,WAAR,CAA7B;;MACA,IAAIT,gBAAgB,IAAIW,IAAI,IAAI,KAAKhL,eAArC,EAAsD;QACpD;QACA,MAAMiL,cAAc,GAAG,EAAvB;QACAA,cAAc,CAACnN,MAAM,CAAC+M,cAAD,CAAP,CAAd,GAAyC,IAAzC;;QAEA,IAAI,CAAC,KAAKnI,cAAV,EAA0B;UACxB,KAAKD,MAAL,CAAY,CAAZ,IAAiB0F,MAAM,CAAC,CAAD,CAAN,GAAYU,eAAe,CAAC,CAAD,CAA5C;UACA,KAAKpG,MAAL,CAAY,CAAZ,IAAiB0F,MAAM,CAAC,CAAD,CAAN,GAAYU,eAAe,CAAC,CAAD,CAA5C;QACD;;QACD,IACEjE,IAAI,CAAC/B,QAAL,CAAcG,OAAd,OAA4B,QAA5B,IACA4B,IAAI,CAACmB,KAAL,KAAe/H,0BAFjB,EAGE;UACA,KAAKmC,gBAAL,GAAwB,IAAxB;UACA,KAAKiH,4BAAL,CACEe,MADF,EAEE,CAACvD,IAAI,CAAChC,OAAN,CAFF,EAGE,CAACgC,IAAI,CAAC/B,QAAN,CAHF;QAKD,CAVD,MAUO;UACL,MAAMqI,MAAM,GAAGjI,GAAG,CAAC8H,sBAAJ,CAA2BF,cAAc,CAAC,CAAD,CAAzC,CAAf;UACA,MAAMM,MAAM,GAAGlI,GAAG,CAAC8H,sBAAJ,CAA2BF,cAAc,CAAC,CAAD,CAAzC,CAAf;UACA,MAAMO,YAAY,GAAG/N,yBAAyB,CAACyN,WAAD,EAAcI,MAAd,CAA9C;UACA,MAAMG,YAAY,GAAGhO,yBAAyB,CAACyN,WAAD,EAAcK,MAAd,CAA9C;UACAH,IAAI,GAAGM,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASJ,YAAT,EAAuBC,YAAvB,CAAV,CAAP;UACA,KAAKlL,gBAAL,GAAwB6K,IAAI,IAAI,KAAKhL,eAArC;;UACA,IAAI,KAAKG,gBAAT,EAA2B;YACzBgI,MAAM,GACJiD,YAAY,GAAGC,YAAf,GACIR,cAAc,CAAC,CAAD,CADlB,GAEIA,cAAc,CAAC,CAAD,CAHpB;UAID;;UACD,KAAKzD,4BAAL,CACEe,MADF,EAEE,CAACvD,IAAI,CAAChC,OAAN,CAFF,EAGE,CAACgC,IAAI,CAAC/B,QAAN,CAHF;UAKA,MAAMqE,UAAU,GAAG,EAAnB;UACAA,UAAU,CAACpJ,MAAM,CAAC8G,IAAI,CAAC/B,QAAN,CAAP,CAAV,GAAoC,IAApC;;UACA,KAAK,IAAIc,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGwG,KAAK,CAACvG,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2C,EAAED,CAA7C,EAAgD;YAC9C,MAAMG,OAAO,GAAGsG,KAAK,CAACzG,CAAD,CAAL,CAASG,OAAzB;;YACA,IACG3G,gBAAgB,CAAC0N,cAAc,CAAC,CAAD,CAAf,EAAoB/G,OAAO,CAAC,CAAD,CAA3B,CAAhB,IACC3G,gBAAgB,CAAC0N,cAAc,CAAC,CAAD,CAAf,EAAoB/G,OAAO,CAAC,CAAD,CAA3B,CADlB,IAEC3G,gBAAgB,CAAC0N,cAAc,CAAC,CAAD,CAAf,EAAoB/G,OAAO,CAAC,CAAD,CAA3B,CAAhB,IACC3G,gBAAgB,CAAC0N,cAAc,CAAC,CAAD,CAAf,EAAoB/G,OAAO,CAAC,CAAD,CAA3B,CAJpB,EAKE;cACA,MAAM2H,WAAW,GAAG3N,MAAM,CAACsM,KAAK,CAACzG,CAAD,CAAL,CAASd,QAAV,CAA1B;;cACA,IAAI,EAAE4I,WAAW,IAAIvE,UAAjB,CAAJ,EAAkC;gBAChCA,UAAU,CAACuE,WAAD,CAAV,GAA0B,IAA1B;gBACAR,cAAc,CAACnN,MAAM,CAACgG,OAAD,CAAP,CAAd,GAAkC,IAAlC;cACD;YACF,CAXD,MAWO;cACL;YACD;UACF;QACF;;QAED,KAAKnE,eAAL,GAAuBsL,cAAvB;QACA;MACD;IACF;;IACD,IAAI,KAAKvL,cAAT,EAAyB;MACvB,KAAKY,QAAL,CAAciE,SAAd,GAA0BC,aAA1B,CAAwC,KAAK9E,cAA7C;MACA,KAAKA,cAAL,GAAsB,IAAtB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEkK,aAAa,CAAClE,WAAD,EAAcyC,MAAd,EAAsB;IACjC,MAAMrE,OAAO,GAAG4B,WAAW,CAAC5B,OAA5B;IACA,MAAMlB,OAAO,GAAG8C,WAAW,CAAC9C,OAA5B;IACA,MAAMC,QAAQ,GAAG6C,WAAW,CAAC7C,QAA7B;IACA,MAAMiD,KAAK,GAAGJ,WAAW,CAACI,KAA1B;IACA,MAAMC,KAAK,GAAGL,WAAW,CAACK,KAA1B;IACA,IAAIP,WAAJ;;IAEA,OAAO2C,MAAM,CAACtE,MAAP,GAAgBhB,QAAQ,CAACyF,SAAT,EAAvB,EAA6C;MAC3CH,MAAM,CAACjE,IAAP,CAAY,CAAZ;IACD;;IAED,QAAQrB,QAAQ,CAACG,OAAT,EAAR;MACE,KAAK,iBAAL;QACEwC,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;QACAD,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBf,MAAtB,CAA6BgB,KAAK,GAAG,CAArC,EAAwC,CAAxC,EAA2CoC,MAA3C;QACA;;MACF,KAAK,SAAL;QACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;QACAD,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBf,MAAtB,CAA6BgB,KAAK,GAAG,CAArC,EAAwC,CAAxC,EAA2CoC,MAA3C;QACA;;MACF,KAAK,cAAL;QACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;QACAD,WAAW,CAACM,KAAK,CAAC,CAAD,CAAN,CAAX,CAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCf,MAAhC,CAAuCgB,KAAK,GAAG,CAA/C,EAAkD,CAAlD,EAAqDoC,MAArD;QACA;;MACF,KAAK,YAAL;QACE3C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;QACAD,WAAW,CAACT,MAAZ,CAAmBgB,KAAK,GAAG,CAA3B,EAA8B,CAA9B,EAAiCoC,MAAjC;QACA;;MACF;QACE;IAlBJ;;IAqBA,KAAKQ,uBAAL,CAA6B9F,QAA7B,EAAuC2C,WAAvC;IACA,MAAMkG,KAAK,GAAG,KAAK3L,MAAnB;IACA2L,KAAK,CAAC1G,MAAN,CAAaU,WAAb;IACA,KAAKiG,qBAAL,CAA2B9I,QAA3B,EAAqCkD,KAArC,EAA4CD,KAA5C,EAAmD,CAAnD;IAEA;;IACA,MAAM8F,cAAc,GAAG;MACrB9H,OAAO,EAAE,CAACA,OAAO,CAAC,CAAD,CAAR,EAAaqE,MAAb,CADY;MAErBvF,OAAO,EAAEA,OAFY;MAGrBC,QAAQ,EAAEA,QAHW;MAIrBiD,KAAK,EAAEA,KAJc;MAKrBC,KAAK,EAAEA;IALc,CAAvB;IAQA2F,KAAK,CAAC/F,MAAN,CAAajJ,cAAc,CAACkP,cAAc,CAAC9H,OAAhB,CAA3B,EAAqD8H,cAArD;IACA,KAAKvL,aAAL,CAAmB6D,IAAnB,CAAwB,CAAC0H,cAAD,EAAiB,CAAjB,CAAxB;IAEA;;IACA,MAAMC,eAAe,GAAG;MACtB/H,OAAO,EAAE,CAACqE,MAAD,EAASrE,OAAO,CAAC,CAAD,CAAhB,CADa;MAEtBlB,OAAO,EAAEA,OAFa;MAGtBC,QAAQ,EAAEA,QAHY;MAItBiD,KAAK,EAAEA,KAJe;MAKtBC,KAAK,EAAEA,KAAK,GAAG;IALO,CAAxB;IAQA2F,KAAK,CAAC/F,MAAN,CAAajJ,cAAc,CAACmP,eAAe,CAAC/H,OAAjB,CAA3B,EAAsD+H,eAAtD;IACA,KAAKxL,aAAL,CAAmB6D,IAAnB,CAAwB,CAAC2H,eAAD,EAAkB,CAAlB,CAAxB;IACA,KAAKhM,sBAAL,GAA8B,IAA9B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEoI,WAAW,GAAG;IACZ,IACE,KAAKzF,iBAAL,IACA,KAAKA,iBAAL,CAAuBhE,IAAvB,IAA+BzC,mBAAmB,CAAC+P,WAFrD,EAGE;MACA,MAAMtI,GAAG,GAAG,KAAKhB,iBAAjB;MACA,KAAKe,mBAAL,CAAyBC,GAAzB,EAA8B,KAAKnD,aAAnC;MACA,MAAM0L,OAAO,GAAG,KAAKC,aAAL,EAAhB;;MACA,IAAI,KAAKlM,sBAAT,EAAiC;QAC/B,KAAKsE,aAAL,CACE,IAAI9F,WAAJ,CACEH,eAAe,CAACE,SADlB,EAEE,KAAKyB,sBAFP,EAGE0D,GAHF,CADF;MAOD;;MAED,KAAK1D,sBAAL,GAA8B,IAA9B;MACA,OAAOiM,OAAP;IACD;;IACD,OAAO,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,aAAa,GAAG;IACd,MAAMC,YAAY,GAAG,KAAK5L,aAA1B;IACA,MAAM6L,iBAAiB,GAAG,EAA1B;IACA,IAAIC,OAAO,GAAG,KAAd;IACA,IAAIC,SAAJ,EAAe5G,WAAf,EAA4B6C,WAA5B,EAAyCxF,QAAzC,EAAmDc,CAAnD,EAAsDoC,KAAtD,EAA6DsG,IAA7D;IACA,IAAIC,QAAJ,EAAcC,KAAd,EAAqB7G,WAArB,EAAkC6D,GAAlC;;IACA,KAAK5F,CAAC,GAAGsI,YAAY,CAACpI,MAAb,GAAsB,CAA/B,EAAkCF,CAAC,IAAI,CAAvC,EAA0C,EAAEA,CAA5C,EAA+C;MAC7C0E,WAAW,GAAG4D,YAAY,CAACtI,CAAD,CAA1B;MACA+B,WAAW,GAAG2C,WAAW,CAAC,CAAD,CAAzB;MACAkB,GAAG,GAAGzL,MAAM,CAAC4H,WAAW,CAAC9C,OAAb,CAAZ;;MACA,IAAI8C,WAAW,CAACI,KAAhB,EAAuB;QACrB;QACAyD,GAAG,IAAI,MAAM7D,WAAW,CAACI,KAAZ,CAAkB0D,IAAlB,CAAuB,GAAvB,CAAb;MACD;;MACD,IAAI,EAAED,GAAG,IAAI2C,iBAAT,CAAJ,EAAiC;QAC/BA,iBAAiB,CAAC3C,GAAD,CAAjB,GAAyB,EAAzB;MACD;;MACD,IAAIlB,WAAW,CAAC,CAAD,CAAX,KAAmB,CAAvB,EAA0B;QACxB6D,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuBgD,KAAvB,GAA+B7G,WAA/B;QACAwG,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuBxD,KAAvB,GAA+BL,WAAW,CAACK,KAA3C;MACD,CAHD,MAGO,IAAIsC,WAAW,CAAC,CAAD,CAAX,IAAkB,CAAtB,EAAyB;QAC9B6D,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuB8C,IAAvB,GAA8B3G,WAA9B;QACAwG,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuBxD,KAAvB,GAA+BL,WAAW,CAACK,KAAZ,GAAoB,CAAnD;MACD;IACF;;IACD,KAAKwD,GAAL,IAAY2C,iBAAZ,EAA+B;MAC7BK,KAAK,GAAGL,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuBgD,KAA/B;MACAF,IAAI,GAAGH,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuB8C,IAA9B;MACAtG,KAAK,GAAGmG,iBAAiB,CAAC3C,GAAD,CAAjB,CAAuBxD,KAA/B;MACAuG,QAAQ,GAAGvG,KAAK,GAAG,CAAnB;;MACA,IAAIsG,IAAI,KAAKnM,SAAb,EAAwB;QACtBwF,WAAW,GAAG2G,IAAd;MACD,CAFD,MAEO;QACL3G,WAAW,GAAG6G,KAAd;MACD;;MACD,IAAID,QAAQ,GAAG,CAAf,EAAkB;QAChBA,QAAQ,GAAG,CAAX;MACD;;MACDzJ,QAAQ,GAAG6C,WAAW,CAAC7C,QAAvB;MACA2C,WAAW,GAAG3C,QAAQ,CAAC4C,cAAT,EAAd;MACA2G,SAAS,GAAG5G,WAAZ;MACA2G,OAAO,GAAG,KAAV;;MACA,QAAQtJ,QAAQ,CAACG,OAAT,EAAR;QACE,KAAK,iBAAL;UACE,IAAIwC,WAAW,CAACE,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAD,CAAX,CAAkCjC,MAAlC,GAA2C,CAA/C,EAAkD;YAChD2B,WAAW,CAACE,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAD,CAAX,CAAkCf,MAAlC,CAAyCgB,KAAzC,EAAgD,CAAhD;YACAoG,OAAO,GAAG,IAAV;UACD;;UACD;;QACF,KAAK,YAAL;UACE,IAAI3G,WAAW,CAAC3B,MAAZ,GAAqB,CAAzB,EAA4B;YAC1B2B,WAAW,CAACT,MAAZ,CAAmBgB,KAAnB,EAA0B,CAA1B;YACAoG,OAAO,GAAG,IAAV;UACD;;UACD;;QACF,KAAK,cAAL;UACEC,SAAS,GAAGA,SAAS,CAAC1G,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAD,CAArB;;QACF;;QACA,KAAK,SAAL;UACEsG,SAAS,GAAGA,SAAS,CAAC1G,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAD,CAArB;;UACA,IAAIsG,SAAS,CAACvI,MAAV,GAAmB,CAAvB,EAA0B;YACxB,IAAIkC,KAAK,IAAIqG,SAAS,CAACvI,MAAV,GAAmB,CAAhC,EAAmC;cACjCkC,KAAK,GAAG,CAAR;YACD;;YACDqG,SAAS,CAACrH,MAAV,CAAiBgB,KAAjB,EAAwB,CAAxB;YACAoG,OAAO,GAAG,IAAV;;YACA,IAAIpG,KAAK,KAAK,CAAd,EAAiB;cACf;cACAqG,SAAS,CAACI,GAAV;cACAJ,SAAS,CAAClI,IAAV,CAAekI,SAAS,CAAC,CAAD,CAAxB;cACAE,QAAQ,GAAGF,SAAS,CAACvI,MAAV,GAAmB,CAA9B;YACD;UACF;;UACD;;QACF,QAhCF,CAiCE;;MAjCF;;MAoCA,IAAIsI,OAAJ,EAAa;QACX,KAAKxD,uBAAL,CAA6B9F,QAA7B,EAAuC2C,WAAvC;QACA,MAAM/B,QAAQ,GAAG,EAAjB;;QACA,IAAI4I,IAAI,KAAKnM,SAAb,EAAwB;UACtB,KAAKH,MAAL,CAAYiF,MAAZ,CAAmBqH,IAAnB;UACA5I,QAAQ,CAACS,IAAT,CAAcmI,IAAI,CAACvI,OAAL,CAAa,CAAb,CAAd;QACD;;QACD,IAAIyI,KAAK,KAAKrM,SAAd,EAAyB;UACvB,KAAKH,MAAL,CAAYiF,MAAZ,CAAmBuH,KAAnB;UACA9I,QAAQ,CAACS,IAAT,CAAcqI,KAAK,CAACzI,OAAN,CAAc,CAAd,CAAd;QACD;;QACD,IAAIuI,IAAI,KAAKnM,SAAT,IAAsBqM,KAAK,KAAKrM,SAApC,EAA+C;UAC7C;UACA,MAAM0L,cAAc,GAAG;YACrB9F,KAAK,EAAEJ,WAAW,CAACI,KADE;YAErBlD,OAAO,EAAE8C,WAAW,CAAC9C,OAFA;YAGrBC,QAAQ,EAAE6C,WAAW,CAAC7C,QAHD;YAIrBkD,KAAK,EAAEuG,QAJc;YAKrBxI,OAAO,EAAEL;UALY,CAAvB;UAQA,KAAK1D,MAAL,CAAY4F,MAAZ,CACEjJ,cAAc,CAACkP,cAAc,CAAC9H,OAAhB,CADhB,EAEE8H,cAFF;QAID;;QACD,KAAKD,qBAAL,CAA2B9I,QAA3B,EAAqCkD,KAArC,EAA4CL,WAAW,CAACI,KAAxD,EAA+D,CAAC,CAAhE;;QACA,IAAI,KAAKpG,cAAT,EAAyB;UACvB,KAAKY,QAAL,CAAciE,SAAd,GAA0BC,aAA1B,CAAwC,KAAK9E,cAA7C;UACA,KAAKA,cAAL,GAAsB,IAAtB;QACD;;QACDuM,YAAY,CAACpI,MAAb,GAAsB,CAAtB;MACD;IACF;;IACD,OAAOsI,OAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACExD,uBAAuB,CAAC9F,QAAD,EAAW2C,WAAX,EAAwB;IAC7C,KAAKpF,gBAAL,GAAwB,IAAxB;IACAyC,QAAQ,CAAC0E,cAAT,CAAwB/B,WAAxB;IACA,KAAKpF,gBAAL,GAAwB,KAAxB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEuL,qBAAqB,CAAC9I,QAAD,EAAWkD,KAAX,EAAkBD,KAAlB,EAAyB2G,KAAzB,EAAgC;IACnD,KAAK1M,MAAL,CAAY2M,eAAZ,CACE7J,QAAQ,CAAC+C,SAAT,EADF,EAEE,UAAU0D,gBAAV,EAA4B;MAC1B,IACEA,gBAAgB,CAACzG,QAAjB,KAA8BA,QAA9B,KACCiD,KAAK,KAAK5F,SAAV,IACCoJ,gBAAgB,CAACxD,KAAjB,KAA2B5F,SAD5B,IAEChD,MAAM,CAACoM,gBAAgB,CAACxD,KAAlB,EAAyBA,KAAzB,CAHR,KAIAwD,gBAAgB,CAACvD,KAAjB,GAAyBA,KAL3B,EAME;QACAuD,gBAAgB,CAACvD,KAAjB,IAA0B0G,KAA1B;MACD;IACF,CAZH;EAcD;;AAv0CqC;AA00CxC;AACA;AACA;AACA;AACA;;;AACA,SAASpD,cAAT,CAAwBY,CAAxB,EAA2BC,CAA3B,EAA8B;EAC5B,OAAOD,CAAC,CAAClE,KAAF,GAAUmE,CAAC,CAACnE,KAAnB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoE,qCAAT,CACEwC,gBADF,EAEEjH,WAFF,EAGEmB,UAHF,EAIE;EACA,MAAMhE,QAAQ,GAAG6C,WAAW,CAAC7C,QAA7B;;EAEA,IAAIA,QAAQ,CAACG,OAAT,OAAuB,QAA3B,EAAqC;IACnC,IAAI2D,cAAc;IAAG;IACnB9D,QADF;;IAIA,IAAI6C,WAAW,CAACK,KAAZ,KAAsB/H,0BAA1B,EAAsD;MACpD,MAAM4I,cAAc,GAAGjJ,iBAAiB,EAAxC;;MACA,IAAIiJ,cAAJ,EAAoB;QAClBD,cAAc;QAAG;QACfA,cAAc,CAACK,KAAf,GAAuBC,SAAvB,CAAiCL,cAAjC,EAAiDC,UAAjD,CADF;MAGD;;MACD,MAAM+F,uBAAuB,GAAGvP,yBAAyB,CACvDsJ,cAAc,CAACJ,SAAf,EADuD,EAEvD9I,kBAAkB,CAACkP,gBAAD,EAAmB9F,UAAnB,CAFqC,CAAzD;MAIA,MAAMgG,uBAAuB,GAC3BvB,IAAI,CAACC,IAAL,CAAUqB,uBAAV,IAAqCjG,cAAc,CAAC+B,SAAf,EADvC;MAEA,OAAOmE,uBAAuB,GAAGA,uBAAjC;IACD;EACF;;EAED,MAAMzE,UAAU,GAAG3K,kBAAkB,CAACkP,gBAAD,EAAmB9F,UAAnB,CAArC;EACA3I,WAAW,CAAC,CAAD,CAAX,GAAiBT,kBAAkB,CAACiI,WAAW,CAAC5B,OAAZ,CAAoB,CAApB,CAAD,EAAyB+C,UAAzB,CAAnC;EACA3I,WAAW,CAAC,CAAD,CAAX,GAAiBT,kBAAkB,CAACiI,WAAW,CAAC5B,OAAZ,CAAoB,CAApB,CAAD,EAAyB+C,UAAzB,CAAnC;EACA,OAAOvJ,wBAAwB,CAAC8K,UAAD,EAAalK,WAAb,CAA/B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyL,oBAAT,CAA8BgD,gBAA9B,EAAgDjH,WAAhD,EAA6DmB,UAA7D,EAAyE;EACvE,MAAMhE,QAAQ,GAAG6C,WAAW,CAAC7C,QAA7B;;EAEA,IACEA,QAAQ,CAACG,OAAT,OAAuB,QAAvB,IACA0C,WAAW,CAACK,KAAZ,KAAsB/H,0BAFxB,EAGE;IACA,IAAI2I,cAAc;IAAG;IACnB9D,QADF;IAGA,MAAM+D,cAAc,GAAGjJ,iBAAiB,EAAxC;;IACA,IAAIiJ,cAAJ,EAAoB;MAClBD,cAAc;MAAG;MACfA,cAAc,CAACK,KAAf,GAAuBC,SAAvB,CAAiCL,cAAjC,EAAiDC,UAAjD,CADF;IAGD;;IACD,OAAOjJ,gBAAgB,CACrB+I,cAAc,CAACmG,eAAf,CACErP,kBAAkB,CAACkP,gBAAD,EAAmB9F,UAAnB,CADpB,CADqB,EAIrBA,UAJqB,CAAvB;EAMD;;EACD,MAAMuB,UAAU,GAAG3K,kBAAkB,CAACkP,gBAAD,EAAmB9F,UAAnB,CAArC;EACA3I,WAAW,CAAC,CAAD,CAAX,GAAiBT,kBAAkB,CAACiI,WAAW,CAAC5B,OAAZ,CAAoB,CAApB,CAAD,EAAyB+C,UAAzB,CAAnC;EACA3I,WAAW,CAAC,CAAD,CAAX,GAAiBT,kBAAkB,CAACiI,WAAW,CAAC5B,OAAZ,CAAoB,CAApB,CAAD,EAAyB+C,UAAzB,CAAnC;EACA,OAAOjJ,gBAAgB,CACrBb,gBAAgB,CAACqL,UAAD,EAAalK,WAAb,CADK,EAErB2I,UAFqB,CAAvB;AAID;AAED;AACA;AACA;;;AACA,SAASlG,uBAAT,GAAmC;EACjC,MAAMD,KAAK,GAAGnD,kBAAkB,EAAhC;EACA,OAAO,UAAUqF,OAAV,EAAmBmK,UAAnB,EAA+B;IACpC,OAAOrM,KAAK,CAAC,OAAD,CAAZ;EACD,CAFD;AAGD;;AAED,eAAe/B,MAAf"},"metadata":{},"sourceType":"module"}