{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      const z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n\n      const tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n        }\n      }\n\n      return extents;\n    }\n  );\n}","map":{"version":3,"names":["fromUserExtent","fromUserResolution","toUserExtent","all","extent","resolution","Infinity","bbox","tile","tileGrid","projection","z","getZForResolution","tileRange","getTileRangeForExtentAndZ","extents","tileCoord","minX","maxX","minY","maxY","push","getTileCoordExtent"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/loadingstrategy.js"],"sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      const z = tileGrid.getZForResolution(\n        fromUserResolution(resolution, projection)\n      );\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        fromUserExtent(extent, projection),\n        z\n      );\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (\n        tileCoord[1] = tileRange.minX;\n        tileCoord[1] <= tileRange.maxX;\n        ++tileCoord[1]\n      ) {\n        for (\n          tileCoord[2] = tileRange.minY;\n          tileCoord[2] <= tileRange.maxY;\n          ++tileCoord[2]\n        ) {\n          extents.push(\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection)\n          );\n        }\n      }\n      return extents;\n    }\n  );\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,cAAR,EAAwBC,kBAAxB,EAA4CC,YAA5C,QAA+D,WAA/D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,MAAb,EAAqBC,UAArB,EAAiC;EACtC,OAAO,CAAC,CAAC,CAACC,QAAF,EAAY,CAACA,QAAb,EAAuBA,QAAvB,EAAiCA,QAAjC,CAAD,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcH,MAAd,EAAsBC,UAAtB,EAAkC;EACvC,OAAO,CAACD,MAAD,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,IAAT,CAAcC,QAAd,EAAwB;EAC7B;IACE;AACJ;AACA;AACA;AACA;AACA;IACI,UAAUL,MAAV,EAAkBC,UAAlB,EAA8BK,UAA9B,EAA0C;MACxC,MAAMC,CAAC,GAAGF,QAAQ,CAACG,iBAAT,CACRX,kBAAkB,CAACI,UAAD,EAAaK,UAAb,CADV,CAAV;MAGA,MAAMG,SAAS,GAAGJ,QAAQ,CAACK,yBAAT,CAChBd,cAAc,CAACI,MAAD,EAASM,UAAT,CADE,EAEhBC,CAFgB,CAAlB;MAIA;;MACA,MAAMI,OAAO,GAAG,EAAhB;MACA;;MACA,MAAMC,SAAS,GAAG,CAACL,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;;MACA,KACEK,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACI,IAD3B,EAEED,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACK,IAF5B,EAGE,EAAEF,SAAS,CAAC,CAAD,CAHb,EAIE;QACA,KACEA,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACM,IAD3B,EAEEH,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACO,IAF5B,EAGE,EAAEJ,SAAS,CAAC,CAAD,CAHb,EAIE;UACAD,OAAO,CAACM,IAAR,CACEnB,YAAY,CAACO,QAAQ,CAACa,kBAAT,CAA4BN,SAA5B,CAAD,EAAyCN,UAAzC,CADd;QAGD;MACF;;MACD,OAAOK,OAAP;IACD;EAnCH;AAqCD"},"metadata":{},"sourceType":"module"}