{"ast":null,"code":"// algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\nimport { NativeArrayBuffer, NativeFloat32Array, NativeUint32Array } from \"./primordials.mjs\";\nconst buffer = new NativeArrayBuffer(4);\nconst floatView = new NativeFloat32Array(buffer);\nconst uint32View = new NativeUint32Array(buffer);\nconst baseTable = new NativeUint32Array(512);\nconst shiftTable = new NativeUint32Array(512);\n\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127; // very small number (0, -0)\n\n  if (e < -27) {\n    baseTable[i] = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24; // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i] = 0x0400 >> -e - 14;\n    baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n    shiftTable[i] = -e - 1;\n    shiftTable[i | 0x100] = -e - 1; // normal number\n  } else if (e <= 15) {\n    baseTable[i] = e + 15 << 10;\n    baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13; // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24; // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n/**\n * round a number to a half float number bits\n *\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\n\n\nexport function roundToFloat16Bits(num) {\n  floatView[0] =\n  /** @type {any} */\n  num;\n  const f = uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\nconst mantissaTable = new NativeUint32Array(2048);\nconst exponentTable = new NativeUint32Array(64);\nconst offsetTable = new NativeUint32Array(64);\n\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13; // zero pad mantissa bits\n\n  let e = 0; // zero exponent\n  // normalized\n\n  while ((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000; // decrement exponent\n  }\n\n  m &= ~0x00800000; // clear leading 1 bit\n\n  e += 0x38800000; // adjust bias\n\n  mantissaTable[i] = m | e;\n}\n\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n}\n\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\n\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\n\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + (i - 32 << 23);\n}\n\nexponentTable[63] = 0xc7800000;\n\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n/**\n * convert a half float number bits to a number\n *\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\n\n\nexport function convertToNumber(float16bits) {\n  const m = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\n  return floatView[0];\n}","map":{"version":3,"names":["NativeArrayBuffer","NativeFloat32Array","NativeUint32Array","buffer","floatView","uint32View","baseTable","shiftTable","i","e","roundToFloat16Bits","num","f","mantissaTable","exponentTable","offsetTable","m","convertToNumber","float16bits"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/@petamoriken/float16/src/_util/converter.mjs"],"sourcesContent":["// algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nimport {\n  NativeArrayBuffer,\n  NativeFloat32Array,\n  NativeUint32Array,\n} from \"./primordials.mjs\";\n\nconst buffer = new NativeArrayBuffer(4);\nconst floatView = new NativeFloat32Array(buffer);\nconst uint32View = new NativeUint32Array(buffer);\n\nconst baseTable = new NativeUint32Array(512);\nconst shiftTable = new NativeUint32Array(512);\n\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127;\n\n  // very small number (0, -0)\n  if (e < -27) {\n    baseTable[i]         = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i]         =  0x0400 >> (-e - 14);\n    baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n    shiftTable[i]         = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n\n  // normal number\n  } else if (e <= 15) {\n    baseTable[i]         =  (e + 15) << 10;\n    baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n\n  // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\n/**\n * round a number to a half float number bits\n *\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\nexport function roundToFloat16Bits(num) {\n  floatView[0] = /** @type {any} */ (num);\n  const f = uint32View[0];\n  const e = (f >> 23) & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\n\nconst mantissaTable = new NativeUint32Array(2048);\nconst exponentTable = new NativeUint32Array(64);\nconst offsetTable = new NativeUint32Array(64);\n\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13;    // zero pad mantissa bits\n  let e = 0;          // zero exponent\n\n  // normalized\n  while((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000;  // decrement exponent\n  }\n\n  m &= ~0x00800000;   // clear leading 1 bit\n  e += 0x38800000;    // adjust bias\n\n  mantissaTable[i] = m | e;\n}\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n}\n\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n}\nexponentTable[63] = 0xc7800000;\n\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n\n/**\n * convert a half float number bits to a number\n *\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\nexport function convertToNumber(float16bits) {\n  const m = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\n  return floatView[0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}