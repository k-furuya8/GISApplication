{"ast":null,"code":"/**\n * @module ol/reproj/Image\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport { getCenter, getHeight, getIntersection, getWidth } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\n\nclass ReprojImage extends ImageBase {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, interpolate) {\n    const maxSourceExtent = sourceProj.getExtent();\n    const maxTargetExtent = targetProj.getExtent();\n    const limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n    const triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    this.targetProj_ = targetProj;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n\n    this.triangulation_ = triangulation;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.targetResolution_ = targetResolution;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.targetExtent_ = targetExtent;\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n\n    this.sourceImage_ = sourceImage;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.sourcePixelRatio_ = sourcePixelRatio;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.interpolate_ = interpolate;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    this.sourceListenerKey_ = null;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n\n    super.disposeInternal();\n  }\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n\n\n  getImage() {\n    return this.canvas_;\n  }\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  getProjection() {\n    return this.targetProj_;\n  }\n  /**\n   * @private\n   */\n\n\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n        extent: this.sourceImage_.getExtent(),\n        image: this.sourceImage_.getImage()\n      }], 0, undefined, this.interpolate_);\n    }\n\n    this.state = sourceState;\n    this.changed();\n  }\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      const sourceState = this.sourceImage_.getState();\n\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {\n          const sourceState = this.sourceImage_.getState();\n\n          if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n            this.unlistenSource_();\n            this.reproject_();\n          }\n        }, this);\n        this.sourceImage_.load();\n      }\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  unlistenSource_() {\n    unlistenByKey(\n    /** @type {!import(\"../events.js\").EventsKey} */\n    this.sourceListenerKey_);\n    this.sourceListenerKey_ = null;\n  }\n\n}\n\nexport default ReprojImage;","map":{"version":3,"names":["ERROR_THRESHOLD","EventType","ImageBase","ImageState","Triangulation","calculateSourceResolution","render","renderReprojected","getCenter","getHeight","getIntersection","getWidth","listen","unlistenByKey","ReprojImage","constructor","sourceProj","targetProj","targetExtent","targetResolution","pixelRatio","getImageFunction","interpolate","maxSourceExtent","getExtent","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","width","height","getResolution","extent","image","undefined","changed","load","ERROR","CHANGE","e"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/reproj/Image.js"],"sourcesContent":["/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {getCenter, getHeight, getIntersection, getWidth} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageBase {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate\n  ) {\n    const maxSourceExtent = sourceProj.getExtent();\n    const maxTargetExtent = targetProj.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = getImageFunction(\n      sourceExtent,\n      sourceResolution,\n      pixelRatio\n    );\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        this.sourceImage_.getResolution(),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          function (e) {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n          this\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}