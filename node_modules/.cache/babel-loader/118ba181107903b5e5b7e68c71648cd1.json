{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    });\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n\n    this.canvas_ = undefined;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.size_ = null;\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n\n    this.renderOptions_ = null;\n    this.render();\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  getAnchor() {\n    const size = this.size_;\n\n    if (!size) {\n      return null;\n    }\n\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray(); // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n\n    return [size[0] / 2 - displacement[0] / scale[0], size[1] / 2 + displacement[1] / scale[1]];\n  }\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  getAngle() {\n    return this.angle_;\n  }\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  getFill() {\n    return this.fill_;\n  }\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n\n\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n\n    return this.hitDetectionCanvas_;\n  }\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n\n\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n\n    return image;\n  }\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n\n\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  getImageSize() {\n    return this.size_;\n  }\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  getImageState() {\n    return ImageState.LOADED;\n  }\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  getOrigin() {\n    return this.origin_;\n  }\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  getPoints() {\n    return this.points_;\n  }\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  getRadius() {\n    return this.radius_;\n  }\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  getRadius2() {\n    return this.radius2_;\n  }\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n\n\n  getSize() {\n    return this.size_;\n  }\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  getStroke() {\n    return this.stroke_;\n  }\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  listenImageChange(listener) {}\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  load() {}\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  unlistenImageChange(listener) {}\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n\n\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    } // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n\n\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n\n    const points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = 2 * Math.PI / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    } // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n\n\n    const k = strokeWidth / 2 / miterRatio;\n    const l = strokeWidth / 2 * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    } // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n\n\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n\n    return bevelAdd * 2;\n  }\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n\n\n  createRenderOptions() {\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  }\n  /**\n   * @protected\n   */\n\n\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  }\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n\n\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio); // set origin to canvas center\n\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n\n\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor(); // determine if fill is transparent (or pattern or gradient)\n\n      let opacity = 0;\n\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n\n\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = 2 * Math.PI / points;\n\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n\n      context.closePath();\n    }\n  }\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n\n\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n}\n\nexport default RegularShape;","map":{"version":3,"names":["ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","constructor","options","rotateWithView","undefined","opacity","rotation","scale","displacement","declutterMode","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","size_","renderOptions_","render","clone","getScale","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","Array","isArray","slice","getDisplacement","getDeclutterMode","setOpacity","getOpacity","getAnchor","size","getScaleArray","setFill","getHitDetectionImage","createHitDetectionCanvas_","getImage","pixelRatio","image","renderOptions","context","draw_","canvas","getPixelRatio","getImageSize","getImageState","LOADED","getOrigin","getSize","setStroke","listenImageChange","listener","load","unlistenImageChange","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","b","sqrt","d","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","createRenderOptions","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","add","maxRadius","ceil","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/style/RegularShape.js"],"sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    if (!size) {\n      return null;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      size[0] / 2 - displacement[0] / scale[0],\n      size[1] / 2 + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n}\n\nexport default RegularShape;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AACA,SAAQC,qBAAR,QAAoC,WAApC;AACA,SACEC,gBADF,EAEEC,eAFF,EAGEC,gBAHF,EAIEC,iBAJF,EAKEC,kBALF,QAMO,qBANP;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BT,UAA3B,CAAsC;EACpC;AACF;AACA;EACEU,WAAW,CAACC,OAAD,EAAU;IACnB;AACJ;AACA;IACI,MAAMC,cAAc,GAClBD,OAAO,CAACC,cAAR,KAA2BC,SAA3B,GAAuCF,OAAO,CAACC,cAA/C,GAAgE,KADlE;IAGA,MAAM;MACJE,OAAO,EAAE,CADL;MAEJF,cAAc,EAAEA,cAFZ;MAGJG,QAAQ,EAAEJ,OAAO,CAACI,QAAR,KAAqBF,SAArB,GAAiCF,OAAO,CAACI,QAAzC,GAAoD,CAH1D;MAIJC,KAAK,EAAEL,OAAO,CAACK,KAAR,KAAkBH,SAAlB,GAA8BF,OAAO,CAACK,KAAtC,GAA8C,CAJjD;MAKJC,YAAY,EACVN,OAAO,CAACM,YAAR,KAAyBJ,SAAzB,GAAqCF,OAAO,CAACM,YAA7C,GAA4D,CAAC,CAAD,EAAI,CAAJ,CAN1D;MAOJC,aAAa,EAAEP,OAAO,CAACO;IAPnB,CAAN;IAUA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAeN,SAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKO,mBAAL,GAA2B,IAA3B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAaV,OAAO,CAACW,IAAR,KAAiBT,SAAjB,GAA6BF,OAAO,CAACW,IAArC,GAA4C,IAAzD;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAeb,OAAO,CAACc,MAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GACEf,OAAO,CAACgB,MAAR,KAAmBd,SAAnB,GAA+BF,OAAO,CAACgB,MAAvC,GAAgDhB,OAAO,CAACiB,OAD1D;IAGA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBlB,OAAO,CAACmB,OAAxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcpB,OAAO,CAACqB,KAAR,KAAkBnB,SAAlB,GAA8BF,OAAO,CAACqB,KAAtC,GAA8C,CAA5D;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAetB,OAAO,CAACuB,MAAR,KAAmBrB,SAAnB,GAA+BF,OAAO,CAACuB,MAAvC,GAAgD,IAA/D;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAa,IAAb;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,cAAL,GAAsB,IAAtB;IAEA,KAAKC,MAAL;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,KAAK,GAAG;IACN,MAAMtB,KAAK,GAAG,KAAKuB,QAAL,EAAd;IACA,MAAMC,KAAK,GAAG,IAAI/B,YAAJ,CAAiB;MAC7Ba,IAAI,EAAE,KAAKmB,OAAL,KAAiB,KAAKA,OAAL,GAAeH,KAAf,EAAjB,GAA0CzB,SADnB;MAE7BY,MAAM,EAAE,KAAKiB,SAAL,EAFqB;MAG7Bf,MAAM,EAAE,KAAKgB,SAAL,EAHqB;MAI7Bb,OAAO,EAAE,KAAKc,UAAL,EAJoB;MAK7BZ,KAAK,EAAE,KAAKa,QAAL,EALsB;MAM7BX,MAAM,EAAE,KAAKY,SAAL,KAAmB,KAAKA,SAAL,GAAiBR,KAAjB,EAAnB,GAA8CzB,SANzB;MAO7BE,QAAQ,EAAE,KAAKgC,WAAL,EAPmB;MAQ7BnC,cAAc,EAAE,KAAKoC,iBAAL,EARa;MAS7BhC,KAAK,EAAEiC,KAAK,CAACC,OAAN,CAAclC,KAAd,IAAuBA,KAAK,CAACmC,KAAN,EAAvB,GAAuCnC,KATjB;MAU7BC,YAAY,EAAE,KAAKmC,eAAL,GAAuBD,KAAvB,EAVe;MAW7BjC,aAAa,EAAE,KAAKmC,gBAAL;IAXc,CAAjB,CAAd;IAaAb,KAAK,CAACc,UAAN,CAAiB,KAAKC,UAAL,EAAjB;IACA,OAAOf,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEgB,SAAS,GAAG;IACV,MAAMC,IAAI,GAAG,KAAKtB,KAAlB;;IACA,IAAI,CAACsB,IAAL,EAAW;MACT,OAAO,IAAP;IACD;;IACD,MAAMxC,YAAY,GAAG,KAAKmC,eAAL,EAArB;IACA,MAAMpC,KAAK,GAAG,KAAK0C,aAAL,EAAd,CANU,CAOV;IACA;;IACA,OAAO,CACLD,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,GAAcxC,YAAY,CAAC,CAAD,CAAZ,GAAkBD,KAAK,CAAC,CAAD,CADhC,EAELyC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,GAAcxC,YAAY,CAAC,CAAD,CAAZ,GAAkBD,KAAK,CAAC,CAAD,CAFhC,CAAP;EAID;EAED;AACF;AACA;AACA;AACA;;;EACE6B,QAAQ,GAAG;IACT,OAAO,KAAKd,MAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEU,OAAO,GAAG;IACR,OAAO,KAAKpB,KAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEsC,OAAO,CAACrC,IAAD,EAAO;IACZ,KAAKD,KAAL,GAAaC,IAAb;IACA,KAAKe,MAAL;EACD;EAED;AACF;AACA;;;EACEuB,oBAAoB,GAAG;IACrB,IAAI,CAAC,KAAKxC,mBAAV,EAA+B;MAC7B,KAAKyC,yBAAL,CAA+B,KAAKzB,cAApC;IACD;;IACD,OAAO,KAAKhB,mBAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE0C,QAAQ,CAACC,UAAD,EAAa;IACnB,IAAIC,KAAK,GAAG,KAAK7C,OAAL,CAAa4C,UAAb,CAAZ;;IACA,IAAI,CAACC,KAAL,EAAY;MACV,MAAMC,aAAa,GAAG,KAAK7B,cAA3B;MACA,MAAM8B,OAAO,GAAG/D,qBAAqB,CACnC8D,aAAa,CAACR,IAAd,GAAqBM,UADc,EAEnCE,aAAa,CAACR,IAAd,GAAqBM,UAFc,CAArC;MAIA,KAAKI,KAAL,CAAWF,aAAX,EAA0BC,OAA1B,EAAmCH,UAAnC;MAEAC,KAAK,GAAGE,OAAO,CAACE,MAAhB;MACA,KAAKjD,OAAL,CAAa4C,UAAb,IAA2BC,KAA3B;IACD;;IACD,OAAOA,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEK,aAAa,CAACN,UAAD,EAAa;IACxB,OAAOA,UAAP;EACD;EAED;AACF;AACA;;;EACEO,YAAY,GAAG;IACb,OAAO,KAAKnC,KAAZ;EACD;EAED;AACF;AACA;;;EACEoC,aAAa,GAAG;IACd,OAAOxE,UAAU,CAACyE,MAAlB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,SAAS,GAAG;IACV,OAAO,KAAKlD,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEmB,SAAS,GAAG;IACV,OAAO,KAAKlB,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEmB,SAAS,GAAG;IACV,OAAO,KAAKjB,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEkB,UAAU,GAAG;IACX,OAAO,KAAKf,QAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6C,OAAO,GAAG;IACR,OAAO,KAAKvC,KAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEW,SAAS,GAAG;IACV,OAAO,KAAKb,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE0C,SAAS,CAACzC,MAAD,EAAS;IAChB,KAAKD,OAAL,GAAeC,MAAf;IACA,KAAKG,MAAL;EACD;EAED;AACF;AACA;;;EACEuC,iBAAiB,CAACC,QAAD,EAAW,CAAE;EAE9B;AACF;AACA;;;EACEC,IAAI,GAAG,CAAE;EAET;AACF;AACA;;;EACEC,mBAAmB,CAACF,QAAD,EAAW,CAAE;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEG,sBAAsB,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoC;IACxD,IACED,WAAW,KAAK,CAAhB,IACA,KAAK1D,OAAL,KAAiB4D,QADjB,IAECH,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,OAHxC,EAIE;MACA,OAAOC,WAAP;IACD,CAPuD,CAQxD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAAIG,EAAE,GAAG,KAAK3D,OAAd;IACA,IAAI4D,EAAE,GAAG,KAAKzD,QAAL,KAAkBhB,SAAlB,GAA8BwE,EAA9B,GAAmC,KAAKxD,QAAjD;;IACA,IAAIwD,EAAE,GAAGC,EAAT,EAAa;MACX,MAAMC,GAAG,GAAGF,EAAZ;MACAA,EAAE,GAAGC,EAAL;MACAA,EAAE,GAAGC,GAAL;IACD;;IACD,MAAM9D,MAAM,GACV,KAAKI,QAAL,KAAkBhB,SAAlB,GAA8B,KAAKW,OAAnC,GAA6C,KAAKA,OAAL,GAAe,CAD9D;IAEA,MAAMgE,KAAK,GAAI,IAAIC,IAAI,CAACC,EAAV,GAAgBjE,MAA9B;IACA,MAAMkE,CAAC,GAAGL,EAAE,GAAGG,IAAI,CAACG,GAAL,CAASJ,KAAT,CAAf;IACA,MAAMK,CAAC,GAAGJ,IAAI,CAACK,IAAL,CAAUR,EAAE,GAAGA,EAAL,GAAUK,CAAC,GAAGA,CAAxB,CAAV;IACA,MAAMI,CAAC,GAAGV,EAAE,GAAGQ,CAAf;IACA,MAAMG,CAAC,GAAGP,IAAI,CAACK,IAAL,CAAUH,CAAC,GAAGA,CAAJ,GAAQI,CAAC,GAAGA,CAAtB,CAAV;IACA,MAAME,UAAU,GAAGD,CAAC,GAAGL,CAAvB;;IACA,IAAIV,QAAQ,KAAK,OAAb,IAAwBgB,UAAU,IAAId,UAA1C,EAAsD;MACpD,OAAOc,UAAU,GAAGf,WAApB;IACD,CA/CuD,CAgDxD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,MAAMgB,CAAC,GAAGhB,WAAW,GAAG,CAAd,GAAkBe,UAA5B;IACA,MAAME,CAAC,GAAIjB,WAAW,GAAG,CAAf,IAAqBa,CAAC,GAAGC,CAAzB,CAAV;IACA,MAAMI,IAAI,GAAGX,IAAI,CAACK,IAAL,CAAU,CAACT,EAAE,GAAGa,CAAN,KAAYb,EAAE,GAAGa,CAAjB,IAAsBC,CAAC,GAAGA,CAApC,CAAb;IACA,MAAME,QAAQ,GAAGD,IAAI,GAAGf,EAAxB;;IACA,IAAI,KAAKxD,QAAL,KAAkBhB,SAAlB,IAA+BoE,QAAQ,KAAK,OAAhD,EAAyD;MACvD,OAAOoB,QAAQ,GAAG,CAAlB;IACD,CAnEuD,CAoExD;IACA;;;IACA,MAAMC,EAAE,GAAGjB,EAAE,GAAGI,IAAI,CAACG,GAAL,CAASJ,KAAT,CAAhB;IACA,MAAMe,EAAE,GAAGd,IAAI,CAACK,IAAL,CAAUT,EAAE,GAAGA,EAAL,GAAUiB,EAAE,GAAGA,EAAzB,CAAX;IACA,MAAME,EAAE,GAAGlB,EAAE,GAAGiB,EAAhB;IACA,MAAME,EAAE,GAAGhB,IAAI,CAACK,IAAL,CAAUQ,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAzB,CAAX;IACA,MAAME,eAAe,GAAGD,EAAE,GAAGH,EAA7B;;IACA,IAAII,eAAe,IAAIvB,UAAvB,EAAmC;MACjC,MAAMwB,WAAW,GAAID,eAAe,GAAGxB,WAAnB,GAAkC,CAAlC,GAAsCI,EAAtC,GAA2CD,EAA/D;MACA,OAAO,IAAII,IAAI,CAACmB,GAAL,CAASP,QAAT,EAAmBM,WAAnB,CAAX;IACD;;IACD,OAAON,QAAQ,GAAG,CAAlB;EACD;EAED;AACF;AACA;AACA;;;EACEQ,mBAAmB,GAAG;IACpB,IAAI5B,QAAQ,GAAG5E,eAAf;IACA,IAAI8E,UAAU,GAAG,CAAjB;IACA,IAAI2B,QAAQ,GAAG,IAAf;IACA,IAAIC,cAAc,GAAG,CAArB;IACA,IAAIC,WAAJ;IACA,IAAI9B,WAAW,GAAG,CAAlB;;IAEA,IAAI,KAAKjD,OAAT,EAAkB;MAChB+E,WAAW,GAAG,KAAK/E,OAAL,CAAagF,QAAb,EAAd;;MACA,IAAID,WAAW,KAAK,IAApB,EAA0B;QACxBA,WAAW,GAAGxG,kBAAd;MACD;;MACDwG,WAAW,GAAG9G,WAAW,CAAC8G,WAAD,CAAzB;MACA9B,WAAW,GAAG,KAAKjD,OAAL,CAAaiF,QAAb,EAAd;;MACA,IAAIhC,WAAW,KAAKrE,SAApB,EAA+B;QAC7BqE,WAAW,GAAG5E,gBAAd;MACD;;MACDwG,QAAQ,GAAG,KAAK7E,OAAL,CAAakF,WAAb,EAAX;MACAJ,cAAc,GAAG,KAAK9E,OAAL,CAAamF,iBAAb,EAAjB;MACAnC,QAAQ,GAAG,KAAKhD,OAAL,CAAaoF,WAAb,EAAX;;MACA,IAAIpC,QAAQ,KAAKpE,SAAjB,EAA4B;QAC1BoE,QAAQ,GAAG5E,eAAX;MACD;;MACD8E,UAAU,GAAG,KAAKlD,OAAL,CAAaqF,aAAb,EAAb;;MACA,IAAInC,UAAU,KAAKtE,SAAnB,EAA8B;QAC5BsE,UAAU,GAAG5E,iBAAb;MACD;IACF;;IAED,MAAMgH,GAAG,GAAG,KAAKvC,sBAAL,CAA4BC,QAA5B,EAAsCC,WAAtC,EAAmDC,UAAnD,CAAZ;IACA,MAAMqC,SAAS,GAAG/B,IAAI,CAACmB,GAAL,CAAS,KAAKlF,OAAd,EAAuB,KAAKG,QAAL,IAAiB,CAAxC,CAAlB;IACA,MAAM4B,IAAI,GAAGgC,IAAI,CAACgC,IAAL,CAAU,IAAID,SAAJ,GAAgBD,GAA1B,CAAb;IAEA,OAAO;MACLP,WAAW,EAAEA,WADR;MAEL9B,WAAW,EAAEA,WAFR;MAGLzB,IAAI,EAAEA,IAHD;MAILqD,QAAQ,EAAEA,QAJL;MAKLC,cAAc,EAAEA,cALX;MAML9B,QAAQ,EAAEA,QANL;MAOLE,UAAU,EAAEA;IAPP,CAAP;EASD;EAED;AACF;AACA;;;EACE9C,MAAM,GAAG;IACP,KAAKD,cAAL,GAAsB,KAAKyE,mBAAL,EAAtB;IACA,MAAMpD,IAAI,GAAG,KAAKrB,cAAL,CAAoBqB,IAAjC;IACA,KAAKtC,OAAL,GAAe,EAAf;IACA,KAAKgB,KAAL,GAAa,CAACsB,IAAD,EAAOA,IAAP,CAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEU,KAAK,CAACF,aAAD,EAAgBC,OAAhB,EAAyBH,UAAzB,EAAqC;IACxCG,OAAO,CAAClD,KAAR,CAAc+C,UAAd,EAA0BA,UAA1B,EADwC,CAExC;;IACAG,OAAO,CAACwD,SAAR,CAAkBzD,aAAa,CAACR,IAAd,GAAqB,CAAvC,EAA0CQ,aAAa,CAACR,IAAd,GAAqB,CAA/D;IAEA,KAAKkE,WAAL,CAAiBzD,OAAjB;;IAEA,IAAI,KAAK7C,KAAT,EAAgB;MACd,IAAIuG,KAAK,GAAG,KAAKvG,KAAL,CAAW4F,QAAX,EAAZ;;MACA,IAAIW,KAAK,KAAK,IAAd,EAAoB;QAClBA,KAAK,GAAGxH,gBAAR;MACD;;MACD8D,OAAO,CAAC2D,SAAR,GAAoB3H,WAAW,CAAC0H,KAAD,CAA/B;MACA1D,OAAO,CAAC5C,IAAR;IACD;;IACD,IAAI,KAAKW,OAAT,EAAkB;MAChBiC,OAAO,CAAC8C,WAAR,GAAsB/C,aAAa,CAAC+C,WAApC;MACA9C,OAAO,CAAC4D,SAAR,GAAoB7D,aAAa,CAACiB,WAAlC;;MACA,IAAIjB,aAAa,CAAC6C,QAAlB,EAA4B;QAC1B5C,OAAO,CAAC6D,WAAR,CAAoB9D,aAAa,CAAC6C,QAAlC;QACA5C,OAAO,CAAC6C,cAAR,GAAyB9C,aAAa,CAAC8C,cAAvC;MACD;;MACD7C,OAAO,CAACe,QAAR,GAAmBhB,aAAa,CAACgB,QAAjC;MACAf,OAAO,CAACiB,UAAR,GAAqBlB,aAAa,CAACkB,UAAnC;MACAjB,OAAO,CAAChC,MAAR;IACD;EACF;EAED;AACF;AACA;AACA;;;EACE2B,yBAAyB,CAACI,aAAD,EAAgB;IACvC,IAAI,KAAK5C,KAAT,EAAgB;MACd,IAAIuG,KAAK,GAAG,KAAKvG,KAAL,CAAW4F,QAAX,EAAZ,CADc,CAGd;;MACA,IAAInG,OAAO,GAAG,CAAd;;MACA,IAAI,OAAO8G,KAAP,KAAiB,QAArB,EAA+B;QAC7BA,KAAK,GAAG3H,OAAO,CAAC2H,KAAD,CAAf;MACD;;MACD,IAAIA,KAAK,KAAK,IAAd,EAAoB;QAClB9G,OAAO,GAAG,CAAV;MACD,CAFD,MAEO,IAAImC,KAAK,CAACC,OAAN,CAAc0E,KAAd,CAAJ,EAA0B;QAC/B9G,OAAO,GAAG8G,KAAK,CAACI,MAAN,KAAiB,CAAjB,GAAqBJ,KAAK,CAAC,CAAD,CAA1B,GAAgC,CAA1C;MACD;;MACD,IAAI9G,OAAO,KAAK,CAAhB,EAAmB;QACjB;QACA;QACA,MAAMoD,OAAO,GAAG/D,qBAAqB,CACnC8D,aAAa,CAACR,IADqB,EAEnCQ,aAAa,CAACR,IAFqB,CAArC;QAIA,KAAKrC,mBAAL,GAA2B8C,OAAO,CAACE,MAAnC;QAEA,KAAK6D,uBAAL,CAA6BhE,aAA7B,EAA4CC,OAA5C;MACD;IACF;;IACD,IAAI,CAAC,KAAK9C,mBAAV,EAA+B;MAC7B,KAAKA,mBAAL,GAA2B,KAAK0C,QAAL,CAAc,CAAd,CAA3B;IACD;EACF;EAED;AACF;AACA;AACA;;;EACE6D,WAAW,CAACzD,OAAD,EAAU;IACnB,IAAIzC,MAAM,GAAG,KAAKD,OAAlB;IACA,MAAMG,MAAM,GAAG,KAAKD,OAApB;;IACA,IAAID,MAAM,KAAK2D,QAAf,EAAyB;MACvBlB,OAAO,CAACgE,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkBvG,MAAlB,EAA0B,CAA1B,EAA6B,IAAI8D,IAAI,CAACC,EAAtC;IACD,CAFD,MAEO;MACL,MAAM5D,OAAO,GAAG,KAAKD,QAAL,KAAkBhB,SAAlB,GAA8Bc,MAA9B,GAAuC,KAAKE,QAA5D;;MACA,IAAI,KAAKA,QAAL,KAAkBhB,SAAtB,EAAiC;QAC/BY,MAAM,IAAI,CAAV;MACD;;MACD,MAAM0G,UAAU,GAAG,KAAKpG,MAAL,GAAc0D,IAAI,CAACC,EAAL,GAAU,CAA3C;MACA,MAAM0C,IAAI,GAAI,IAAI3C,IAAI,CAACC,EAAV,GAAgBjE,MAA7B;;MACA,KAAK,IAAI4G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5G,MAApB,EAA4B4G,CAAC,EAA7B,EAAiC;QAC/B,MAAMC,MAAM,GAAGH,UAAU,GAAGE,CAAC,GAAGD,IAAhC;QACA,MAAMG,OAAO,GAAGF,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc1G,MAAd,GAAuBG,OAAvC;QACAoC,OAAO,CAACsE,MAAR,CAAeD,OAAO,GAAG9C,IAAI,CAACgD,GAAL,CAASH,MAAT,CAAzB,EAA2CC,OAAO,GAAG9C,IAAI,CAACG,GAAL,CAAS0C,MAAT,CAArD;MACD;;MACDpE,OAAO,CAACwE,SAAR;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACET,uBAAuB,CAAChE,aAAD,EAAgBC,OAAhB,EAAyB;IAC9C;IACAA,OAAO,CAACwD,SAAR,CAAkBzD,aAAa,CAACR,IAAd,GAAqB,CAAvC,EAA0CQ,aAAa,CAACR,IAAd,GAAqB,CAA/D;IAEA,KAAKkE,WAAL,CAAiBzD,OAAjB;IAEAA,OAAO,CAAC2D,SAAR,GAAoBzH,gBAApB;IACA8D,OAAO,CAAC5C,IAAR;;IACA,IAAI,KAAKW,OAAT,EAAkB;MAChBiC,OAAO,CAAC8C,WAAR,GAAsB/C,aAAa,CAAC+C,WAApC;MACA9C,OAAO,CAAC4D,SAAR,GAAoB7D,aAAa,CAACiB,WAAlC;;MACA,IAAIjB,aAAa,CAAC6C,QAAlB,EAA4B;QAC1B5C,OAAO,CAAC6D,WAAR,CAAoB9D,aAAa,CAAC6C,QAAlC;QACA5C,OAAO,CAAC6C,cAAR,GAAyB9C,aAAa,CAAC8C,cAAvC;MACD;;MACD7C,OAAO,CAACe,QAAR,GAAmBhB,aAAa,CAACgB,QAAjC;MACAf,OAAO,CAACiB,UAAR,GAAqBlB,aAAa,CAACkB,UAAnC;MACAjB,OAAO,CAAChC,MAAR;IACD;EACF;;AArjBmC;;AAwjBtC,eAAezB,YAAf"},"metadata":{},"sourceType":"module"}