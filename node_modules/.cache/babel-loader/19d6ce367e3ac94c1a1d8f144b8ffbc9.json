{"ast":null,"code":"/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\n\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n  }\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n\n\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n\n    this.changed();\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n\n\n  clone() {\n    const multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n\n        closestPoint.length = stride;\n      }\n    }\n\n    return minSquaredDistance;\n  }\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n\n\n  getPoint(index) {\n    const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n\n    if (index < 0 || n <= index) {\n      return null;\n    }\n\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  }\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n\n\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n\n    const points = [];\n\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n\n    return points;\n  }\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  getType() {\n    return 'MultiPoint';\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n\n\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n\n}\n\nexport default MultiPoint;","map":{"version":3,"names":["Point","SimpleGeometry","closestSquaredDistanceXY","containsXY","deflateCoordinates","extend","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","constructor","coordinates","layout","Array","isArray","setFlatCoordinates","setCoordinates","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","intersectsExtent","extent","setLayout"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/geom/MultiPoint.js"],"sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates\n      ? 0\n      : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}