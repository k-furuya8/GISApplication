{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nclass RBush {\n  /**\n   * @param {number} [maxEntries] Max entries.\n   */\n  constructor(maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n\n\n  load(extents, values) {\n    const items = new Array(values.length);\n\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n      /** @type {Entry} */\n\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n\n    this.rbush_.load(items);\n  }\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n\n\n  remove(value) {\n    const uid = getUid(value); // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n\n\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n\n\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  forEach(callback) {\n    return this.forEach_(this.getAll(), callback);\n  }\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  forEachInExtent(extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  }\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n\n\n  forEach_(values, callback) {\n    let result;\n\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n  /**\n   * Remove all values from the RBush.\n   */\n\n\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  getExtent(extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\n  }\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n\n\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n\n}\n\nexport default RBush;","map":{"version":3,"names":["RBush_","createOrUpdate","equals","getUid","isEmpty","RBush","constructor","maxEntries","rbush_","items_","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","forEach_","forEachInExtent","result","clear","getExtent","data","toJSON","concat","rbush"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/structs/RBush.js"],"sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number} [maxEntries] Max entries.\n   */\n  constructor(maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(maxEntries);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value,\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value,\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEach(callback) {\n    return this.forEach_(this.getAll(), callback);\n  }\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEachInExtent(extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  }\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n  forEach_(values, callback) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\n  }\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n}\n\nexport default RBush;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}