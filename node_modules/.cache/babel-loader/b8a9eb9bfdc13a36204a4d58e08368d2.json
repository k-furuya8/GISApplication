{"ast":null,"code":"/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { getStrideForLayout } from '../geom/SimpleGeometry.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n */\n\n/**\n * @enum {string}\n */\n\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\n\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n\n    this.feature = feature;\n  }\n\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\n\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n\n    this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.lastDragTime_;\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n\n    this.pointerType_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n\n    this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n\n    this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n\n    this.type_ =\n    /** @type {import(\"../geom/Geometry.js\").Type} */\n    options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n\n    this.mode_ = getMode(this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n\n    this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n\n    this.minPoints_ = options.minPoints ? options.minPoints : this.mode_ === 'Polygon' ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n\n    this.maxPoints_ = this.mode_ === 'Circle' ? 2 : options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n\n    this.geometryLayout_ = options.geometryLayout ? options.geometryLayout : 'XY';\n    let geometryFunction = options.geometryFunction;\n\n    if (!geometryFunction) {\n      const mode = this.mode_;\n\n      if (mode === 'Circle') {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          const circle = geometry ?\n          /** @type {Circle} */\n          geometry : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[coordinates.length - 1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength), this.geometryLayout_);\n          const userProjection = getUserProjection();\n\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n\n          return circle;\n        };\n      } else {\n        let Constructor;\n\n        if (mode === 'Point') {\n          Constructor = Point;\n        } else if (mode === 'LineString') {\n          Constructor = LineString;\n        } else if (mode === 'Polygon') {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n\n\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode === 'Polygon') {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])], this.geometryLayout_);\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n\n\n    this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n\n    this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n\n    this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n\n    this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n\n    this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n\n    this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.freehandCondition_;\n\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n\n\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  getOverlay() {\n    return this.overlay_;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n\n    this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      const now = Date.now();\n\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (event.originalEvent.pointerType === 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  }\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (!this.freehand_ && (!startingToDraw || this.mode_ === 'Point')) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n\n    return pass;\n  }\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n\n\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  }\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n\n\n  atFinish_(pixel) {\n    let at = false;\n\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n\n      if (mode === 'Point') {\n        at = true;\n      } else if (mode === 'Circle') {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === 'LineString') {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === 'Polygon') {\n        const sketchCoords =\n        /** @type {PolyCoordType} */\n        this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n\n      if (potentiallyDone) {\n        const map = this.getMap();\n\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n\n    return at;\n  }\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n\n\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n\n\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n      sketchLineGeom.changed();\n    }\n  }\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n\n\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n\n    while (start.length < stride) {\n      start.push(0);\n    }\n\n    this.finishCoordinate_ = start;\n\n    if (this.mode_ === 'Point') {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === 'Polygon') {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n\n    const geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n\n\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n\n    if (this.mode_ === 'Point') {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === 'Polygon') {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n    /** @type {!LineCoordType} */\n    this.sketchCoords_, geometry, projection);\n\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n\n    if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {\n      this.createOrUpdateCustomSketchLine_(\n      /** @type {Polygon} */\n      geometry);\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n\n    this.updateSketchFeatures_();\n  }\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n\n\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n\n    if (mode === 'LineString' || mode === 'Circle') {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === 'Polygon') {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n\n\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let coordinates;\n    const mode = this.mode_;\n\n    if (mode === 'LineString' || mode === 'Circle') {\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n      coordinates.splice(-2, 1);\n\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        const finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n\n      this.geometryFunction_(coordinates, geometry, projection);\n\n      if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(\n        /** @type {Polygon} */\n        geometry);\n      }\n    } else if (mode === 'Polygon') {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n\n      if (coordinates.length >= 2) {\n        const finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  }\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n\n\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n\n    if (!sketchFeature) {\n      return;\n    }\n\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n\n    if (this.mode_ === 'LineString') {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === 'Polygon') {\n      // remove the redundant last point in ring\n\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    } // cast multi-part geometries\n\n\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(new MultiPoint([\n      /** @type {PointCoordType} */\n      coordinates]));\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(new MultiLineString([\n      /** @type {LineCoordType} */\n      coordinates]));\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(new MultiPolygon([\n      /** @type {PolyCoordType} */\n      coordinates]));\n    } // First dispatch event to allow full set up of feature\n\n\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature)); // Then insert feature\n\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n\n\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  }\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n\n\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n\n\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n\n\n    let sketchCoords;\n\n    if (mode === 'LineString' || mode === 'Circle') {\n      sketchCoords =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n    } else if (mode === 'Polygon') {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ?\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0] : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    } // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n\n\n    sketchCoords.pop(); // Append coordinate list\n\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    const ending = coordinates[coordinates.length - 1]; // Duplicate last coordinate for sketch drawing (cursor position)\n\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n\n\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n\n\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n  /**\n   * @private\n   */\n\n\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n\n    this.overlay_.setMap(active ? map : null);\n  }\n\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\n\n\nexport function createRegularPolygon(sides, angle) {\n  return function (coordinates, geometry, projection) {\n    const center = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[0], projection);\n    const end = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[coordinates.length - 1], projection);\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    geometry = geometry || fromCircle(new Circle(center), sides);\n    let internalAngle = angle;\n\n    if (!angle && angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      internalAngle = Math.atan2(y, x);\n    }\n\n    makeRegular(\n    /** @type {Polygon} */\n    geometry, center, radius, internalAngle);\n    const userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\n\nexport function createBox() {\n  return function (coordinates, geometry, projection) {\n    const extent = boundingExtent(\n    /** @type {LineCoordType} */\n    [coordinates[0], coordinates[coordinates.length - 1]].map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    const boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n\n    const userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\n\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return 'Point';\n\n    case 'LineString':\n    case 'MultiLineString':\n      return 'LineString';\n\n    case 'Polygon':\n    case 'MultiPolygon':\n      return 'Polygon';\n\n    case 'Circle':\n      return 'Circle';\n\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;","map":{"version":3,"names":["Circle","Event","EventType","Feature","InteractionProperty","LineString","MapBrowserEvent","MapBrowserEventType","MultiLineString","MultiPoint","MultiPolygon","Point","PointerInteraction","Polygon","fromCircle","makeRegular","VectorLayer","VectorSource","FALSE","TRUE","always","noModifierKeys","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createEditingStyle","fromUserCoordinate","getUserProjection","getStrideForLayout","squaredDistance","squaredCoordinateDistance","DrawEventType","DRAWSTART","DRAWEND","DRAWABORT","DrawEvent","constructor","type","feature","Draw","options","pointerOptions","stopDown","on","once","un","shouldHandle_","downPx_","downTimeout_","lastDragTime_","pointerType_","freehand_","source_","source","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryLayout_","geometryLayout","geometryFunction","mode","coordinates","geometry","projection","circle","NaN","center","squaredLength","length","setCenterAndRadius","Math","sqrt","userProjection","transform","Constructor","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","addChangeListener","ACTIVE","updateState_","setMap","map","getOverlay","handleEvent","event","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","pixel","clearTimeout","addToDrawing_","coordinate","POINTERDOWN","getPointerCount","handlePointerMove_","pointerType","DBLCLICK","handleDownEvent","startDrawing_","setTimeout","frameState","bind","handleUpEvent","startingToDraw","finishDrawing","atFinish_","abortDrawing","downPx","clickPx","dx","dy","modifyDrawing_","createOrUpdateSketchPoint_","slice","at","potentiallyDone","potentiallyFinishCoordinates","sketchCoords","getMap","i","ii","finishCoordinate","finishPixel","getPixelFromCoordinate","updateSketchFeatures_","sketchPointGeom","getGeometry","createOrUpdateCustomSketchLine_","ring","getLinearRing","sketchLineGeom","getFlatCoordinates","getLayout","setGeometry","setFlatCoordinates","changed","start","getView","getProjection","stride","push","setGeometryName","dispatchEvent","last","getType","done","pop","removeLastPoint","splice","sketchFeature","abortDrawing_","getCoordinates","addFeature","getSource","clear","appendCoordinates","newDrawing","shift","ending","extend","lineString","sketchFeatures","overlaySource","addFeatures","active","getActive","styles","resolution","createRegularPolygon","sides","angle","end","radius","internalAngle","x","y","atan2","createBox","extent","boxCoordinates","Error"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/interaction/Draw.js"],"sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {always, noModifierKeys, shiftKeyOnly} from '../events/condition.js';\nimport {\n  boundingExtent,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../extent.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromUserCoordinate, getUserProjection} from '../proj.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n */\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    this.pointerType_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */ (\n      options.type\n    );\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints\n      ? options.minPoints\n      : this.mode_ === 'Polygon'\n      ? 3\n      : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ =\n      this.mode_ === 'Circle'\n        ? 2\n        : options.maxPoints\n        ? options.maxPoints\n        : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition\n      ? options.finishCondition\n      : TRUE;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : 'XY';\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      const mode = this.mode_;\n      if (mode === 'Circle') {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          const circle = geometry\n            ? /** @type {Circle} */ (geometry)\n            : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(\n            center,\n            fromUserCoordinate(coordinates[coordinates.length - 1], projection)\n          );\n          circle.setCenterAndRadius(\n            center,\n            Math.sqrt(squaredLength),\n            this.geometryLayout_\n          );\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        if (mode === 'Point') {\n          Constructor = Point;\n        } else if (mode === 'LineString') {\n          Constructor = LineString;\n        } else if (mode === 'Polygon') {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode === 'Polygon') {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates(\n                  [coordinates[0].concat([coordinates[0][0]])],\n                  this.geometryLayout_\n                );\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ =\n      options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance\n      ? options.clickTolerance * options.clickTolerance\n      : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition\n        ? options.freehandCondition\n        : shiftKeyOnly;\n    }\n\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (\n      !this.freehand_ &&\n      this.lastDragTime_ &&\n      event.type === MapBrowserEventType.POINTERDRAG\n    ) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null\n    ) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN\n    ) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (\n        event.originalEvent.pointerType === 'mouse' ||\n        (event.type === MapBrowserEventType.POINTERDRAG &&\n          this.downTimeout_ === undefined)\n      ) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(\n        function () {\n          this.handlePointerMove_(\n            new MapBrowserEvent(\n              MapBrowserEventType.POINTERMOVE,\n              event.map,\n              event.originalEvent,\n              false,\n              event.frameState\n            )\n          );\n        }.bind(this),\n        this.dragVertexDelay_\n      );\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (\n          !this.freehand_ &&\n          (!startingToDraw || this.mode_ === 'Point')\n        ) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (\n      this.downPx_ &&\n      ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))\n    ) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_\n        ? squaredDistance > this.squaredClickTolerance_\n        : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(pixel) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n      if (mode === 'Point') {\n        at = true;\n      } else if (mode === 'Circle') {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === 'LineString') {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === 'Polygon') {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [\n          sketchCoords[0][0],\n          sketchCoords[0][sketchCoords[0].length - 2],\n        ];\n      }\n      if (potentiallyDone) {\n        const map = this.getMap();\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(\n        ring.getFlatCoordinates(),\n        ring.getLayout()\n      );\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(\n        ring.getLayout(),\n        ring.getFlatCoordinates()\n      );\n      sketchLineGeom.changed();\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === 'Point') {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === 'Polygon') {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(\n      this.sketchCoords_,\n      undefined,\n      projection\n    );\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === 'Point') {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n      /** @type {!LineCoordType} */ (this.sketchCoords_),\n      geometry,\n      projection\n    );\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {\n      this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        const finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      this.geometryFunction_(coordinates, geometry, projection);\n      if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n      }\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      if (coordinates.length >= 2) {\n        const finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === 'LineString') {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === 'Polygon') {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(\n        new MultiPoint([/** @type {PointCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(\n        new MultiLineString([/** @type {LineCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(\n        new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)])\n      );\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    let sketchCoords;\n    if (mode === 'LineString' || mode === 'Circle') {\n      sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);\n    } else if (mode === 'Polygon') {\n      sketchCoords =\n        this.sketchCoords_ && this.sketchCoords_.length\n          ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n          : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    const ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(sides, angle) {\n  return function (coordinates, geometry, projection) {\n    const center = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[0],\n      projection\n    );\n    const end = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[coordinates.length - 1],\n      projection\n    );\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    geometry = geometry || fromCircle(new Circle(center), sides);\n\n    let internalAngle = angle;\n    if (!angle && angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      internalAngle = Math.atan2(y, x);\n    }\n    makeRegular(\n      /** @type {Polygon} */ (geometry),\n      center,\n      radius,\n      internalAngle\n    );\n\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, geometry, projection) {\n    const extent = boundingExtent(\n      /** @type {LineCoordType} */ ([\n        coordinates[0],\n        coordinates[coordinates.length - 1],\n      ]).map(function (coordinate) {\n        return fromUserCoordinate(coordinate, projection);\n      })\n    );\n    const boxCoordinates = [\n      [\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent),\n      ],\n    ];\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return 'Point';\n    case 'LineString':\n    case 'MultiLineString':\n      return 'LineString';\n    case 'Polygon':\n    case 'MultiPolygon':\n      return 'Polygon';\n    case 'Circle':\n      return 'Circle';\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}