{"ast":null,"code":"/**\n * @module ol/source/CartoDB\n */\nimport XYZ from './XYZ.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * https://carto.com/developers/maps-api/guides/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\n\nclass CartoDB extends XYZ {\n  /**\n   * @param {Options} options CartoDB options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection\n    });\n    /**\n     * @type {string}\n     * @private\n     */\n\n    this.account_ = options.account;\n    /**\n     * @type {string}\n     * @private\n     */\n\n    this.mapId_ = options.map || '';\n    /**\n     * @type {!Object}\n     * @private\n     */\n\n    this.config_ = options.config || {};\n    /**\n     * @type {!Object<string, CartoDBLayerInfo>}\n     * @private\n     */\n\n    this.templateCache_ = {};\n    this.initializeMap_();\n  }\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n\n\n  getConfig() {\n    return this.config_;\n  }\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n\n\n  updateConfig(config) {\n    Object.assign(this.config_, config);\n    this.initializeMap_();\n  }\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n\n\n  setConfig(config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  }\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n\n\n  initializeMap_() {\n    const paramHash = JSON.stringify(this.config_);\n\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  }\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n\n\n  handleInitResponse_(paramHash, event) {\n    const client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n\n      try {\n        response =\n        /** @type {CartoDBLayerInfo} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.setState('error');\n        return;\n      }\n\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState('ready');\n    } else {\n      this.setState('error');\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n\n\n  handleInitError_(event) {\n    this.setState('error');\n  }\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n\n\n  applyTemplate_(data) {\n    const tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ + '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  }\n\n}\n\nexport default CartoDB;","map":{"version":3,"names":["XYZ","CartoDB","constructor","options","attributions","cacheSize","crossOrigin","maxZoom","undefined","minZoom","projection","transition","wrapX","zDirection","account_","account","mapId_","map","config_","config","templateCache_","initializeMap_","getConfig","updateConfig","Object","assign","setConfig","paramHash","JSON","stringify","applyTemplate_","mapUrl","client","XMLHttpRequest","addEventListener","handleInitResponse_","bind","handleInitError_","open","setRequestHeader","send","event","target","status","response","parse","responseText","err","setState","data","tilesUrl","cdn_url","https","layergroupid","setUrl"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/CartoDB.js"],"sourcesContent":["/**\n * @module ol/source/CartoDB\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * https://carto.com/developers/maps-api/guides/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\nclass CartoDB extends XYZ {\n  /**\n   * @param {Options} options CartoDB options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.account_ = options.account;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.mapId_ = options.map || '';\n\n    /**\n     * @type {!Object}\n     * @private\n     */\n    this.config_ = options.config || {};\n\n    /**\n     * @type {!Object<string, CartoDBLayerInfo>}\n     * @private\n     */\n    this.templateCache_ = {};\n\n    this.initializeMap_();\n  }\n\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n  getConfig() {\n    return this.config_;\n  }\n\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n  updateConfig(config) {\n    Object.assign(this.config_, config);\n    this.initializeMap_();\n  }\n\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n  setConfig(config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  }\n\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n  initializeMap_() {\n    const paramHash = JSON.stringify(this.config_);\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener(\n      'load',\n      this.handleInitResponse_.bind(this, paramHash)\n    );\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  }\n\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n  handleInitResponse_(paramHash, event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {CartoDBLayerInfo} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.setState('error');\n        return;\n      }\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState('ready');\n    } else {\n      this.setState('error');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n  handleInitError_(event) {\n    this.setState('error');\n  }\n\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n  applyTemplate_(data) {\n    const tilesUrl =\n      'https://' +\n      data.cdn_url.https +\n      '/' +\n      this.account_ +\n      '/api/v1/map/' +\n      data.layergroupid +\n      '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  }\n}\n\nexport default CartoDB;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}