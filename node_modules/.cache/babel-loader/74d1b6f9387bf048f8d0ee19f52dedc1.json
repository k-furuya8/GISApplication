{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81806\\\\Documents\\\\work\\\\GIS_APP\\\\gis_app1\\\\src\\\\Map\\\\DrawMap.js\",\n    _s = $RefreshSig$();\n\nimport \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\nimport React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport Tile from \"ol/layer/Tile\";\nimport Vector from \"ol/layer/Vector\";\nimport { fromLonLat } from \"ol/proj\";\nimport Stroke from \"ol/style/Stroke\";\nimport interaction from \"ol/interaction\";\nimport Draw from \"ol/interaction/Draw\";\nimport Source from \"ol/source\";\nimport OSM from \"ol/source/OSM\";\nimport Style from \"ol/style/Style\";\nimport Circle from \"ol/style/Circle\";\nimport Fill from \"ol/style/Fill\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DrawMap = _ref => {\n  _s();\n\n  let {\n    type\n  } = _ref;\n  useEffect(() => {\n    const source = new Vector({\n      wrapX: false\n    });\n    this.polygonBase = new Vector({\n      source\n    });\n    this.context.map.addLayer(this.polygonBase);\n\n    const styleFunction = feature => {\n      var geometry = feature.getGeometry();\n      console.log(\"geometry\", geometry.getType());\n\n      if (geometry.getType() === \"LineString\") {\n        var styles = [new Style({\n          stroke: new Stroke({\n            color: \"rgba(255, 102, 0, 1)\",\n            width: 3\n          })\n        })];\n        return styles;\n      }\n\n      if (geometry.getType() === \"Point\") {\n        var styles = [new Style({\n          image: new Circle({\n            radius: 5,\n            stroke: new Stroke({\n              color: \"rgba(255, 0, 0, 1)\"\n            }),\n            fill: new Fill({\n              color: \"rgba(255, 0, 0, 0.5)\"\n            })\n          })\n        })];\n        return styles;\n      }\n\n      if (geometry.getType() === \"Polygon\") {\n        var styles = [new Style({\n          stroke: new Stroke({\n            color: \"rgba(255, 102, 0, 0)\",\n            width: 3\n          }),\n          fill: new Fill({\n            color: \"rgba(255, 102, 0, 0.3)\"\n          })\n        })];\n        return styles;\n      }\n\n      return false;\n    }; // Define the polygon draw interaction\n\n\n    this.draw = new Draw({\n      source: source,\n      type: {\n        type\n      },\n      style: styleFunction\n    }); // Add the draw interaction\n\n    this.context.map.addInteraction(this.draw);\n    this.draw.on(\"drawstart\", event => {\n      this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"aaa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }, []);\n}; // class DrawMap extends React.Component {\n//     static contextTypes = {\n//       map: PropTypes.object\n//     }\n//     componentDidMount() {\n//         const source = new Vector({wrapX: false});\n//       this.polygonBase = new Vector({ source });\n//       this.context.map.addLayer(this.polygonBase);\n//           const styleFunction = feature => {\n//         var geometry = feature.getGeometry();\n//         console.log('geometry', geometry.getType());\n//         if (geometry.getType() === 'LineString') {\n//           var styles = [\n//             new Style({\n//               stroke: new Stroke({\n//                 color: 'rgba(255, 102, 0, 1)',\n//                 width: 3\n//               })\n//             })\n//           ];\n//           return styles;\n//         }\n//               if (geometry.getType() === 'Point') {\n//           var styles = [\n//             new Style({\n//                           image: new Circle({\n//                     radius: 5,\n//                     stroke: new Stroke({ color: 'rgba(255, 0, 0, 1)' }),\n//                     fill: new Fill({ color: 'rgba(255, 0, 0, 0.5)' })\n//                           })\n//             })\n//           ];\n//           return styles;\n//         }\n//         if (geometry.getType() === 'Polygon') {\n//           var styles = [\n//             new Style({\n//               stroke: new Stroke({\n//                 color: 'rgba(255, 102, 0, 0)',\n//                 width: 3\n//               }),\n//               fill: new Fill({\n//                 color: 'rgba(255, 102, 0, 0.3)'\n//               })\n//             })\n//           ];\n//           return styles;\n//         }\n//         return false;\n//       };\n//       // Define the polygon draw interaction\n//       this.draw = new Draw({\n//         source: source,\n//         type: 'Polygon',\n//               style: styleFunction\n//       });\n//       // Add the draw interaction\n//       this.context.map.addInteraction(this.draw);\n//           this.draw.on('drawstart', event => {\n//               this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n//           });\n//     }\n//     componentWillUnmount () {\n//       this.context.map.removeInteraction(this.draw);\n//     }\n//     render() { return <p>Drawing polygon</p>; }\n//   }\n\n\n_s(DrawMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DrawMap;\nexport default DrawMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawMap\");","map":{"version":3,"names":["React","useEffect","ReactDOM","PropTypes","Map","View","Tile","Vector","fromLonLat","Stroke","interaction","Draw","Source","OSM","Style","Circle","Fill","DrawMap","type","source","wrapX","polygonBase","context","map","addLayer","styleFunction","feature","geometry","getGeometry","console","log","getType","styles","stroke","color","width","image","radius","fill","draw","style","addInteraction","on","event","polygonFirstCoordinate","getFirstCoordinate"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/src/Map/DrawMap.js"],"sourcesContent":["import \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\r\nimport React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport Tile from \"ol/layer/Tile\";\r\nimport Vector from \"ol/layer/Vector\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport Stroke from \"ol/style/Stroke\";\r\nimport interaction from \"ol/interaction\";\r\nimport Draw from \"ol/interaction/Draw\";\r\nimport Source from \"ol/source\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport Style from \"ol/style/Style\";\r\nimport Circle from \"ol/style/Circle\";\r\nimport Fill from \"ol/style/Fill\";\r\n\r\nconst DrawMap = ({ type }) => {\r\n  useEffect(() => {\r\n    const source = new Vector({ wrapX: false });\r\n    this.polygonBase = new Vector({ source });\r\n    this.context.map.addLayer(this.polygonBase);\r\n\r\n    const styleFunction = (feature) => {\r\n      var geometry = feature.getGeometry();\r\n      console.log(\"geometry\", geometry.getType());\r\n      if (geometry.getType() === \"LineString\") {\r\n        var styles = [\r\n          new Style({\r\n            stroke: new Stroke({\r\n              color: \"rgba(255, 102, 0, 1)\",\r\n              width: 3,\r\n            }),\r\n          }),\r\n        ];\r\n        return styles;\r\n      }\r\n      if (geometry.getType() === \"Point\") {\r\n        var styles = [\r\n          new Style({\r\n            image: new Circle({\r\n              radius: 5,\r\n              stroke: new Stroke({ color: \"rgba(255, 0, 0, 1)\" }),\r\n              fill: new Fill({ color: \"rgba(255, 0, 0, 0.5)\" }),\r\n            }),\r\n          }),\r\n        ];\r\n        return styles;\r\n      }\r\n      if (geometry.getType() === \"Polygon\") {\r\n        var styles = [\r\n          new Style({\r\n            stroke: new Stroke({\r\n              color: \"rgba(255, 102, 0, 0)\",\r\n              width: 3,\r\n            }),\r\n            fill: new Fill({\r\n              color: \"rgba(255, 102, 0, 0.3)\",\r\n            }),\r\n          }),\r\n        ];\r\n        return styles;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    // Define the polygon draw interaction\r\n    this.draw = new Draw({\r\n      source: source,\r\n      type: {type},\r\n      style: styleFunction,\r\n    });\r\n    // Add the draw interaction\r\n    this.context.map.addInteraction(this.draw);\r\n\r\n    this.draw.on(\"drawstart\", (event) => {\r\n      this.polygonFirstCoordinate = event.feature\r\n        .getGeometry()\r\n        .getFirstCoordinate();\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <label>aaa</label>\r\n      </div>\r\n    );\r\n  }, []);\r\n};\r\n\r\n// class DrawMap extends React.Component {\r\n//     static contextTypes = {\r\n//       map: PropTypes.object\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         const source = new Vector({wrapX: false});\r\n//       this.polygonBase = new Vector({ source });\r\n//       this.context.map.addLayer(this.polygonBase);\r\n\r\n//           const styleFunction = feature => {\r\n//         var geometry = feature.getGeometry();\r\n//         console.log('geometry', geometry.getType());\r\n//         if (geometry.getType() === 'LineString') {\r\n//           var styles = [\r\n//             new Style({\r\n//               stroke: new Stroke({\r\n//                 color: 'rgba(255, 102, 0, 1)',\r\n//                 width: 3\r\n//               })\r\n//             })\r\n//           ];\r\n//           return styles;\r\n//         }\r\n//               if (geometry.getType() === 'Point') {\r\n//           var styles = [\r\n//             new Style({\r\n//                           image: new Circle({\r\n//                     radius: 5,\r\n//                     stroke: new Stroke({ color: 'rgba(255, 0, 0, 1)' }),\r\n//                     fill: new Fill({ color: 'rgba(255, 0, 0, 0.5)' })\r\n//                           })\r\n//             })\r\n//           ];\r\n//           return styles;\r\n//         }\r\n//         if (geometry.getType() === 'Polygon') {\r\n//           var styles = [\r\n//             new Style({\r\n//               stroke: new Stroke({\r\n//                 color: 'rgba(255, 102, 0, 0)',\r\n//                 width: 3\r\n//               }),\r\n//               fill: new Fill({\r\n//                 color: 'rgba(255, 102, 0, 0.3)'\r\n//               })\r\n//             })\r\n//           ];\r\n//           return styles;\r\n//         }\r\n//         return false;\r\n//       };\r\n\r\n//       // Define the polygon draw interaction\r\n//       this.draw = new Draw({\r\n//         source: source,\r\n//         type: 'Polygon',\r\n//               style: styleFunction\r\n//       });\r\n//       // Add the draw interaction\r\n//       this.context.map.addInteraction(this.draw);\r\n\r\n//           this.draw.on('drawstart', event => {\r\n//               this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\r\n//           });\r\n//     }\r\n\r\n//     componentWillUnmount () {\r\n//       this.context.map.removeInteraction(this.draw);\r\n//     }\r\n\r\n//     render() { return <p>Drawing polygon</p>; }\r\n//   }\r\n\r\nexport default DrawMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}