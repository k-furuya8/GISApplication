{"ast":null,"code":"/**\n * @module ol/webgl/PostProcessingPass\n */\nimport { getUid } from '../util.js';\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\n\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n    this.scaleRatio_ = options.scaleRatio || 1;\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n    this.frameBuffer_ = gl.createFramebuffer(); // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_); // bind the vertices buffer for the frame buffer\n\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(function (name) {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    }.bind(this));\n  }\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n\n\n  getGL() {\n    return this.gl_;\n  }\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @api\n   */\n\n\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_]; // rendering goes to my buffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]); // if size has changed: adjust canvas & render target texture\n\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize; // create a new texture\n\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // bind the texture to the framebuffer\n\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n    }\n  }\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n\n\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n\n\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value; // apply value based on type\n\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        } // fill texture slots\n\n\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n\n}\n\nexport default WebGLPostProcessingPass;","map":{"version":3,"names":["getUid","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","constructor","options","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","Object","keys","forEach","name","push","value","location","bind","getGL","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","level","internalFormat","RGBA","border","format","type","UNSIGNED_BYTE","data","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","preCompose","postCompose","size","activeTexture","TEXTURE0","canvasId","canvas","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","width","height","Uint8Array","Array","isArray","length","uniform3f","uniform4f"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/webgl/PostProcessingPass.js"],"sourcesContent":["/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n\n    this.frameBuffer_ = gl.createFramebuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER\n    );\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW\n    );\n\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position'\n    );\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize'\n    );\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity'\n    );\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image'\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach(\n        function (name) {\n          this.uniforms_.push({\n            value: options.uniforms[name],\n            location: gl.getUniformLocation(this.renderTargetProgram_, name),\n          });\n        }.bind(this)\n      );\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @api\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data)\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3]\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,YAArB;AAEA,MAAMC,qBAAqB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,MAAMC,uBAAuB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,uBAAN,CAA8B;EAC5B;AACF;AACA;EACEC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKC,GAAL,GAAWD,OAAO,CAACE,YAAnB;IACA,MAAMC,EAAE,GAAG,KAAKF,GAAhB;IAEA,KAAKG,WAAL,GAAmBJ,OAAO,CAACK,UAAR,IAAsB,CAAzC;IAEA,KAAKC,oBAAL,GAA4BH,EAAE,CAACI,aAAH,EAA5B;IACA,KAAKC,wBAAL,GAAgC,IAAhC;IAEA,KAAKC,YAAL,GAAoBN,EAAE,CAACO,iBAAH,EAApB,CATmB,CAWnB;IACA;;IACA,MAAMC,YAAY,GAAGR,EAAE,CAACS,YAAH,CAAgBT,EAAE,CAACU,aAAnB,CAArB;IACAV,EAAE,CAACW,YAAH,CACEH,YADF,EAEEX,OAAO,CAACW,YAAR,IAAwBf,qBAF1B;IAIAO,EAAE,CAACY,aAAH,CAAiBJ,YAAjB;IACA,MAAMK,cAAc,GAAGb,EAAE,CAACS,YAAH,CAAgBT,EAAE,CAACc,eAAnB,CAAvB;IACAd,EAAE,CAACW,YAAH,CACEE,cADF,EAEEhB,OAAO,CAACgB,cAAR,IAA0BnB,uBAF5B;IAIA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"},"metadata":{},"sourceType":"module"}