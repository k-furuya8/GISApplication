{"ast":null,"code":"/**\n * @module ol/source/IIIF\n */\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\n\n\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n    let baseUrl = partialOptions.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality = partialOptions.quality || (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n    const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    const supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (supports.includes('regionByPx') || supports.includes('regionByPct')) && (supports.includes('sizeByWh') || supports.includes('sizeByH') || supports.includes('sizeByW') || supports.includes('sizeByPct'));\n    let tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions); // TODO maxScaleFactor might not be a power to 2\n\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n\n      if (zoom > maxZoom) {\n        return;\n      }\n\n      const tileX = tileCoord[1],\n            tileY = tileCoord[2],\n            scale = resolutions[zoom];\n\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n              regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n            regionH = tileHeight * scale,\n            sizeW = tileWidth,\n            sizeH = tileHeight;\n\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage(regionX / width * 100),\n                pctY = formatPercentage(regionY / height * 100),\n                pctW = formatPercentage(regionW / width * 100),\n                pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n                regionHeight = sizes[zoom][1];\n\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n\n    const IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition\n    });\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n\n    this.zDirection = partialOptions.zDirection;\n  }\n\n}\n\nexport default IIIF;","map":{"version":3,"names":["TileGrid","TileImage","CustomTile","DEFAULT_TILE_SIZE","Versions","assert","getTopLeft","toSize","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","constructor","options","partialOptions","baseUrl","url","lastIndexOf","length","version","VERSION2","sizes","size","undefined","Array","isArray","isNaN","width","height","tileSize","tilePixelRatio","format","quality","VERSION1","resolutions","supports","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","includes","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","round","ignoredSizesIndex","resolution","splice","tileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","VERSION3","regionWidth","regionHeight","IiifTileClass","bind","map","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","state","tileClass","transition","zDirection"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/IIIF.js"],"sourcesContent":["/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n\n    let baseUrl = partialOptions.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      60\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality =\n      partialOptions.quality ||\n      (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') ||\n        supports.includes('sizeByH') ||\n        supports.includes('sizeByW') ||\n        supports.includes('sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          supports.includes('regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      })\n    );\n\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\n\nexport default IIIF;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}