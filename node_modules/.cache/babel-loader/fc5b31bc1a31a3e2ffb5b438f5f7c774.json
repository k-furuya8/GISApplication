{"ast":null,"code":"import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n\n        break;\n\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, {\n      returnPixelInterleavedDims: this.planarConfiguration === 1\n    });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n\n}","map":{"version":3,"names":["inflate","Lerc","BaseDecoder","LercParameters","LercAddCompression","LercDecoder","constructor","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","AddCompression","decodeBlock","buffer","None","Deflate","Uint8Array","Error","lercResult","decode","returnPixelInterleavedDims","lercData","pixels"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,eAAnD;AAEA,eAAe,MAAMC,WAAN,SAA0BH,WAA1B,CAAsC;EACnDI,WAAW,CAACC,aAAD,EAAgB;IACzB;IAEA,KAAKC,mBAAL,GAA2B,OAAOD,aAAa,CAACE,mBAArB,KAA6C,WAA7C,GAA2DF,aAAa,CAACE,mBAAzE,GAA+F,CAA1H;IACA,KAAKC,eAAL,GAAuB,OAAOH,aAAa,CAACI,eAArB,KAAyC,WAAzC,GAAuDJ,aAAa,CAACI,eAArE,GAAuF,CAA9G;IAEA,KAAKC,cAAL,GAAsBL,aAAa,CAACJ,cAAd,CAA6BA,cAAc,CAACU,cAA5C,CAAtB;EACD;;EAEDC,WAAW,CAACC,MAAD,EAAS;IAClB,QAAQ,KAAKH,cAAb;MACE,KAAKR,kBAAkB,CAACY,IAAxB;QACE;;MACF,KAAKZ,kBAAkB,CAACa,OAAxB;QACEF,MAAM,GAAGf,OAAO,CAAC,IAAIkB,UAAJ,CAAeH,MAAf,CAAD,CAAP,CAAgCA,MAAzC,CADF,CACmD;;QACjD;;MACF;QACE,MAAM,IAAII,KAAJ,CAAW,8DAA6D,KAAKP,cAAe,EAA5F,CAAN;IAPJ;;IAUA,MAAMQ,UAAU,GAAGnB,IAAI,CAACoB,MAAL,CAAYN,MAAZ,EAAoB;MAAEO,0BAA0B,EAAE,KAAKd,mBAAL,KAA6B;IAA3D,CAApB,CAAnB;IACA,MAAMe,QAAQ,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAAlB,CAAjB;IACA,OAAOD,QAAQ,CAACR,MAAhB;EACD;;AAxBkD"},"metadata":{},"sourceType":"module"}