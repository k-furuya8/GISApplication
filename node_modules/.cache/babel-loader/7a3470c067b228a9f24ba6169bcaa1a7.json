{"ast":null,"code":"/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\n\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `layout` and no\n   *     `radius` are also accepted.\n   * @param {number} [radius] Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(center, radius, layout) {\n    super();\n\n    if (layout !== undefined && radius === undefined) {\n      this.setFlatCoordinates(layout, center);\n    } else {\n      radius = radius ? radius : 0;\n      this.setCenterAndRadius(center, radius, layout);\n    }\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n\n\n  clone() {\n    const circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n    circle.applyProperties(this);\n    return circle;\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n\n\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n  }\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n\n\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  getType() {\n    return 'Circle';\n  }\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n\n    return false;\n  }\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n\n\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n\n\n  setCenterAndRadius(center, radius, layout) {\n    this.setLayout(layout, center, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n\n\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  getCoordinates() {\n    return null;\n  }\n\n  setCoordinates(coordinates, layout) {}\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n\n\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n    this.changed();\n  }\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  translate(deltaX, deltaY) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n    this.changed();\n  }\n\n}\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\n\n\nCircle.prototype.transform;\nexport default Circle;","map":{"version":3,"names":["SimpleGeometry","createOrUpdate","forEachCorner","intersects","deflateCoordinate","rotate","translate","Circle","constructor","center","radius","layout","undefined","setFlatCoordinates","setCenterAndRadius","clone","circle","flatCoordinates","slice","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","dx","dy","squaredDistance","i","stride","delta","getRadius","Math","sqrt","length","containsXY","getRadiusSquared_","getCenter","computeExtent","extent","getType","intersectsExtent","circleExtent","getExtent","intersectsCoordinate","bind","setCenter","changed","setLayout","offset","ii","getCoordinates","setCoordinates","coordinates","setRadius","angle","anchor","getStride","deltaX","deltaY","prototype","transform"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/geom/Circle.js"],"sourcesContent":["/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {rotate, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `layout` and no\n   *     `radius` are also accepted.\n   * @param {number} [radius] Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(center, radius, layout) {\n    super();\n    if (layout !== undefined && radius === undefined) {\n      this.setFlatCoordinates(layout, center);\n    } else {\n      radius = radius ? radius : 0;\n      this.setCenterAndRadius(center, radius, layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n  clone() {\n    const circle = new Circle(\n      this.flatCoordinates.slice(),\n      undefined,\n      this.layout\n    );\n    circle.applyProperties(this);\n    return circle;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius,\n      flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius,\n      flatCoordinates[1] + radius,\n      extent\n    );\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Circle';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, layout) {\n    this.setLayout(layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  getCoordinates() {\n    return null;\n  }\n\n  setCoordinates(coordinates, layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      rotate(center, 0, center.length, stride, angle, anchor, center)\n    );\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      translate(center, 0, center.length, stride, deltaX, deltaY, center)\n    );\n    this.changed();\n  }\n}\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}