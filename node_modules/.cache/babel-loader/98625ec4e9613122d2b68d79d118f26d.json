{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport const HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\n\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  const featureCount = features.length; // Stretch hit detection index to use the whole available color range\n\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n\n    if (!styleFunction) {\n      continue;\n    }\n\n    let styles = featureStyleFunction(feature, resolution);\n\n    if (!styles) {\n      continue;\n    }\n\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n\n    const index = i * indexFactor;\n    const color = '#' + ('000000' + index.toString(16)).slice(-6);\n\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n\n      if (fill) {\n        fill.setColor(color);\n      }\n\n      const stroke = style.getStroke();\n\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: 'pixels',\n          anchorYUnits: 'pixels',\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n\n      byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);\n\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\n\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION); // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n\n    const index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n\n  return resultFeatures;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","Icon","clamp","createCanvasContext2D","intersects","numberSafeCompareFunction","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","slice","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","getOpacity","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","getType","replace","push","zIndexKeys","Object","keys","map","Number","sort","ii","type","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/render/canvas/hitdetect.js"],"sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport {Icon} from '../../style.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {intersects} from '../../extent.js';\nimport {numberSafeCompareFunction} from '../../array.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation\n) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = '#' + ('000000' + index.toString(16)).slice(-6);\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false}\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            imgSize: imgSize,\n            anchor: image.getAnchor(),\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          })\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      byGeometryType[geometry.getType().replace('Multi', '')].push(\n        geometry,\n        style\n      );\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex)\n    .map(Number)\n    .sort(numberSafeCompareFunction);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}