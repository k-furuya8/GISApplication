{"ast":null,"code":"/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nconst canvasPool = [];\n\nclass VectorRenderTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\n    super(tileCoord, state, {\n      transition: 0\n    });\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n\n    this.context_ = {};\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    this.executorGroups = {};\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    this.declutterExecutorGroups = {};\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n\n    this.loadingSourceTiles = 0;\n    /**\n     * @type {Object<number, ImageData>}\n     */\n\n    this.hitDetectionImageData = {};\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n\n    this.replayState_ = {};\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n\n    this.sourceTiles = [];\n    /**\n     * @type {Object<string, boolean>}\n     */\n\n    this.errorTileKeys = {};\n    /**\n     * @type {number}\n     */\n\n    this.wantedResolution;\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n\n    this.wrappedTileCoord = urlTileCoord;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n\n\n  getContext(layer) {\n    const key = getUid(layer);\n\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n\n    return this.context_[key];\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n\n\n  hasContext(layer) {\n    return getUid(layer) in this.context_;\n  }\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n\n\n  getImage(layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n\n\n  getReplayState(layer) {\n    const key = getUid(layer);\n\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n\n    return this.replayState_[key];\n  }\n  /**\n   * Load the tile.\n   */\n\n\n  load() {\n    this.getSourceTiles();\n  }\n  /**\n   * Remove from the cache due to expiry\n   */\n\n\n  release() {\n    for (const key in this.context_) {\n      const context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n\n    super.release();\n  }\n\n}\n\nexport default VectorRenderTile;","map":{"version":3,"names":["Tile","createCanvasContext2D","releaseCanvas","getUid","canvasPool","VectorRenderTile","constructor","tileCoord","state","urlTileCoord","getSourceTiles","transition","context_","executorGroups","declutterExecutorGroups","loadingSourceTiles","hitDetectionImageData","replayState_","sourceTiles","errorTileKeys","wantedResolution","bind","undefined","wrappedTileCoord","getContext","layer","key","hasContext","getImage","canvas","getReplayState","dirty","renderedRenderOrder","renderedResolution","NaN","renderedRevision","renderedTileResolution","renderedTileRevision","renderedTileZ","load","release","context","push"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/VectorRenderTile.js"],"sourcesContent":["/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getUid} from './util.js';\n\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nconst canvasPool = [];\n\nclass VectorRenderTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\n    super(tileCoord, state, {transition: 0});\n\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n    this.context_ = {};\n\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    this.executorGroups = {};\n\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    this.declutterExecutorGroups = {};\n\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n    this.loadingSourceTiles = 0;\n\n    /**\n     * @type {Object<number, ImageData>}\n     */\n    this.hitDetectionImageData = {};\n\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n    this.replayState_ = {};\n\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n    this.sourceTiles = [];\n\n    /**\n     * @type {Object<string, boolean>}\n     */\n    this.errorTileKeys = {};\n\n    /**\n     * @type {number}\n     */\n    this.wantedResolution;\n\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord = urlTileCoord;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n  getContext(layer) {\n    const key = getUid(layer);\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n    return this.context_[key];\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n  hasContext(layer) {\n    return getUid(layer) in this.context_;\n  }\n\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage(layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n  getReplayState(layer) {\n    const key = getUid(layer);\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1,\n      };\n    }\n    return this.replayState_[key];\n  }\n\n  /**\n   * Load the tile.\n   */\n  load() {\n    this.getSourceTiles();\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   */\n  release() {\n    for (const key in this.context_) {\n      const context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n    super.release();\n  }\n}\n\nexport default VectorRenderTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}