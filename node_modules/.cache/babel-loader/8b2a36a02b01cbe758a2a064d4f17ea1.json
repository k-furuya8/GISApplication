{"ast":null,"code":"/**\n * @module ol/source/ImageArcGISRest\n */\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  getParams() {\n    return this.params_;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    const image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    Object.assign(params, this.params_);\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n\n    if (this.ratio_ != 1) {\n      const halfWidth = this.ratio_ * getWidth(extent) / 2;\n      const halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio; // Compute an integer width and height.\n\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution); // Modify the extent to match the integer width and height.\n\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n    const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  }\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n    const url = this.url_;\n    const modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n\n    return appendParams(modifiedUrl, params);\n  }\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  getUrl() {\n    return this.url_;\n  }\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n\n}\n\nexport default ImageArcGISRest;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assert","containsExtent","getHeight","getWidth","ImageArcGISRest","constructor","options","attributions","interpolate","projection","resolutions","crossOrigin_","crossOrigin","undefined","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","Object","assign","slice","centerX","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/ImageArcGISRest.js"],"sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, this.params_);\n\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - (imageResolution * width) / 2;\n    extent[2] = centerX + (imageResolution * width) / 2;\n    extent[1] = centerY - (imageResolution * height) / 2;\n    extent[3] = centerY + (imageResolution * height) / 2;\n\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n\n    const url = this.getRequestUrl_(\n      extent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      extent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection\n      .getCode()\n      .split(/:(?=\\d+$)/)\n      .pop();\n\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n\n    const url = this.url_;\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}