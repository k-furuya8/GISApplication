{"ast":null,"code":"/**\n * @module ol/source/WMTS\n */\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { containsExtent } from '../extent.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { equivalent, get as getProjection, transformExtent } from '../proj.js';\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\n\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n    const requestEncoding = options.requestEncoding !== undefined ? options.requestEncoding : 'KVP'; // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n\n    const tileGrid = options.tileGrid;\n    let urls = options.urls;\n\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.layer_ = options.layer;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.matrixSet_ = options.matrixSet;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.style_ = options.style; // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n\n    this.requestEncoding_ = requestEncoding;\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this)));\n    }\n  }\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n\n\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n  }\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n\n\n  getDimensions() {\n    return this.dimensions_;\n  }\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n\n\n  getFormat() {\n    return this.format_;\n  }\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n\n\n  getLayer() {\n    return this.layer_;\n  }\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n\n\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n\n\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n\n\n  getStyle() {\n    return this.style_;\n  }\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n\n\n  getVersion() {\n    return this.version_;\n  }\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n\n\n  getKeyForDimensions_() {\n    let i = 0;\n    const res = [];\n\n    for (const key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n\n    return res.join('/');\n  }\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n\n\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n\n\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_; // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_\n      });\n    } // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n\n    template = requestEncoding == 'KVP' ? appendParams(template, context) : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n    });\n    const tileGrid =\n    /** @type {import(\"../tilegrid/WMTS.js\").default} */\n    this.tileGrid;\n    const dimensions = this.dimensions_;\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          const localContext = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2]\n          };\n          Object.assign(localContext, dimensions);\n          let url = template;\n\n          if (requestEncoding == 'KVP') {\n            url = appendParams(url, localContext);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n\n          return url;\n        }\n      }\n    );\n  }\n\n}\n\nexport default WMTS;\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\n\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n\n  if (!l) {\n    return null;\n  }\n\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n\n  if (idx < 0) {\n    idx = 0;\n  }\n\n  const matrixSet =\n  /** @type {string} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n  const matrixLimits =\n  /** @type {Array<Object>} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n  let format =\n  /** @type {string} */\n  l['Format'][0];\n\n  if ('format' in config) {\n    format = config['format'];\n  }\n\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n\n  if (idx < 0) {\n    idx = 0;\n  }\n\n  const style =\n  /** @type {string} */\n  l['Style'][idx]['Identifier'];\n  const dimensions = {};\n\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n\n  if (code) {\n    projection = getProjection(code);\n  }\n\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  let matrix = matrixSetObj.TileMatrix[0]; // create default matrixLimit\n\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1\n  }; //in case of matrix limits, use matrix limits to calculate extent\n\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(tileMatrixValue => tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix);\n\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n\n  const origin = switchXY ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]] : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [matrixSetExtent[1], matrixSetExtent[0], matrixSetExtent[3], matrixSetExtent[2]];\n  }\n\n  let extent = [origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol, // add one to get proper bottom/right coordinate\n  origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow), origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol), origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow];\n\n  if (matrixSetExtent !== undefined && !containsExtent(matrixSetExtent, extent)) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n\n    if (wgs84BoundingBox) {\n      wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(matrixSetExtent, matrixSetObj['SupportedCRS'], 'EPSG:4326'); // Ignore slight deviation from the correct x limits\n\n      wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n  /** @type {!Array<string>} */\n\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(\n            /** @type {string} */\n            gets[i]['href']);\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(\n        /** @type {string} */\n        gets[i]['href']);\n      }\n    }\n  }\n\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(\n        /** @type {string} */\n        element['template']);\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin']\n  };\n}","map":{"version":3,"names":["TileImage","appendParams","containsExtent","createFromCapabilitiesMatrixSet","createFromTileUrlFunctions","expandUrl","equivalent","get","getProjection","transformExtent","WMTS","constructor","options","requestEncoding","undefined","tileGrid","urls","url","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","matrixSet","style_","style","requestEncoding_","setKey","getKeyForDimensions_","length","tileUrlFunction","map","createFromWMTSTemplate","bind","setUrls","key","join","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","i","res","updateDimensions","Object","assign","template","context","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext","getMatrixId","optionsFromCapabilities","wmtsCap","config","layers","l","find","elt","tileMatrixSets","idx","findIndex","tileMatrixSet","el","supportedCRS","proj1","proj2","matrixLimits","forEach","index","array","value","matrixSets","matrixSetObj","code","projConfig","switchXY","getAxisOrientation","substr","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","tileMatrixValue","Identifier","resolution","ScaleDenominator","getMetersPerUnit","origin","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","matrixSetExtent","extent","wgs84BoundingBox","wgs84ProjectionExtent","getExtent","wgs84MatrixSetExtent","gets","ii","constraint","element","encodings","includes","push"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/WMTS.js"],"sourcesContent":["/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {containsExtent} from '../extent.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          const localContext = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2],\n          };\n          Object.assign(localContext, dimensions);\n          let url = template;\n          if (requestEncoding == 'KVP') {\n            url = appendParams(url, localContext);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n          return url;\n        }\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326'\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}