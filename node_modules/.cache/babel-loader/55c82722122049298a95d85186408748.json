{"ast":null,"code":"/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { create as createTransform } from '../transform.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nimport { getUid } from '../util.js';\nlet hasImageData = true;\n\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n/** @type {CanvasRenderingContext2D} */\n\n\nlet context;\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\n\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  }\n\n  if (!context) {\n    context = document.createElement('canvas').getContext('2d');\n  }\n\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  return imageData;\n}\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\n\nfunction createMinion(operation) {\n  let workerHasImageData = true;\n\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {\n        data: data,\n        width: width,\n        height: height\n      };\n    }\n  }\n\n  return function (data) {\n    // bracket notation for minification support\n    const buffers = data['buffers'];\n    const meta = data['meta'];\n    const imageOps = data['imageOps'];\n    const width = data['width'];\n    const height = data['height'];\n    const numBuffers = buffers.length;\n    const numBytes = buffers[0].byteLength;\n\n    if (imageOps) {\n      const images = new Array(numBuffers);\n\n      for (let b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n      }\n\n      const output = operation(images, meta).data;\n      return output.buffer;\n    }\n\n    const output = new Uint8ClampedArray(numBytes);\n    const arrays = new Array(numBuffers);\n    const pixels = new Array(numBuffers);\n\n    for (let b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n\n    for (let i = 0; i < numBytes; i += 4) {\n      for (let j = 0; j < numBuffers; ++j) {\n        const array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n\n      const pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n\n    return output.buffer;\n  };\n}\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\n\n\nfunction createWorker(config, onMessage) {\n  const lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n  const lines = lib.concat(['const __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');', 'self.addEventListener(\"message\", function(event) {', '  const buffer = __minion__(event.data);', '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);', '});']);\n  const worker = new Worker(typeof Blob === 'undefined' ? 'data:text/javascript;base64,' + Buffer.from(lines.join('\\n'), 'binary').toString('base64') : URL.createObjectURL(new Blob(lines, {\n    type: 'text/javascript'\n  })));\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\n\n\nfunction createFauxWorker(config, onMessage) {\n  const minion = createMinion(config.operation);\n  let terminated = false;\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n\n        onMessage({\n          data: {\n            buffer: minion(data),\n            meta: data['meta']\n          }\n        });\n      }, 0);\n    },\n    terminate: function () {\n      terminated = true;\n    }\n  };\n}\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\n\n\nexport class Processor extends Disposable {\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  constructor(config) {\n    super();\n    this._imageOps = !!config.imageOps;\n    let threads;\n\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n    /**\n     * @type {Array<Worker>}\n     */\n\n\n    const workers = new Array(threads);\n\n    if (threads) {\n      for (let i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(config, this._onWorkerMessage.bind(this, 0));\n    }\n\n    this._workers = workers;\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n\n    this._queue = [];\n    this._maxQueueLength = config.queue || Infinity;\n    this._running = 0;\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n\n    this._dataLookup = {};\n    /**\n     * @type {Job}\n     * @private\n     */\n\n    this._job = null;\n  }\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n\n\n  process(inputs, meta, callback) {\n    this._enqueue({\n      inputs: inputs,\n      meta: meta,\n      callback: callback\n    });\n\n    this._dispatch();\n  }\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n\n\n  _enqueue(job) {\n    this._queue.push(job);\n\n    while (this._queue.length > this._maxQueueLength) {\n      this._queue.shift().callback(null, null);\n    }\n  }\n  /**\n   * Dispatch a job.\n   */\n\n\n  _dispatch() {\n    if (this._running || this._queue.length === 0) {\n      return;\n    }\n\n    const job = this._queue.shift();\n\n    this._job = job;\n    const width = job.inputs[0].width;\n    const height = job.inputs[0].height;\n    const buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    const threads = this._workers.length;\n    this._running = threads;\n\n    if (threads === 1) {\n      this._workers[0].postMessage({\n        buffers: buffers,\n        meta: job.meta,\n        imageOps: this._imageOps,\n        width: width,\n        height: height\n      }, buffers);\n\n      return;\n    }\n\n    const length = job.inputs[0].data.length;\n    const segmentLength = 4 * Math.ceil(length / 4 / threads);\n\n    for (let i = 0; i < threads; ++i) {\n      const offset = i * segmentLength;\n      const slices = [];\n\n      for (let j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n\n      this._workers[i].postMessage({\n        buffers: slices,\n        meta: job.meta,\n        imageOps: this._imageOps,\n        width: width,\n        height: height\n      }, slices);\n    }\n  }\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n\n\n  _onWorkerMessage(index, event) {\n    if (this.disposed) {\n      return;\n    }\n\n    this._dataLookup[index] = event.data;\n    --this._running;\n\n    if (this._running === 0) {\n      this._resolveJob();\n    }\n  }\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n\n\n  _resolveJob() {\n    const job = this._job;\n    const threads = this._workers.length;\n    let data, meta;\n\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n      meta = this._dataLookup[0]['meta'];\n    } else {\n      const length = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length);\n      meta = new Array(threads);\n      const segmentLength = 4 * Math.ceil(length / 4 / threads);\n\n      for (let i = 0; i < threads; ++i) {\n        const buffer = this._dataLookup[i]['buffer'];\n        const offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this._dataLookup[i]['meta'];\n      }\n    }\n\n    this._job = null;\n    this._dataLookup = {};\n    job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n\n    this._dispatch();\n  }\n  /**\n   * Terminate all workers associated with the processor.\n   */\n\n\n  disposeInternal() {\n    for (let i = 0; i < this._workers.length; ++i) {\n      this._workers[i].terminate();\n    }\n\n    this._workers.length = 0;\n  }\n\n}\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\n\nconst RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * @typedef {'pixel' | 'image'} RasterOperationType\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n */\n\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\n\nexport class RasterSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  constructor(type, frameState, data) {\n    super(type);\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n\n    this.extent = frameState.extent;\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n\n    this.data = data;\n  }\n\n}\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\n\nclass RasterSource extends ImageSource {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      projection: null\n    });\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @private\n     * @type {Processor}\n     */\n\n    this.processor_ = null;\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n\n    this.operationType_ = options.operationType !== undefined ? options.operationType : 'pixel';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n\n    this.layers_ = createLayers(options.sources);\n    const changed = this.changed.bind(this);\n\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n\n\n    this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, this.changed.bind(this));\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../Map.js\").FrameState}\n     * @private\n     */\n\n    this.requestedFrameState_;\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n\n    this.renderedImageCanvas_ = null;\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n\n    this.renderedRevision_;\n    /**\n     * @private\n     * @type {import(\"../Map.js\").FrameState}\n     */\n\n    this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutterTree: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState:\n      /** @type {import(\"../View.js\").State} */\n      {\n        rotation: 0\n      },\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(this),\n      renderTargets: {}\n    };\n    this.setAttributions(function (frameState) {\n      const attributions = [];\n\n      for (let index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        const sourceOrLayer = options.sources[index];\n        const source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n        const attributionGetter = source.getAttributions();\n\n        if (typeof attributionGetter === 'function') {\n          const sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n\n      return attributions.length !== 0 ? attributions : null;\n    });\n\n    if (options.operation !== undefined) {\n      this.setOperation(options.operation, options.lib);\n    }\n  }\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n\n\n  setOperation(operation, lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === 'image',\n      queue: 1,\n      lib: lib,\n      threads: this.threads_\n    });\n    this.changed();\n  }\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../Map.js\").FrameState} The updated frame state.\n   * @private\n   */\n\n\n  updateFrameState_(extent, resolution, projection) {\n    const frameState =\n    /** @type {import(\"../Map.js\").FrameState} */\n    Object.assign({}, this.frameState_);\n    frameState.viewState =\n    /** @type {import(\"../View.js\").State} */\n    Object.assign({}, frameState.viewState);\n    const center = getCenter(extent);\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Date.now();\n    const viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  }\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n\n\n  allSourcesReady_() {\n    let ready = true;\n    let source;\n\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n\n      if (source.getState() !== 'ready') {\n        ready = false;\n        break;\n      }\n    }\n\n    return ready;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n\n\n  getImage(extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    const frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState; // check if we can't reuse the existing ol/ImageCanvas\n\n    if (this.renderedImageCanvas_) {\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\n\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n\n    frameState.tileQueue.loadMoreTiles(16, 16);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  }\n  /**\n   * Start processing source data.\n   * @private\n   */\n\n\n  processSources_() {\n    const frameState = this.requestedFrameState_;\n    const len = this.layers_.length;\n    const imageDatas = new Array(len);\n\n    for (let i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      const imageData = getImageData(this.layers_[i], frameState);\n\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    const data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.processor_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  }\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n\n\n  onWorkerComplete_(frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    } // do nothing if extent or resolution changed\n\n\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n\n    if (resolution !== this.requestedFrameState_.viewState.resolution || !equals(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n\n    let context;\n\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      const width = Math.round(getWidth(extent) / resolution);\n      const height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n    }\n\n    context.putImageData(output, 0, 0);\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n  }\n\n  disposeInternal() {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    super.disposeInternal();\n  }\n\n}\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\n\n\nRasterSource.prototype.dispose;\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\nlet sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\n\nfunction getImageData(layer, frameState) {\n  const renderer = layer.getRenderer();\n\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n\n  const width = frameState.size[0];\n  const height = frameState.size[1];\n\n  if (width === 0 || height === 0) {\n    return null;\n  }\n\n  const container = renderer.renderFrame(frameState, null);\n  let element;\n\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n\n    if (element.width === width && element.height === height) {\n      const context = element.getContext('2d');\n      return context.getImageData(0, 0, width, height);\n    }\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    const canvas = sharedContext.canvas;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\n\n\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\n\n\nfunction createLayers(sources) {\n  const len = sources.length;\n  const layers = new Array(len);\n\n  for (let i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n\n  return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\n\n\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  let layer;\n\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({\n        source: layerOrSource\n      });\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({\n        source: layerOrSource\n      });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n\n  return layer;\n}\n\nexport default RasterSource;","map":{"version":3,"names":["Disposable","Event","EventType","ImageCanvas","ImageLayer","ImageSource","Source","TileLayer","TileQueue","TileSource","createCanvasContext2D","create","createTransform","equals","getCenter","getHeight","getWidth","getUid","hasImageData","ImageData","_","context","newImageData","data","width","height","document","createElement","getContext","imageData","createImageData","set","createMinion","operation","workerHasImageData","newWorkerImageData","buffers","meta","imageOps","numBuffers","length","numBytes","byteLength","images","Array","b","Uint8ClampedArray","output","buffer","arrays","pixels","i","j","array","pixel","createWorker","config","onMessage","lib","Object","keys","map","name","toString","lines","concat","worker","Worker","Blob","Buffer","from","join","URL","createObjectURL","type","addEventListener","createFauxWorker","minion","terminated","postMessage","setTimeout","terminate","Processor","constructor","_imageOps","threads","workers","_onWorkerMessage","bind","_workers","_queue","_maxQueueLength","queue","Infinity","_running","_dataLookup","_job","process","inputs","callback","_enqueue","_dispatch","job","push","shift","input","segmentLength","Math","ceil","offset","slices","jj","slice","index","event","disposed","_resolveJob","disposeInternal","RasterEventType","BEFOREOPERATIONS","AFTEROPERATIONS","RasterSourceEvent","frameState","extent","resolution","viewState","pixelRatio","RasterSource","options","projection","on","once","un","processor_","operationType_","operationType","undefined","threads_","layers_","createLayers","sources","changed","ii","CHANGE","tileQueue_","requestedFrameState_","renderedImageCanvas_","renderedRevision_","frameState_","animate","coordinateToPixelTransform","declutterTree","layerIndex","layerStatesArray","getLayerStatesArray","pixelToCoordinateTransform","postRenderFunctions","size","tileQueue","time","Date","now","usedTiles","rotation","viewHints","wantedTiles","mapId","renderTargets","setAttributions","attributions","iMax","sourceOrLayer","source","getSource","attributionGetter","getAttributions","sourceAttribution","apply","setOperation","dispose","updateFrameState_","assign","center","round","allSourcesReady_","ready","getState","getImage","renderedResolution","getResolution","renderedExtent","getExtent","getRevision","processSources_","loadMoreTiles","requestAnimationFrame","len","imageDatas","getImageData","dispatchEvent","onWorkerComplete_","err","canvas","putImageData","prototype","sharedContext","layer","renderer","getRenderer","Error","prepareFrame","container","renderFrame","element","HTMLCanvasElement","firstElementChild","clearRect","drawImage","layers","getLayerState","createLayer","layerOrSource"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/Raster.js"],"sourcesContent":["/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {create as createTransform} from '../transform.js';\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\nimport {getUid} from '../util.js';\n\nlet hasImageData = true;\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n\n/** @type {CanvasRenderingContext2D} */\nlet context;\n\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  }\n\n  if (!context) {\n    context = document.createElement('canvas').getContext('2d');\n  }\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  return imageData;\n}\n\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  let workerHasImageData = true;\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {data: data, width: width, height: height};\n    }\n  }\n\n  return function (data) {\n    // bracket notation for minification support\n    const buffers = data['buffers'];\n    const meta = data['meta'];\n    const imageOps = data['imageOps'];\n    const width = data['width'];\n    const height = data['height'];\n\n    const numBuffers = buffers.length;\n    const numBytes = buffers[0].byteLength;\n\n    if (imageOps) {\n      const images = new Array(numBuffers);\n      for (let b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(\n          new Uint8ClampedArray(buffers[b]),\n          width,\n          height\n        );\n      }\n      const output = operation(images, meta).data;\n      return output.buffer;\n    }\n\n    const output = new Uint8ClampedArray(numBytes);\n    const arrays = new Array(numBuffers);\n    const pixels = new Array(numBuffers);\n    for (let b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n    for (let i = 0; i < numBytes; i += 4) {\n      for (let j = 0; j < numBuffers; ++j) {\n        const array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n      const pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  const lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n\n  const lines = lib.concat([\n    'const __minion__ = (' + createMinion.toString() + ')(',\n    config.operation.toString(),\n    ');',\n    'self.addEventListener(\"message\", function(event) {',\n    '  const buffer = __minion__(event.data);',\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n    '});',\n  ]);\n\n  const worker = new Worker(\n    typeof Blob === 'undefined'\n      ? 'data:text/javascript;base64,' +\n        Buffer.from(lines.join('\\n'), 'binary').toString('base64')\n      : URL.createObjectURL(new Blob(lines, {type: 'text/javascript'}))\n  );\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  const minion = createMinion(config.operation);\n  let terminated = false;\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n        onMessage({data: {buffer: minion(data), meta: data['meta']}});\n      }, 0);\n    },\n    terminate: function () {\n      terminated = true;\n    },\n  };\n}\n\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nexport class Processor extends Disposable {\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  constructor(config) {\n    super();\n\n    this._imageOps = !!config.imageOps;\n    let threads;\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n\n    /**\n     * @type {Array<Worker>}\n     */\n    const workers = new Array(threads);\n    if (threads) {\n      for (let i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(\n        config,\n        this._onWorkerMessage.bind(this, 0)\n      );\n    }\n    this._workers = workers;\n\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n    this._queue = [];\n\n    this._maxQueueLength = config.queue || Infinity;\n    this._running = 0;\n\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n    this._dataLookup = {};\n\n    /**\n     * @type {Job}\n     * @private\n     */\n    this._job = null;\n  }\n\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n  process(inputs, meta, callback) {\n    this._enqueue({\n      inputs: inputs,\n      meta: meta,\n      callback: callback,\n    });\n    this._dispatch();\n  }\n\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n  _enqueue(job) {\n    this._queue.push(job);\n    while (this._queue.length > this._maxQueueLength) {\n      this._queue.shift().callback(null, null);\n    }\n  }\n\n  /**\n   * Dispatch a job.\n   */\n  _dispatch() {\n    if (this._running || this._queue.length === 0) {\n      return;\n    }\n\n    const job = this._queue.shift();\n    this._job = job;\n    const width = job.inputs[0].width;\n    const height = job.inputs[0].height;\n    const buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    const threads = this._workers.length;\n    this._running = threads;\n    if (threads === 1) {\n      this._workers[0].postMessage(\n        {\n          buffers: buffers,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height,\n        },\n        buffers\n      );\n      return;\n    }\n\n    const length = job.inputs[0].data.length;\n    const segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (let i = 0; i < threads; ++i) {\n      const offset = i * segmentLength;\n      const slices = [];\n      for (let j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n      this._workers[i].postMessage(\n        {\n          buffers: slices,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height,\n        },\n        slices\n      );\n    }\n  }\n\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n  _onWorkerMessage(index, event) {\n    if (this.disposed) {\n      return;\n    }\n    this._dataLookup[index] = event.data;\n    --this._running;\n    if (this._running === 0) {\n      this._resolveJob();\n    }\n  }\n\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n  _resolveJob() {\n    const job = this._job;\n    const threads = this._workers.length;\n    let data, meta;\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n      meta = this._dataLookup[0]['meta'];\n    } else {\n      const length = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length);\n      meta = new Array(threads);\n      const segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (let i = 0; i < threads; ++i) {\n        const buffer = this._dataLookup[i]['buffer'];\n        const offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this._dataLookup[i]['meta'];\n      }\n    }\n    this._job = null;\n    this._dataLookup = {};\n    job.callback(\n      null,\n      newImageData(data, job.inputs[0].width, job.inputs[0].height),\n      meta\n    );\n    this._dispatch();\n  }\n\n  /**\n   * Terminate all workers associated with the processor.\n   */\n  disposeInternal() {\n    for (let i = 0; i < this._workers.length; ++i) {\n      this._workers[i].terminate();\n    }\n    this._workers.length = 0;\n  }\n}\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\nconst RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations',\n};\n\n/**\n * @typedef {'pixel' | 'image'} RasterOperationType\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n */\n\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\nexport class RasterSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  constructor(type, frameState, data) {\n    super(type);\n\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = frameState.extent;\n\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    this.data = data;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nclass RasterSource extends ImageSource {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      projection: null,\n    });\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Processor}\n     */\n    this.processor_ = null;\n\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    this.operationType_ =\n      options.operationType !== undefined ? options.operationType : 'pixel';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\n\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    this.layers_ = createLayers(options.sources);\n\n    const changed = this.changed.bind(this);\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, this.changed.bind(this));\n\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../Map.js\").FrameState}\n     * @private\n     */\n    this.requestedFrameState_;\n\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    this.renderedImageCanvas_ = null;\n\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n    this.renderedRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").FrameState}\n     */\n    this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutterTree: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: /** @type {import(\"../View.js\").State} */ ({\n        rotation: 0,\n      }),\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(this),\n      renderTargets: {},\n    };\n\n    this.setAttributions(function (frameState) {\n      const attributions = [];\n      for (\n        let index = 0, iMax = options.sources.length;\n        index < iMax;\n        ++index\n      ) {\n        const sourceOrLayer = options.sources[index];\n        const source =\n          sourceOrLayer instanceof Source\n            ? sourceOrLayer\n            : sourceOrLayer.getSource();\n        const attributionGetter = source.getAttributions();\n        if (typeof attributionGetter === 'function') {\n          const sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n      return attributions.length !== 0 ? attributions : null;\n    });\n\n    if (options.operation !== undefined) {\n      this.setOperation(options.operation, options.lib);\n    }\n  }\n\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  setOperation(operation, lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === 'image',\n      queue: 1,\n      lib: lib,\n      threads: this.threads_,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../Map.js\").FrameState} The updated frame state.\n   * @private\n   */\n  updateFrameState_(extent, resolution, projection) {\n    const frameState = /** @type {import(\"../Map.js\").FrameState} */ (\n      Object.assign({}, this.frameState_)\n    );\n\n    frameState.viewState = /** @type {import(\"../View.js\").State} */ (\n      Object.assign({}, frameState.viewState)\n    );\n\n    const center = getCenter(extent);\n\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Date.now();\n\n    const viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  }\n\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  allSourcesReady_() {\n    let ready = true;\n    let source;\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n      if (source.getState() !== 'ready') {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    const frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (\n        resolution !== renderedResolution ||\n        !equals(extent, renderedExtent)\n      ) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (\n      !this.renderedImageCanvas_ ||\n      this.getRevision() !== this.renderedRevision_\n    ) {\n      this.processSources_();\n    }\n\n    frameState.tileQueue.loadMoreTiles(16, 16);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  }\n\n  /**\n   * Start processing source data.\n   * @private\n   */\n  processSources_() {\n    const frameState = this.requestedFrameState_;\n    const len = this.layers_.length;\n    const imageDatas = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      const imageData = getImageData(this.layers_[i], frameState);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    const data = {};\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data)\n    );\n    this.processor_.process(\n      imageDatas,\n      data,\n      this.onWorkerComplete_.bind(this, frameState)\n    );\n  }\n\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n  onWorkerComplete_(frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n\n    // do nothing if extent or resolution changed\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    if (\n      resolution !== this.requestedFrameState_.viewState.resolution ||\n      !equals(extent, this.requestedFrameState_.extent)\n    ) {\n      return;\n    }\n\n    let context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      const width = Math.round(getWidth(extent) / resolution);\n      const height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(\n        extent,\n        resolution,\n        1,\n        context.canvas\n      );\n    }\n    context.putImageData(output, 0, 0);\n\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data)\n    );\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n  }\n\n  disposeInternal() {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n    super.disposeInternal();\n  }\n}\n\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nlet sharedContext = null;\n\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  const renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  const width = frameState.size[0];\n  const height = frameState.size[1];\n  if (width === 0 || height === 0) {\n    return null;\n  }\n  const container = renderer.renderFrame(frameState, null);\n  let element;\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n      const context = element.getContext('2d');\n      return context.getImageData(0, 0, width, height);\n    }\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    const canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  const len = sources.length;\n  const layers = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  let layer;\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({source: layerOrSource});\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({source: layerOrSource});\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\n\nexport default RasterSource;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SAAQC,qBAAR,QAAoC,WAApC;AACA,SAAQC,MAAM,IAAIC,eAAlB,QAAwC,iBAAxC;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,cAArD;AACA,SAAQC,MAAR,QAAqB,YAArB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AACA,IAAI;EACF,IAAIC,SAAJ,CAAc,EAAd,EAAkB,EAAlB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU;EACVF,YAAY,GAAG,KAAf;AACD;AAED;;;AACA,IAAIG,OAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;EAChD,IAAIP,YAAJ,EAAkB;IAChB,OAAO,IAAIC,SAAJ,CAAcI,IAAd,EAAoBC,KAApB,EAA2BC,MAA3B,CAAP;EACD;;EAED,IAAI,CAACJ,OAAL,EAAc;IACZA,OAAO,GAAGK,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,UAAjC,CAA4C,IAA5C,CAAV;EACD;;EACD,MAAMC,SAAS,GAAGR,OAAO,CAACS,eAAR,CAAwBN,KAAxB,EAA+BC,MAA/B,CAAlB;EACAI,SAAS,CAACN,IAAV,CAAeQ,GAAf,CAAmBR,IAAnB;EACA,OAAOM,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,YAAT,CAAsBC,SAAtB,EAAiC;EAC/B,IAAIC,kBAAkB,GAAG,IAAzB;;EACA,IAAI;IACF,IAAIf,SAAJ,CAAc,EAAd,EAAkB,EAAlB;EACD,CAFD,CAEE,OAAOC,CAAP,EAAU;IACVc,kBAAkB,GAAG,KAArB;EACD;;EAED,SAASC,kBAAT,CAA4BZ,IAA5B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiD;IAC/C,IAAIS,kBAAJ,EAAwB;MACtB,OAAO,IAAIf,SAAJ,CAAcI,IAAd,EAAoBC,KAApB,EAA2BC,MAA3B,CAAP;IACD,CAFD,MAEO;MACL,OAAO;QAACF,IAAI,EAAEA,IAAP;QAAaC,KAAK,EAAEA,KAApB;QAA2BC,MAAM,EAAEA;MAAnC,CAAP;IACD;EACF;;EAED,OAAO,UAAUF,IAAV,EAAgB;IACrB;IACA,MAAMa,OAAO,GAAGb,IAAI,CAAC,SAAD,CAApB;IACA,MAAMc,IAAI,GAAGd,IAAI,CAAC,MAAD,CAAjB;IACA,MAAMe,QAAQ,GAAGf,IAAI,CAAC,UAAD,CAArB;IACA,MAAMC,KAAK,GAAGD,IAAI,CAAC,OAAD,CAAlB;IACA,MAAME,MAAM,GAAGF,IAAI,CAAC,QAAD,CAAnB;IAEA,MAAMgB,UAAU,GAAGH,OAAO,CAACI,MAA3B;IACA,MAAMC,QAAQ,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAWM,UAA5B;;IAEA,IAAIJ,QAAJ,EAAc;MACZ,MAAMK,MAAM,GAAG,IAAIC,KAAJ,CAAUL,UAAV,CAAf;;MACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgC,EAAEM,CAAlC,EAAqC;QACnCF,MAAM,CAACE,CAAD,CAAN,GAAYV,kBAAkB,CAC5B,IAAIW,iBAAJ,CAAsBV,OAAO,CAACS,CAAD,CAA7B,CAD4B,EAE5BrB,KAF4B,EAG5BC,MAH4B,CAA9B;MAKD;;MACD,MAAMsB,MAAM,GAAGd,SAAS,CAACU,MAAD,EAASN,IAAT,CAAT,CAAwBd,IAAvC;MACA,OAAOwB,MAAM,CAACC,MAAd;IACD;;IAED,MAAMD,MAAM,GAAG,IAAID,iBAAJ,CAAsBL,QAAtB,CAAf;IACA,MAAMQ,MAAM,GAAG,IAAIL,KAAJ,CAAUL,UAAV,CAAf;IACA,MAAMW,MAAM,GAAG,IAAIN,KAAJ,CAAUL,UAAV,CAAf;;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgC,EAAEM,CAAlC,EAAqC;MACnCI,MAAM,CAACJ,CAAD,CAAN,GAAY,IAAIC,iBAAJ,CAAsBV,OAAO,CAACS,CAAD,CAA7B,CAAZ;MACAK,MAAM,CAACL,CAAD,CAAN,GAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAZ;IACD;;IACD,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAApB,EAA8BU,CAAC,IAAI,CAAnC,EAAsC;MACpC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,UAApB,EAAgC,EAAEa,CAAlC,EAAqC;QACnC,MAAMC,KAAK,GAAGJ,MAAM,CAACG,CAAD,CAApB;QACAF,MAAM,CAACE,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAACF,CAAD,CAApB;QACAD,MAAM,CAACE,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAACF,CAAC,GAAG,CAAL,CAApB;QACAD,MAAM,CAACE,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAACF,CAAC,GAAG,CAAL,CAApB;QACAD,MAAM,CAACE,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAACF,CAAC,GAAG,CAAL,CAApB;MACD;;MACD,MAAMG,KAAK,GAAGrB,SAAS,CAACiB,MAAD,EAASb,IAAT,CAAvB;MACAU,MAAM,CAACI,CAAD,CAAN,GAAYG,KAAK,CAAC,CAAD,CAAjB;MACAP,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgBG,KAAK,CAAC,CAAD,CAArB;MACAP,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgBG,KAAK,CAAC,CAAD,CAArB;MACAP,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgBG,KAAK,CAAC,CAAD,CAArB;IACD;;IACD,OAAOP,MAAM,CAACC,MAAd;EACD,CA9CD;AA+CD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,YAAT,CAAsBC,MAAtB,EAA8BC,SAA9B,EAAyC;EACvC,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACE,GAAP,IAAc,EAA1B,EAA8BG,GAA9B,CAAkC,UAAUC,IAAV,EAAgB;IAC5D,OAAO,WAAWA,IAAX,GAAkB,KAAlB,GAA0BN,MAAM,CAACE,GAAP,CAAWI,IAAX,EAAiBC,QAAjB,EAA1B,GAAwD,GAA/D;EACD,CAFW,CAAZ;EAIA,MAAMC,KAAK,GAAGN,GAAG,CAACO,MAAJ,CAAW,CACvB,yBAAyBjC,YAAY,CAAC+B,QAAb,EAAzB,GAAmD,IAD5B,EAEvBP,MAAM,CAACvB,SAAP,CAAiB8B,QAAjB,EAFuB,EAGvB,IAHuB,EAIvB,oDAJuB,EAKvB,0CALuB,EAMvB,wEANuB,EAOvB,KAPuB,CAAX,CAAd;EAUA,MAAMG,MAAM,GAAG,IAAIC,MAAJ,CACb,OAAOC,IAAP,KAAgB,WAAhB,GACI,iCACAC,MAAM,CAACC,IAAP,CAAYN,KAAK,CAACO,IAAN,CAAW,IAAX,CAAZ,EAA8B,QAA9B,EAAwCR,QAAxC,CAAiD,QAAjD,CAFJ,GAGIS,GAAG,CAACC,eAAJ,CAAoB,IAAIL,IAAJ,CAASJ,KAAT,EAAgB;IAACU,IAAI,EAAE;EAAP,CAAhB,CAApB,CAJS,CAAf;EAMAR,MAAM,CAACS,gBAAP,CAAwB,SAAxB,EAAmClB,SAAnC;EACA,OAAOS,MAAP;AACD;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,gBAAT,CAA0BpB,MAA1B,EAAkCC,SAAlC,EAA6C;EAC3C,MAAMoB,MAAM,GAAG7C,YAAY,CAACwB,MAAM,CAACvB,SAAR,CAA3B;EACA,IAAI6C,UAAU,GAAG,KAAjB;EACA,OAAO;IACLC,WAAW,EAAE,UAAUxD,IAAV,EAAgB;MAC3ByD,UAAU,CAAC,YAAY;QACrB,IAAIF,UAAJ,EAAgB;UACd;QACD;;QACDrB,SAAS,CAAC;UAAClC,IAAI,EAAE;YAACyB,MAAM,EAAE6B,MAAM,CAACtD,IAAD,CAAf;YAAuBc,IAAI,EAAEd,IAAI,CAAC,MAAD;UAAjC;QAAP,CAAD,CAAT;MACD,CALS,EAKP,CALO,CAAV;IAMD,CARI;IASL0D,SAAS,EAAE,YAAY;MACrBH,UAAU,GAAG,IAAb;IACD;EAXI,CAAP;AAaD;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,OAAO,MAAMI,SAAN,SAAwBlF,UAAxB,CAAmC;EACxC;AACF;AACA;EACEmF,WAAW,CAAC3B,MAAD,EAAS;IAClB;IAEA,KAAK4B,SAAL,GAAiB,CAAC,CAAC5B,MAAM,CAAClB,QAA1B;IACA,IAAI+C,OAAJ;;IACA,IAAI7B,MAAM,CAAC6B,OAAP,KAAmB,CAAvB,EAA0B;MACxBA,OAAO,GAAG,CAAV;IACD,CAFD,MAEO,IAAI,KAAKD,SAAT,EAAoB;MACzBC,OAAO,GAAG,CAAV;IACD,CAFM,MAEA;MACLA,OAAO,GAAG7B,MAAM,CAAC6B,OAAP,IAAkB,CAA5B;IACD;IAED;AACJ;AACA;;;IACI,MAAMC,OAAO,GAAG,IAAI1C,KAAJ,CAAUyC,OAAV,CAAhB;;IACA,IAAIA,OAAJ,EAAa;MACX,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,OAApB,EAA6B,EAAElC,CAA/B,EAAkC;QAChCmC,OAAO,CAACnC,CAAD,CAAP,GAAaI,YAAY,CAACC,MAAD,EAAS,KAAK+B,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCrC,CAAjC,CAAT,CAAzB;MACD;IACF,CAJD,MAIO;MACLmC,OAAO,CAAC,CAAD,CAAP,GAAaV,gBAAgB,CAC3BpB,MAD2B,EAE3B,KAAK+B,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiC,CAAjC,CAF2B,CAA7B;IAID;;IACD,KAAKC,QAAL,GAAgBH,OAAhB;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,MAAL,GAAc,EAAd;IAEA,KAAKC,eAAL,GAAuBnC,MAAM,CAACoC,KAAP,IAAgBC,QAAvC;IACA,KAAKC,QAAL,GAAgB,CAAhB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmB,EAAnB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAY,IAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,OAAO,CAACC,MAAD,EAAS7D,IAAT,EAAe8D,QAAf,EAAyB;IAC9B,KAAKC,QAAL,CAAc;MACZF,MAAM,EAAEA,MADI;MAEZ7D,IAAI,EAAEA,IAFM;MAGZ8D,QAAQ,EAAEA;IAHE,CAAd;;IAKA,KAAKE,SAAL;EACD;EAED;AACF;AACA;AACA;;;EACED,QAAQ,CAACE,GAAD,EAAM;IACZ,KAAKZ,MAAL,CAAYa,IAAZ,CAAiBD,GAAjB;;IACA,OAAO,KAAKZ,MAAL,CAAYlD,MAAZ,GAAqB,KAAKmD,eAAjC,EAAkD;MAChD,KAAKD,MAAL,CAAYc,KAAZ,GAAoBL,QAApB,CAA6B,IAA7B,EAAmC,IAAnC;IACD;EACF;EAED;AACF;AACA;;;EACEE,SAAS,GAAG;IACV,IAAI,KAAKP,QAAL,IAAiB,KAAKJ,MAAL,CAAYlD,MAAZ,KAAuB,CAA5C,EAA+C;MAC7C;IACD;;IAED,MAAM8D,GAAG,GAAG,KAAKZ,MAAL,CAAYc,KAAZ,EAAZ;;IACA,KAAKR,IAAL,GAAYM,GAAZ;IACA,MAAM9E,KAAK,GAAG8E,GAAG,CAACJ,MAAJ,CAAW,CAAX,EAAc1E,KAA5B;IACA,MAAMC,MAAM,GAAG6E,GAAG,CAACJ,MAAJ,CAAW,CAAX,EAAczE,MAA7B;IACA,MAAMW,OAAO,GAAGkE,GAAG,CAACJ,MAAJ,CAAWrC,GAAX,CAAe,UAAU4C,KAAV,EAAiB;MAC9C,OAAOA,KAAK,CAAClF,IAAN,CAAWyB,MAAlB;IACD,CAFe,CAAhB;IAGA,MAAMqC,OAAO,GAAG,KAAKI,QAAL,CAAcjD,MAA9B;IACA,KAAKsD,QAAL,GAAgBT,OAAhB;;IACA,IAAIA,OAAO,KAAK,CAAhB,EAAmB;MACjB,KAAKI,QAAL,CAAc,CAAd,EAAiBV,WAAjB,CACE;QACE3C,OAAO,EAAEA,OADX;QAEEC,IAAI,EAAEiE,GAAG,CAACjE,IAFZ;QAGEC,QAAQ,EAAE,KAAK8C,SAHjB;QAIE5D,KAAK,EAAEA,KAJT;QAKEC,MAAM,EAAEA;MALV,CADF,EAQEW,OARF;;MAUA;IACD;;IAED,MAAMI,MAAM,GAAG8D,GAAG,CAACJ,MAAJ,CAAW,CAAX,EAAc3E,IAAd,CAAmBiB,MAAlC;IACA,MAAMkE,aAAa,GAAG,IAAIC,IAAI,CAACC,IAAL,CAAUpE,MAAM,GAAG,CAAT,GAAa6C,OAAvB,CAA1B;;IACA,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,OAApB,EAA6B,EAAElC,CAA/B,EAAkC;MAChC,MAAM0D,MAAM,GAAG1D,CAAC,GAAGuD,aAAnB;MACA,MAAMI,MAAM,GAAG,EAAf;;MACA,KAAK,IAAI1D,CAAC,GAAG,CAAR,EAAW2D,EAAE,GAAG3E,OAAO,CAACI,MAA7B,EAAqCY,CAAC,GAAG2D,EAAzC,EAA6C,EAAE3D,CAA/C,EAAkD;QAChD0D,MAAM,CAACP,IAAP,CAAYnE,OAAO,CAACgB,CAAD,CAAP,CAAW4D,KAAX,CAAiBH,MAAjB,EAAyBA,MAAM,GAAGH,aAAlC,CAAZ;MACD;;MACD,KAAKjB,QAAL,CAActC,CAAd,EAAiB4B,WAAjB,CACE;QACE3C,OAAO,EAAE0E,MADX;QAEEzE,IAAI,EAAEiE,GAAG,CAACjE,IAFZ;QAGEC,QAAQ,EAAE,KAAK8C,SAHjB;QAIE5D,KAAK,EAAEA,KAJT;QAKEC,MAAM,EAAEA;MALV,CADF,EAQEqF,MARF;IAUD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEvB,gBAAgB,CAAC0B,KAAD,EAAQC,KAAR,EAAe;IAC7B,IAAI,KAAKC,QAAT,EAAmB;MACjB;IACD;;IACD,KAAKpB,WAAL,CAAiBkB,KAAjB,IAA0BC,KAAK,CAAC3F,IAAhC;IACA,EAAE,KAAKuE,QAAP;;IACA,IAAI,KAAKA,QAAL,KAAkB,CAAtB,EAAyB;MACvB,KAAKsB,WAAL;IACD;EACF;EAED;AACF;AACA;AACA;;;EACEA,WAAW,GAAG;IACZ,MAAMd,GAAG,GAAG,KAAKN,IAAjB;IACA,MAAMX,OAAO,GAAG,KAAKI,QAAL,CAAcjD,MAA9B;IACA,IAAIjB,IAAJ,EAAUc,IAAV;;IACA,IAAIgD,OAAO,KAAK,CAAhB,EAAmB;MACjB9D,IAAI,GAAG,IAAIuB,iBAAJ,CAAsB,KAAKiD,WAAL,CAAiB,CAAjB,EAAoB,QAApB,CAAtB,CAAP;MACA1D,IAAI,GAAG,KAAK0D,WAAL,CAAiB,CAAjB,EAAoB,MAApB,CAAP;IACD,CAHD,MAGO;MACL,MAAMvD,MAAM,GAAG8D,GAAG,CAACJ,MAAJ,CAAW,CAAX,EAAc3E,IAAd,CAAmBiB,MAAlC;MACAjB,IAAI,GAAG,IAAIuB,iBAAJ,CAAsBN,MAAtB,CAAP;MACAH,IAAI,GAAG,IAAIO,KAAJ,CAAUyC,OAAV,CAAP;MACA,MAAMqB,aAAa,GAAG,IAAIC,IAAI,CAACC,IAAL,CAAUpE,MAAM,GAAG,CAAT,GAAa6C,OAAvB,CAA1B;;MACA,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,OAApB,EAA6B,EAAElC,CAA/B,EAAkC;QAChC,MAAMH,MAAM,GAAG,KAAK+C,WAAL,CAAiB5C,CAAjB,EAAoB,QAApB,CAAf;QACA,MAAM0D,MAAM,GAAG1D,CAAC,GAAGuD,aAAnB;QACAnF,IAAI,CAACQ,GAAL,CAAS,IAAIe,iBAAJ,CAAsBE,MAAtB,CAAT,EAAwC6D,MAAxC;QACAxE,IAAI,CAACc,CAAD,CAAJ,GAAU,KAAK4C,WAAL,CAAiB5C,CAAjB,EAAoB,MAApB,CAAV;MACD;IACF;;IACD,KAAK6C,IAAL,GAAY,IAAZ;IACA,KAAKD,WAAL,GAAmB,EAAnB;IACAO,GAAG,CAACH,QAAJ,CACE,IADF,EAEE7E,YAAY,CAACC,IAAD,EAAO+E,GAAG,CAACJ,MAAJ,CAAW,CAAX,EAAc1E,KAArB,EAA4B8E,GAAG,CAACJ,MAAJ,CAAW,CAAX,EAAczE,MAA1C,CAFd,EAGEY,IAHF;;IAKA,KAAKgE,SAAL;EACD;EAED;AACF;AACA;;;EACEgB,eAAe,GAAG;IAChB,KAAK,IAAIlE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsC,QAAL,CAAcjD,MAAlC,EAA0C,EAAEW,CAA5C,EAA+C;MAC7C,KAAKsC,QAAL,CAActC,CAAd,EAAiB8B,SAAjB;IACD;;IACD,KAAKQ,QAAL,CAAcjD,MAAd,GAAuB,CAAvB;EACD;;AAjMuC;AAoM1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAM8E,eAAe,GAAG;EACtB;AACF;AACA;AACA;AACA;AACA;EACEC,gBAAgB,EAAE,kBAPI;;EAStB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAE;AAhBK,CAAxB;AAmBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAN,SAAgCxH,KAAhC,CAAsC;EAC3C;AACF;AACA;AACA;AACA;AACA;EACEkF,WAAW,CAACT,IAAD,EAAOgD,UAAP,EAAmBnG,IAAnB,EAAyB;IAClC,MAAMmD,IAAN;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKiD,MAAL,GAAcD,UAAU,CAACC,MAAzB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBF,UAAU,CAACG,SAAX,CAAqBD,UAArB,GAAkCF,UAAU,CAACI,UAA/D;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,KAAKvG,IAAL,GAAYA,IAAZ;EACD;;AA/B0C;AAkC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMwG,YAAN,SAA2B1H,WAA3B,CAAuC;EACrC;AACF;AACA;EACE8E,WAAW,CAAC6C,OAAD,EAAU;IACnB,MAAM;MACJC,UAAU,EAAE;IADR,CAAN;IAIA;AACJ;AACA;;IACI,KAAKC,EAAL;IAEA;AACJ;AACA;;IACI,KAAKC,IAAL;IAEA;AACJ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"},"metadata":{},"sourceType":"module"}