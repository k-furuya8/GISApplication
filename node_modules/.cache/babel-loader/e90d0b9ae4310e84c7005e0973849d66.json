{"ast":null,"code":"/**\n * @module ol/source/Zoomify\n */\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport { assert } from '../asserts.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { getCenter } from '../extent.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n\n    this.zoomifyImage_ = null;\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.tileSize_ = tileSize;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n\n\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n\n    const image = super.getImage();\n\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  }\n\n}\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\n\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : 'default';\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n\n        break;\n\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n\n        break;\n\n      default:\n        // Unknown `tierSizeCalculation` configured\n        assert(false, 53);\n        break;\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n\n    resolutions.reverse();\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    let url = options.url;\n\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n\n    const urls = expandUrl(url);\n    let tileWidth = tileSize * tilePixelRatio;\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            const tileCoordZ = tileCoord[0];\n            const tileCoordX = tileCoord[1];\n            const tileCoordY = tileCoord[2];\n            const tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            const tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n            const localContext = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    const ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    });\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n\n    this.zDirection = options.zDirection; // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener('error', function () {\n      tileWidth = tileSize;\n      this.changed();\n    }.bind(this));\n    image.src = testTileUrl;\n  }\n\n}\n\nexport default Zoomify;","map":{"version":3,"names":["DEFAULT_TILE_SIZE","ImageTile","TileGrid","TileImage","TileState","assert","createCanvasContext2D","createFromTileUrlFunctions","expandUrl","getCenter","toSize","CustomTile","constructor","tileSize","tileCoord","state","src","crossOrigin","tileLoadFunction","options","zoomifyImage_","tileSize_","getImage","image","LOADED","width","height","context","drawImage","canvas","Zoomify","size","tierSizeCalculation","undefined","tilePixelRatio","imageWidth","imageHeight","tierSizeInTiles","tileSizeForTierSizeCalculation","push","Math","ceil","reverse","resolutions","tileCountUpToTier","i","ii","length","tileGrid","extent","url","includes","urls","tileWidth","createFromTemplate","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileGroup","localContext","replace","m","p","tileUrlFunction","map","ZoomifyTileClass","bind","attributions","cacheSize","interpolate","reprojectionErrorThreshold","tileClass","transition","zDirection","tileUrl","getTileCoordForCoordAndResolution","getExtent","testTileUrl","Image","addEventListener","changed"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/Zoomify.js"],"sourcesContent":["/**\n * @module ol/source/Zoomify\n */\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\n\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport {assert} from '../asserts.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {getCenter} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(\n    tileSize,\n    tileCoord,\n    state,\n    src,\n    crossOrigin,\n    tileLoadFunction,\n    options\n  ) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation =\n      options.tierSizeCalculation !== undefined\n        ? options.tierSizeCalculation\n        : 'default';\n\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (\n          imageWidth > tileSizeForTierSizeCalculation ||\n          imageHeight > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),\n          ]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n        while (\n          width > tileSizeForTierSizeCalculation ||\n          height > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(width / tileSizeForTierSizeCalculation),\n            Math.ceil(height / tileSizeForTierSizeCalculation),\n          ]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default: // Unknown `tierSizeCalculation` configured\n        assert(false, 53);\n        break;\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n          tileCountUpToTier[i - 1]\n      );\n    }\n    resolutions.reverse();\n\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions,\n    });\n\n    let url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            const tileCoordZ = tileCoord[0];\n            const tileCoordX = tileCoord[1];\n            const tileCoordY = tileCoord[2];\n            const tileIndex =\n              tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            const tileGroup =\n              ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n            const localContext = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup,\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(\n      urls.map(createFromTemplate)\n    );\n\n    const ZoomifyTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize * tilePixelRatio)\n    );\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(\n      getCenter(tileGrid.getExtent()),\n      resolutions[resolutions.length - 1]\n    );\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener(\n      'error',\n      function () {\n        tileWidth = tileSize;\n        this.changed();\n      }.bind(this)\n    );\n    image.src = testTileUrl;\n  }\n}\n\nexport default Zoomify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}