{"ast":null,"code":"import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { isArrayBuffer, isCanonicalIntegerIndexString, isNativeBigIntTypedArray, isNativeTypedArray, isObject, isOrdinaryArray, isOrdinaryNativeTypedArray, isSharedArrayBuffer } from \"./_util/is.mjs\";\nimport { ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER, CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT, CANNOT_MIX_BIGINT_AND_OTHER_TYPES, DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH, ITERATOR_PROPERTY_IS_NOT_CALLABLE, OFFSET_IS_OUT_OF_BOUNDS, REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE, SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT, THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY, THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT } from \"./_util/messages.mjs\";\nimport { ArrayBufferIsView, ArrayPrototypeJoin, ArrayPrototypePush, ArrayPrototypeToLocaleString, NativeArrayBuffer, NativeObject, NativeProxy, NativeRangeError, NativeTypeError, NativeUint16Array, NativeWeakMap, NativeWeakSet, NumberIsNaN, ObjectDefineProperty, ObjectFreeze, ObjectHasOwn, ObjectPrototype__lookupGetter__, ReflectApply, ReflectConstruct, ReflectDefineProperty, ReflectGet, ReflectGetOwnPropertyDescriptor, ReflectHas, ReflectOwnKeys, ReflectSet, ReflectSetPrototypeOf, SymbolIterator, SymbolToStringTag, TypedArray, TypedArrayPrototype, TypedArrayPrototypeCopyWithin, TypedArrayPrototypeEntries, TypedArrayPrototypeFill, TypedArrayPrototypeGetBuffer, TypedArrayPrototypeGetByteOffset, TypedArrayPrototypeGetLength, TypedArrayPrototypeKeys, TypedArrayPrototypeReverse, TypedArrayPrototypeSet, TypedArrayPrototypeSlice, TypedArrayPrototypeSort, TypedArrayPrototypeSubarray, TypedArrayPrototypeValues, Uint16ArrayFrom, WeakMapPrototypeGet, WeakMapPrototypeHas, WeakMapPrototypeSet, WeakSetPrototypeAdd, WeakSetPrototypeHas } from \"./_util/primordials.mjs\";\nimport { IsDetachedBuffer, SpeciesConstructor, ToIntegerOrInfinity, ToLength, defaultCompare } from \"./_util/spec.mjs\";\nconst BYTES_PER_ELEMENT = 2;\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\n\nconst float16bitsArrays = new NativeWeakMap();\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\n\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);\n}\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\n\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\n\n\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\n\n\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  } // from another Float16Array instance (a different version?)\n\n\n  const buffer =\n  /** @type {any} */\n  float16.buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [buffer,\n  /** @type {any} */\n  float16.byteOffset,\n  /** @type {any} */\n  float16.length], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\n\n\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n  const array = [];\n\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n/** @type {WeakSet<Function>} */\n\n\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\n\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(\n/** @type {ProxyHandler<Float16BitsArray>} */\n{\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    } // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n\n\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, \"value\")) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  }\n\n});\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) {\n      // object without ArrayBuffer\n\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n\n      let length;\n\n      if (isNativeTypedArray(input)) {\n        // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        const BufferConstructor = !isSharedArrayBuffer(buffer) ?\n        /** @type {ArrayBufferConstructor} */\n        SpeciesConstructor(buffer, NativeArrayBuffer) : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(length * BYTES_PER_ELEMENT);\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) {\n          // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [...\n            /** @type {Iterable<unknown>} */\n            input];\n            length = list.length;\n          }\n        } else {\n          // ArrayLike\n          list =\n          /** @type {ArrayLike<unknown>} */\n          input;\n          length = ToLength(list.length);\n        }\n\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      } // set values\n\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else {\n      // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n    /** @type {Float16Array} */\n\n\n    const proxy =\n    /** @type {any} */\n    new NativeProxy(float16bitsArray, handler); // proxy private storage\n\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n\n\n  static from(src) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    } // for optimization\n\n\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n        return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      }\n\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, roundToFloat16Bits)));\n      }\n\n      const mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n      const thisArg = arguments.length <= 2 ? undefined : arguments[2];\n      return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, function (val) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return roundToFloat16Bits(ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)]));\n      }, thisArg)));\n    }\n    /** @type {ArrayLike<unknown>} */\n\n\n    let list;\n    /** @type {number} */\n\n    let length;\n    const iterator = src[SymbolIterator];\n\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) {\n      // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else {\n      // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] =\n        /** @type {number} */\n        list[i];\n      }\n    } else {\n      const mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n      const thisArg = arguments.length <= 2 ? undefined : arguments[2];\n\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n\n\n  static of() {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n\n    const length = arguments.length; // for optimization\n\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    }\n\n    return array;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n\n\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n\n\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    }());\n  }\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n\n\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield (\n          /** @type {[Number, number]} */\n          [i, convertToNumber(val)]\n        );\n      }\n    }());\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n\n\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n\n\n  map(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array); // for optimization\n\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(ReflectApply(callback, thisArg, [val, i, this]));\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n\n\n  filter(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    const kept = [];\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n\n\n  reduce(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n\n    if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = arguments.length <= 1 ? undefined : arguments[1];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n\n    return accumulator;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n\n\n  reduceRight(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n\n    if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = arguments.length <= 1 ? undefined : arguments[1];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n\n    return accumulator;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n\n\n  forEach(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this]);\n    }\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n\n\n  find(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n\n\n  findIndex(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n\n\n  findLast(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n\n\n  findLastIndex(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n\n\n  every(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = 0; i < length; ++i) {\n      if (!ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n\n\n  some(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n    for (let i = 0; i < length; ++i) {\n      if (ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n\n\n  set(input) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const targetOffset = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n    } // for optimization\n\n\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n\n\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeReverse(float16bitsArray);\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n\n\n  fill(value) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    for (var _len2 = arguments.length, opts = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      opts[_key2 - 1] = arguments[_key2];\n    }\n\n    TypedArrayPrototypeFill(float16bitsArray, roundToFloat16Bits(value), ...safeIfNeeded(opts));\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n\n\n  copyWithin(target, start) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    for (var _len3 = arguments.length, opts = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      opts[_key3 - 2] = arguments[_key3];\n    }\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n\n\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n\n\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array); // for optimization\n\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16, start, end)));\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n    let k;\n\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n\n    let final;\n\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n\n\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n    const array = new Constructor(TypedArrayPrototypeGetBuffer(uint16Subarray), TypedArrayPrototypeGetByteOffset(uint16Subarray), TypedArrayPrototypeGetLength(uint16Subarray));\n    assertSpeciesTypedArray(array);\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n\n\n  indexOf(element) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n\n\n  lastIndexOf(element) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = (arguments.length <= 1 ? 0 : arguments.length - 1) >= 1 ? ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]) : length - 1;\n\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n\n\n  includes(element) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n\n\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return ArrayPrototypeJoin(array, separator);\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n\n\n  toLocaleString() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n\n    for (var _len4 = arguments.length, opts = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      opts[_key4] = arguments[_key4];\n    }\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n\n\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return (\n        /** @type {any} */\n        \"Float16Array\"\n      );\n    }\n  }\n\n}\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\n\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n}); // limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\n\nObjectDefineProperty(Float16Array, brand, {});\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\n\nReflectSetPrototypeOf(Float16Array, TypedArray);\nconst Float16ArrayPrototype = Float16Array.prototype;\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\n\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\n\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n}); // To make `new Float16Array() instanceof Uint16Array` returns `false`\n\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);","map":{"version":3,"names":["safeIfNeeded","wrap","brand","hasFloat16ArrayBrand","convertToNumber","roundToFloat16Bits","isArrayBuffer","isCanonicalIntegerIndexString","isNativeBigIntTypedArray","isNativeTypedArray","isObject","isOrdinaryArray","isOrdinaryNativeTypedArray","isSharedArrayBuffer","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH","ITERATOR_PROPERTY_IS_NOT_CALLABLE","OFFSET_IS_OUT_OF_BOUNDS","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT","ArrayBufferIsView","ArrayPrototypeJoin","ArrayPrototypePush","ArrayPrototypeToLocaleString","NativeArrayBuffer","NativeObject","NativeProxy","NativeRangeError","NativeTypeError","NativeUint16Array","NativeWeakMap","NativeWeakSet","NumberIsNaN","ObjectDefineProperty","ObjectFreeze","ObjectHasOwn","ObjectPrototype__lookupGetter__","ReflectApply","ReflectConstruct","ReflectDefineProperty","ReflectGet","ReflectGetOwnPropertyDescriptor","ReflectHas","ReflectOwnKeys","ReflectSet","ReflectSetPrototypeOf","SymbolIterator","SymbolToStringTag","TypedArray","TypedArrayPrototype","TypedArrayPrototypeCopyWithin","TypedArrayPrototypeEntries","TypedArrayPrototypeFill","TypedArrayPrototypeGetBuffer","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeGetLength","TypedArrayPrototypeKeys","TypedArrayPrototypeReverse","TypedArrayPrototypeSet","TypedArrayPrototypeSlice","TypedArrayPrototypeSort","TypedArrayPrototypeSubarray","TypedArrayPrototypeValues","Uint16ArrayFrom","WeakMapPrototypeGet","WeakMapPrototypeHas","WeakMapPrototypeSet","WeakSetPrototypeAdd","WeakSetPrototypeHas","IsDetachedBuffer","SpeciesConstructor","ToIntegerOrInfinity","ToLength","defaultCompare","BYTES_PER_ELEMENT","float16bitsArrays","isFloat16Array","target","assertFloat16Array","assertSpeciesTypedArray","count","isTargetFloat16Array","isTargetTypedArray","length","float16bitsArray","getFloat16BitsArray","float16","undefined","buffer","cloned","Float16Array","byteOffset","constructor","copyToArray","array","i","TypedArrayPrototypeGetters","key","descriptor","get","handler","receiver","set","value","getOwnPropertyDescriptor","defineProperty","input","_byteOffset","_length","new","list","BufferConstructor","data","iterator","arguments","proxy","from","src","Constructor","uint16","mapFunc","thisArg","val","args","of","keys","values","entries","at","index","relativeIndex","k","map","callback","filter","kept","reduce","accumulator","start","reduceRight","forEach","find","findIndex","findLast","findLastIndex","every","some","targetOffset","targetLength","srcLength","Infinity","reverse","fill","opts","copyWithin","sort","compareFn","sortCompare","x","y","slice","end","relativeStart","relativeEnd","final","n","subarray","begin","uint16Subarray","indexOf","element","lastIndexOf","includes","isNaN","join","separator","toLocaleString","Float16ArrayPrototype","prototype","writable","configurable"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/@petamoriken/float16/src/Float16Array.mjs"],"sourcesContent":["import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  isArrayBuffer,\n  isCanonicalIntegerIndexString,\n  isNativeBigIntTypedArray,\n  isNativeTypedArray,\n  isObject,\n  isOrdinaryArray,\n  isOrdinaryNativeTypedArray,\n  isSharedArrayBuffer,\n} from \"./_util/is.mjs\";\nimport {\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\n  OFFSET_IS_OUT_OF_BOUNDS,\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\n} from \"./_util/messages.mjs\";\nimport {\n  ArrayBufferIsView,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  ArrayPrototypeToLocaleString,\n  NativeArrayBuffer,\n  NativeObject,\n  NativeProxy,\n  NativeRangeError,\n  NativeTypeError,\n  NativeUint16Array,\n  NativeWeakMap,\n  NativeWeakSet,\n  NumberIsNaN,\n  ObjectDefineProperty,\n  ObjectFreeze,\n  ObjectHasOwn,\n  ObjectPrototype__lookupGetter__,\n  ReflectApply,\n  ReflectConstruct,\n  ReflectDefineProperty,\n  ReflectGet,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectHas,\n  ReflectOwnKeys,\n  ReflectSet,\n  ReflectSetPrototypeOf,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArray,\n  TypedArrayPrototype,\n  TypedArrayPrototypeCopyWithin,\n  TypedArrayPrototypeEntries,\n  TypedArrayPrototypeFill,\n  TypedArrayPrototypeGetBuffer,\n  TypedArrayPrototypeGetByteOffset,\n  TypedArrayPrototypeGetLength,\n  TypedArrayPrototypeKeys,\n  TypedArrayPrototypeReverse,\n  TypedArrayPrototypeSet,\n  TypedArrayPrototypeSlice,\n  TypedArrayPrototypeSort,\n  TypedArrayPrototypeSubarray,\n  TypedArrayPrototypeValues,\n  Uint16ArrayFrom,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeHas,\n  WeakMapPrototypeSet,\n  WeakSetPrototypeAdd,\n  WeakSetPrototypeHas,\n} from \"./_util/primordials.mjs\";\nimport {\n  IsDetachedBuffer,\n  SpeciesConstructor,\n  ToIntegerOrInfinity,\n  ToLength,\n  defaultCompare,\n} from \"./_util/spec.mjs\";\n\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\n      );\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */ (float16).buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [\n    buffer,\n    /** @type {any} */ (float16).byteOffset,\n    /** @type {any} */ (float16).length,\n  ], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (\n      isCanonicalIntegerIndexString(key) &&\n      ObjectHasOwn(target, key) &&\n      ObjectHasOwn(descriptor, \"value\")\n    ) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  },\n}));\n\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n\n      if (isNativeTypedArray(input)) { // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        const BufferConstructor = !isSharedArrayBuffer(buffer)\n          ? /** @type {ArrayBufferConstructor} */ (SpeciesConstructor(\n            buffer,\n            NativeArrayBuffer\n          ))\n          : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(\n          length * BYTES_PER_ELEMENT\n        );\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) { // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */ (input)];\n            length = list.length;\n          }\n        } else { // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */ (input);\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else { // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\n          TypedArrayPrototypeGetLength(float16bitsArray)\n        );\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\n        );\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(\n            Uint16ArrayFrom(src, roundToFloat16Bits)\n          )\n        );\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          Uint16ArrayFrom(src, function (val, ...args) {\n            return roundToFloat16Bits(\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\n            );\n          }, thisArg)\n        )\n      );\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) { // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else { // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n        );\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */ (list[i]);\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    })());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\n      }\n    })());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(\n          ReflectApply(callback, thisArg, [val, i, this])\n        );\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this,\n      ]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        !ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\n      );\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(\n        getFloat16BitsArray(this),\n        getFloat16BitsArray(input),\n        targetOffset\n      );\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeReverse(float16bitsArray);\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeFill(\n      float16bitsArray,\n      roundToFloat16Bits(value),\n      ...safeIfNeeded(opts)\n    );\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\n        TypedArrayPrototypeGetLength(float16bitsArray)\n      );\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          TypedArrayPrototypeSlice(uint16, start, end)\n        )\n      );\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n\n    let k;\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n\n    let final;\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n\n    const array = new Constructor(\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\n      TypedArrayPrototypeGetLength(uint16Subarray)\n    );\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeJoin(array, separator);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */ (\"Float16Array\");\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\n\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true,\n});\n\n// To make `new Float16Array() instanceof Uint16Array` returns `false`\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}