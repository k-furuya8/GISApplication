{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81806\\\\Documents\\\\work\\\\GIS_APP\\\\gis_app1\\\\src\\\\App.js\";\nimport './App.css';\nimport \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport layer from 'ol/layer';\nimport proj from 'ol/proj';\nimport style from 'ol/style';\nimport interaction from 'ol/interaction';\nimport Source from 'ol/source';\nimport OlSourceOSM from \"ol/source/OSM\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.clear();\n\nconst App = () => /*#__PURE__*/_jsxDEV(MapApp, {\n  children: /*#__PURE__*/_jsxDEV(Polygon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 27\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 19\n}, this);\n\n_c = App;\n\nclass MapApp extends React.Component {\n  constructor(props) {\n    super(props); // Define base layer\n\n    this.baseLayer = new layer.Tile({\n      source: new ol.source.OSM()\n    }); // Define base view\n\n    this.baseView = new View({\n      center: proj.fromLonLat([37.41, 8.82]),\n      zoom: 4\n    }); // Add map, base view and layer\n\n    this.map = new Map({\n      layers: [this.baseLayer],\n      view: this.baseView\n    });\n  }\n\n  getChildContext() {\n    return {\n      map: this.map\n    };\n  }\n\n  componentDidMount() {\n    // set map target element\n    this.map.setTarget(this.map);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: \"map\",\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nMapApp.childContextTypes = {\n  map: PropTypes.object\n};\n\nclass Polygon extends React.Component {\n  componentDidMount() {\n    const source = new source.Vector({\n      wrapX: false\n    });\n    this.polygonBase = new layer.Vector({\n      source\n    });\n    this.context.map.addLayer(this.polygonBase);\n\n    const styleFunction = feature => {\n      var geometry = feature.getGeometry();\n      console.log('geometry', geometry.getType());\n\n      if (geometry.getType() === 'LineString') {\n        var styles = [new style.Style({\n          stroke: new style.Stroke({\n            color: 'rgba(255, 102, 0, 1)',\n            width: 3\n          })\n        })];\n        return styles;\n      }\n\n      if (geometry.getType() === 'Point') {\n        var styles = [new style.Style({\n          image: new style.Circle({\n            radius: 5,\n            stroke: new style.Stroke({\n              color: 'rgba(255, 0, 0, 1)'\n            }),\n            fill: new style.Fill({\n              color: 'rgba(255, 0, 0, 0.5)'\n            })\n          })\n        })];\n        return styles;\n      }\n\n      if (geometry.getType() === 'Polygon') {\n        var styles = [new style.Style({\n          stroke: new style.Stroke({\n            color: 'rgba(255, 102, 0, 0)',\n            width: 3\n          }),\n          fill: new style.Fill({\n            color: 'rgba(255, 102, 0, 0.3)'\n          })\n        })];\n        return styles;\n      }\n\n      return false;\n    }; // Define the polygon draw interaction\n\n\n    this.draw = new interaction.Draw({\n      source: source,\n      type: 'Polygon',\n      style: styleFunction\n    }); // Add the draw interaction\n\n    this.context.map.addInteraction(this.draw);\n    this.draw.on('drawstart', event => {\n      this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n    });\n  }\n\n  componentWillUnmount() {\n    this.context.map.removeInteraction(this.draw);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drawing polygon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }, this);\n  }\n\n} // ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\nPolygon.contextTypes = {\n  map: PropTypes.object\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","PropTypes","Map","View","layer","proj","style","interaction","Source","OlSourceOSM","console","clear","App","MapApp","Component","constructor","props","baseLayer","Tile","source","ol","OSM","baseView","center","fromLonLat","zoom","map","layers","view","getChildContext","componentDidMount","setTarget","render","children","childContextTypes","object","Polygon","Vector","wrapX","polygonBase","context","addLayer","styleFunction","feature","geometry","getGeometry","log","getType","styles","Style","stroke","Stroke","color","width","image","Circle","radius","fill","Fill","draw","Draw","type","addInteraction","on","event","polygonFirstCoordinate","getFirstCoordinate","componentWillUnmount","removeInteraction","contextTypes"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/src/App.js"],"sourcesContent":["import './App.css';\nimport \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport layer from 'ol/layer';\nimport proj from 'ol/proj';\nimport style from 'ol/style';\nimport interaction from 'ol/interaction';\nimport Source from 'ol/source';\nimport OlSourceOSM from \"ol/source/OSM\";\n\nconsole.clear();\nconst App = () => <MapApp><Polygon /></MapApp>;\n\nclass MapApp extends React.Component {\n\tconstructor(props) {\n    super(props);\n\n\t\t// Define base layer\n  \tthis.baseLayer = new layer.Tile({ source: new ol.source.OSM() });\n    \n  \t// Define base view\n    this.baseView = new View({\n      center: proj.fromLonLat([37.41, 8.82]),\n      zoom: 4\n    });\n\n\t\t// Add map, base view and layer\n    this.map = new Map({\n      layers: [this.baseLayer],\n      view: this.baseView\n    });\n  }\n  \n\tstatic childContextTypes = {\n  \tmap: PropTypes.object\n  }\n  \n  getChildContext() {\n  \treturn {\n      map: this.map\n    }\n  }\n  \n  componentDidMount() {\n    // set map target element\n    this.map.setTarget(this.map);\n  }\n\t\n  render() {\n  \treturn <div ref=\"map\">\n      {this.props.children}\n    </div>;\n  }\n}\n\nclass Polygon extends React.Component {\n  static contextTypes = {\n    map: PropTypes.object\n  }\n\n  componentDidMount() {\n  \tconst source = new source.Vector({wrapX: false});\n    this.polygonBase = new layer.Vector({ source });\n    this.context.map.addLayer(this.polygonBase);\n\t\t\n\t\tconst styleFunction = feature => {\n      var geometry = feature.getGeometry();\n      console.log('geometry', geometry.getType());\n      if (geometry.getType() === 'LineString') {\n        var styles = [\n          new style.Style({\n            stroke: new style.Stroke({\n              color: 'rgba(255, 102, 0, 1)',\n              width: 3\n            })\n          })\n        ];\n        return styles;\n      }\n\t\t\tif (geometry.getType() === 'Point') {\n        var styles = [\n          new style.Style({\n\t\t\t\t\t\timage: new style.Circle({\n      \t    \tradius: 5,\n      \t    \tstroke: new style.Stroke({ color: 'rgba(255, 0, 0, 1)' }),\n      \t    \tfill: new style.Fill({ color: 'rgba(255, 0, 0, 0.5)' })\n\t\t\t\t\t\t})\n          })\n        ];\n        return styles;\n      }\n      if (geometry.getType() === 'Polygon') {\n        var styles = [\n          new style.Style({\n            stroke: new style.Stroke({\n              color: 'rgba(255, 102, 0, 0)',\n              width: 3\n            }),\n            fill: new style.Fill({\n              color: 'rgba(255, 102, 0, 0.3)'\n            })\n          })\n        ];\n        return styles;\n      }\n      return false;\n    };\n    \n    // Define the polygon draw interaction\n    this.draw = new interaction.Draw({\n      source: source,\n      type: 'Polygon',\n\t\t\tstyle: styleFunction\n    });\n    // Add the draw interaction\n    this.context.map.addInteraction(this.draw);\n\t\t\n\t\tthis.draw.on('drawstart', event => {\n\t\t\tthis.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n\t\t});\n  }\n\n  componentWillUnmount () {\n    this.context.map.removeInteraction(this.draw);\n  }\n\n  render() { return <p>Drawing polygon</p>; }\n}\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}