{"ast":null,"code":"/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js'; // for pixel color reading\n\nconst tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\n\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n\n    this.texture_ = gl.createTexture();\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n\n    this.framebuffer_ = gl.createFramebuffer();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    this.size_ = size || [1, 1];\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n\n    this.data_ = new Uint8Array(0);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.dataCacheDirty_ = true;\n    this.updateSize_();\n  }\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n\n\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n\n\n  getSize() {\n    return this.size_;\n  }\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n\n\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n\n\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n      this.dataCacheDirty_ = false;\n    }\n\n    return this.data_;\n  }\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n\n\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n\n\n  getTexture() {\n    return this.texture_;\n  }\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n\n\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n  /**\n   * @private\n   */\n\n\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n\n}\n\nexport default WebGLRenderTarget;","map":{"version":3,"names":["equals","tmpArray4","Uint8Array","WebGLRenderTarget","constructor","helper","size","helper_","gl","getGL","texture_","createTexture","framebuffer_","createFramebuffer","size_","data_","dataCacheDirty_","updateSize_","setSize","getSize","clearCachedData","readAll","bindFramebuffer","FRAMEBUFFER","readPixels","RGBA","UNSIGNED_BYTE","readPixel","x","y","index","Math","floor","getTexture","getFramebuffer","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/webgl/RenderTarget.js"],"sourcesContent":["/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport {equals} from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(\n        0,\n        0,\n        size[0],\n        size[1],\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data_\n      );\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index =\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture_,\n      0\n    );\n\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\n\nexport default WebGLRenderTarget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}