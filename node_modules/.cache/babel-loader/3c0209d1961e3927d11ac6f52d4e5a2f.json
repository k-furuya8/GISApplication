{"ast":null,"code":"/**\n * @module ol/interaction/Extent\n */\nimport Event from '../events/Event.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { always } from '../events/condition.js';\nimport { boundingExtent, getArea } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { toUserExtent } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.always}.\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to the `Polygon` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to the `Point` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\n\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\n\nexport class ExtentEvent extends Event {\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n\n    this.extent = extent;\n  }\n\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'extentchanged', ExtentEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'extentchanged', Return>} ExtentOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\n\nclass Extent extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    super(\n    /** @type {import(\"./Pointer.js\").Options} */\n    options);\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {ExtentOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * Condition\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n    this.condition_ = options.condition ? options.condition : always;\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n\n    this.extent_ = null;\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n\n    this.pointerHandler_ = null;\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n\n    this.snappedToVertex_ = false;\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n\n    this.extentFeature_ = null;\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    this.vertexFeature_ = null;\n\n    if (!options) {\n      options = {};\n    }\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n\n\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.boxStyle ? options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.pointerStyle ? options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (options.extent) {\n      this.setExtent(options.extent);\n    }\n  }\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../Map.js\").default} map map\n   * @return {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n\n\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n\n    const sortByDistance = function (a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) - squaredDistanceToSegment(pixelCoordinate, b);\n    };\n\n    const extent = this.getExtentInternal();\n\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n      let vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex); //if the distance is within tolerance, snap to the segment\n\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n\n        return vertex;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n\n\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n    let vertex = this.snapToVertex_(pixel, map);\n\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @return {Feature} extent as featrue\n   * @private\n   */\n\n\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n\n    return extentFeature;\n  }\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @return {Feature} vertex as feature\n   * @private\n   */\n\n\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n\n    return vertexFeature;\n  }\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n\n\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {\n      return true;\n    } //display pointer (if not dragging)\n\n\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    } //call pointer to determine up/down/drag\n\n\n    super.handleEvent(mapBrowserEvent); //return false to stop propagation\n\n    return false;\n  }\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n    const extent = this.getExtentInternal();\n    let vertex = this.snapToVertex_(pixel, map); //find the extent corner opposite the passed corner\n\n    const getOpposingPoint = function (point) {\n      let x_ = null;\n      let y_ = null;\n\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n\n      return null;\n    };\n\n    if (vertex && extent) {\n      const x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      const y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null; //snap to point\n\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex)); //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([x, extent[1]]), getOpposingPoint([x, extent[3]]));\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([extent[0], y]), getOpposingPoint([extent[2], y]));\n      } //no snap - new bbox\n\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n\n    return true; //event handled; start downup sequence\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n  }\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null; //If bbox is zero area, set to null;\n\n    const extent = this.getExtentInternal();\n\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n\n    return false; //Stop handling downup sequence\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n\n\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n\n\n  getExtent() {\n    return toUserExtent(this.getExtentInternal(), this.getMap().getView().getProjection());\n  }\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n\n\n  getExtentInternal() {\n    return this.extent_;\n  }\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n\n\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  }\n\n}\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\n\n\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Polygon'];\n  };\n}\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\n\n\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\n\n\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\n\n\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\n\n\nfunction getSegments(extent) {\n  return [[[extent[0], extent[1]], [extent[0], extent[3]]], [[extent[0], extent[3]], [extent[2], extent[3]]], [[extent[2], extent[3]], [extent[2], extent[1]]], [[extent[2], extent[1]], [extent[0], extent[1]]]];\n}\n\nexport default Extent;","map":{"version":3,"names":["Event","Feature","MapBrowserEventType","Point","PointerInteraction","VectorLayer","VectorSource","always","boundingExtent","getArea","closestOnSegment","distance","coordinateDistance","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","fromExtent","polygonFromExtent","toUserExtent","ExtentEventType","EXTENTCHANGED","ExtentEvent","constructor","extent","Extent","options","on","once","un","condition_","condition","extent_","pointerHandler_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","style","boxStyle","getDefaultExtentStyleFunction","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixelInternal","sortByDistance","a","b","getExtentInternal","segments","getSegments","sort","closestSegment","vertex","vertexPixel","getPixelFromCoordinateInternal","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","extentFeature","getSource","addFeature","setGeometry","vertexFeature","geometry","getGeometry","setCoordinates","handleEvent","originalEvent","type","POINTERMOVE","handlingDownUpSequence","handleDownEvent","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","handleDragEvent","coordinate","handleUpEvent","setMap","getExtent","getMap","getView","getProjection","dispatchEvent","feature","resolution","fixedPoint","fixedP1","fixedP2"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/interaction/Extent.js"],"sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Event from '../events/Event.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {always} from '../events/condition.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {toUserExtent} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.always}.\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to the `Polygon` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to the `Point` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\nexport class ExtentEvent extends Event {\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'extentchanged', ExtentEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'extentchanged', Return>} ExtentOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\nclass Extent extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ExtentOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * Condition\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.condition_ = options.condition ? options.condition : always;\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!options) {\n      options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.boxStyle\n        ? options.boxStyle\n        : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.pointerStyle\n        ? options.pointerStyle\n        : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    if (options.extent) {\n      this.setExtent(options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../Map.js\").default} map map\n   * @return {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n    const sortByDistance = function (a, b) {\n      return (\n        squaredDistanceToSegment(pixelCoordinate, a) -\n        squaredDistanceToSegment(pixelCoordinate, b)\n      );\n    };\n    const extent = this.getExtentInternal();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex =\n            squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @return {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @return {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    const extent = this.getExtentInternal();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function (point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x =\n        vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      const y =\n        vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n        //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([x, extent[1]]),\n          getOpposingPoint([x, extent[3]])\n        );\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([extent[0], y]),\n          getOpposingPoint([extent[2], y])\n        );\n      }\n      //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtentInternal();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return toUserExtent(\n      this.getExtentInternal(),\n      this.getMap().getView().getProjection()\n    );\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtentInternal() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Polygon'];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [\n      [extent[0], extent[1]],\n      [extent[0], extent[3]],\n    ],\n    [\n      [extent[0], extent[3]],\n      [extent[2], extent[3]],\n    ],\n    [\n      [extent[2], extent[3]],\n      [extent[2], extent[1]],\n    ],\n    [\n      [extent[2], extent[1]],\n      [extent[0], extent[1]],\n    ],\n  ];\n}\n\nexport default Extent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}