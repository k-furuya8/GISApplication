{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\n\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super();\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n\n    this.geometryName_ = options.geometryName;\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n\n    this.extractGeometryName_ = options.extractGeometryName;\n    this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json'];\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n\n    if (object['type'] === 'Feature') {\n      geoJSONFeature =\n      /** @type {GeoJSONFeature} */\n      object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry':\n        /** @type {GeoJSONGeometry} */\n        object,\n        'properties': null\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], options);\n    const feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n\n    return feature;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject =\n    /** @type {GeoJSONObject} */\n    object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n\n    let features = null;\n\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection =\n      /** @type {GeoJSONFeatureCollection} */\n      object;\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n\n    return features;\n  }\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n\n    return (\n      /** @type {import(\"../proj/Projection.js\").default} */\n      projection\n    );\n  }\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n\n\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n    /** @type {GeoJSONFeature} */\n\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    const id = feature.getId();\n\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n\n\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  }\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n\n\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n\n}\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n\n\n  let geometry;\n\n  switch (object['type']) {\n    case 'Point':\n      {\n        geometry = readPointGeometry(\n        /** @type {GeoJSONPoint} */\n        object);\n        break;\n      }\n\n    case 'LineString':\n      {\n        geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */\n        object);\n        break;\n      }\n\n    case 'Polygon':\n      {\n        geometry = readPolygonGeometry(\n        /** @type {GeoJSONPolygon} */\n        object);\n        break;\n      }\n\n    case 'MultiPoint':\n      {\n        geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */\n        object);\n        break;\n      }\n\n    case 'MultiLineString':\n      {\n        geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */\n        object);\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */\n        object);\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */\n        object);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object['type']);\n      }\n  }\n\n  return transformGeometryWithOptions(geometry, false, options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\n\n\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, options);\n  });\n  return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  const type = geometry.getType();\n  /** @type {GeoJSONGeometry} */\n\n  let geoJSON;\n\n  switch (type) {\n    case 'Point':\n      {\n        geoJSON = writePointGeometry(\n        /** @type {Point} */\n        geometry, options);\n        break;\n      }\n\n    case 'LineString':\n      {\n        geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */\n        geometry, options);\n        break;\n      }\n\n    case 'Polygon':\n      {\n        geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */\n        geometry, options);\n        break;\n      }\n\n    case 'MultiPoint':\n      {\n        geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */\n        geometry, options);\n        break;\n      }\n\n    case 'MultiLineString':\n      {\n        geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */\n        geometry, options);\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */\n        geometry, options);\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */\n        geometry, options);\n        break;\n      }\n\n    case 'Circle':\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n\n\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n\n  if (options) {\n    right = options.rightHanded;\n  }\n\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n\n  if (options) {\n    right = options.rightHanded;\n  }\n\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\nexport default GeoJSON;","map":{"version":3,"names":["Feature","GeometryCollection","JSONFeature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","assert","get","getProjection","isEmpty","transformGeometryWithOptions","GeoJSON","constructor","options","dataProjection","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","readFeatureFromObject","object","geoJSONFeature","geometry","readGeometry","feature","setGeometryName","undefined","setGeometry","setId","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","push","readGeometryFromObject","readProjectionFromObject","crs","projection","writeFeatureObject","adaptOptions","properties","id","getId","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","writeFeaturesObject","objects","type","writeGeometryObject","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","readGeometryCollectionGeometry","Error","geometries","map","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","Object","assign","getGeometriesArray","coordinates","getCoordinates","right","rightHanded"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assert} from '../asserts.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n    this.supportedMediaTypes = [\n      'application/geo+json',\n      'application/vnd.geo+json',\n    ];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (\n      this.extractGeometryName_ &&\n      'geometry_name' in geoJSONFeature !== undefined\n    ) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features;\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case 'Point': {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case 'LineString': {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object)\n      );\n      break;\n    }\n    case 'Polygon': {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case 'MultiPoint': {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object)\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object)\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object)\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object)\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n  }\n  return transformGeometryWithOptions(geometry, false, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometry(geometry, options);\n    }\n  );\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point': {\n      geoJSON = writePointGeometry(/** @type {Point} */ (geometry), options);\n      break;\n    }\n    case 'LineString': {\n      geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Polygon': {\n      geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPoint': {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Circle': {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,eAApB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,GAAG,IAAIC,aAAf,QAAmC,YAAnC;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,4BAAR,QAA2C,cAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBZ,WAAtB,CAAkC;EAChC;AACF;AACA;EACEa,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;IAEA;IAEA;AACJ;AACA;;IACI,KAAKC,cAAL,GAAsBN,aAAa,CACjCK,OAAO,CAACC,cAAR,GAAyBD,OAAO,CAACC,cAAjC,GAAkD,WADjB,CAAnC;;IAIA,IAAID,OAAO,CAACE,iBAAZ,EAA+B;MAC7B;AACN;AACA;MACM,KAAKC,wBAAL,GAAgCR,aAAa,CAACK,OAAO,CAACE,iBAAT,CAA7C;IACD;IAED;AACJ;AACA;AACA;AACA;;;IACI,KAAKE,aAAL,GAAqBJ,OAAO,CAACK,YAA7B;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,oBAAL,GAA4BN,OAAO,CAACO,mBAApC;IAEA,KAAKC,mBAAL,GAA2B,CACzB,sBADyB,EAEzB,0BAFyB,CAA3B;EAID;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,qBAAqB,CAACC,MAAD,EAASV,OAAT,EAAkB;IACrC;AACJ;AACA;IACI,IAAIW,cAAc,GAAG,IAArB;;IACA,IAAID,MAAM,CAAC,MAAD,CAAN,KAAmB,SAAvB,EAAkC;MAChCC,cAAc;MAAG;MAA+BD,MAAhD;IACD,CAFD,MAEO;MACLC,cAAc,GAAG;QACf,QAAQ,SADO;QAEf;QAAY;QAAgCD,MAF7B;QAGf,cAAc;MAHC,CAAjB;IAKD;;IAED,MAAME,QAAQ,GAAGC,YAAY,CAACF,cAAc,CAAC,UAAD,CAAf,EAA6BX,OAA7B,CAA7B;IACA,MAAMc,OAAO,GAAG,IAAI9B,OAAJ,EAAhB;;IACA,IAAI,KAAKoB,aAAT,EAAwB;MACtBU,OAAO,CAACC,eAAR,CAAwB,KAAKX,aAA7B;IACD,CAFD,MAEO,IACL,KAAKE,oBAAL,IACA,mBAAmBK,cAAnB,KAAsCK,SAFjC,EAGL;MACAF,OAAO,CAACC,eAAR,CAAwBJ,cAAc,CAAC,eAAD,CAAtC;IACD;;IACDG,OAAO,CAACG,WAAR,CAAoBL,QAApB;;IAEA,IAAI,QAAQD,cAAZ,EAA4B;MAC1BG,OAAO,CAACI,KAAR,CAAcP,cAAc,CAAC,IAAD,CAA5B;IACD;;IAED,IAAIA,cAAc,CAAC,YAAD,CAAlB,EAAkC;MAChCG,OAAO,CAACK,aAAR,CAAsBR,cAAc,CAAC,YAAD,CAApC,EAAoD,IAApD;IACD;;IACD,OAAOG,OAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEM,sBAAsB,CAACV,MAAD,EAASV,OAAT,EAAkB;IACtC,MAAMqB,aAAa;IAAG;IAA8BX,MAApD;IACA;;IACA,IAAIY,QAAQ,GAAG,IAAf;;IACA,IAAID,aAAa,CAAC,MAAD,CAAb,KAA0B,mBAA9B,EAAmD;MACjD,MAAME,wBAAwB;MAAG;MAC/Bb,MADF;MAGAY,QAAQ,GAAG,EAAX;MACA,MAAME,eAAe,GAAGD,wBAAwB,CAAC,UAAD,CAAhD;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,eAAe,CAACG,MAArC,EAA6CF,CAAC,GAAGC,EAAjD,EAAqD,EAAED,CAAvD,EAA0D;QACxDH,QAAQ,CAACM,IAAT,CAAc,KAAKnB,qBAAL,CAA2Be,eAAe,CAACC,CAAD,CAA1C,EAA+CzB,OAA/C,CAAd;MACD;IACF,CATD,MASO;MACLsB,QAAQ,GAAG,CAAC,KAAKb,qBAAL,CAA2BC,MAA3B,EAAmCV,OAAnC,CAAD,CAAX;IACD;;IACD,OAAOsB,QAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEO,sBAAsB,CAACnB,MAAD,EAASV,OAAT,EAAkB;IACtC,OAAOa,YAAY,CAACH,MAAD,EAASV,OAAT,CAAnB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE8B,wBAAwB,CAACpB,MAAD,EAAS;IAC/B,MAAMqB,GAAG,GAAGrB,MAAM,CAAC,KAAD,CAAlB;IACA,IAAIsB,UAAJ;;IACA,IAAID,GAAJ,EAAS;MACP,IAAIA,GAAG,CAAC,MAAD,CAAH,IAAe,MAAnB,EAA2B;QACzBC,UAAU,GAAGrC,aAAa,CAACoC,GAAG,CAAC,YAAD,CAAH,CAAkB,MAAlB,CAAD,CAA1B;MACD,CAFD,MAEO,IAAIA,GAAG,CAAC,MAAD,CAAH,KAAgB,MAApB,EAA4B;QACjCC,UAAU,GAAGrC,aAAa,CAAC,UAAUoC,GAAG,CAAC,YAAD,CAAH,CAAkB,MAAlB,CAAX,CAA1B;MACD,CAFM,MAEA;QACLtC,MAAM,CAAC,KAAD,EAAQ,EAAR,CAAN,CADK,CACc;MACpB;IACF,CARD,MAQO;MACLuC,UAAU,GAAG,KAAK/B,cAAlB;IACD;;IACD;MAAO;MAAwD+B;IAA/D;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,kBAAkB,CAACnB,OAAD,EAAUd,OAAV,EAAmB;IACnCA,OAAO,GAAG,KAAKkC,YAAL,CAAkBlC,OAAlB,CAAV;IAEA;;IACA,MAAMU,MAAM,GAAG;MACb,QAAQ,SADK;MAEbE,QAAQ,EAAE,IAFG;MAGbuB,UAAU,EAAE;IAHC,CAAf;IAMA,MAAMC,EAAE,GAAGtB,OAAO,CAACuB,KAAR,EAAX;;IACA,IAAID,EAAE,KAAKpB,SAAX,EAAsB;MACpBN,MAAM,CAAC0B,EAAP,GAAYA,EAAZ;IACD;;IAED,IAAI,CAACtB,OAAO,CAACwB,aAAR,EAAL,EAA8B;MAC5B,OAAO5B,MAAP;IACD;;IAED,MAAMyB,UAAU,GAAGrB,OAAO,CAACyB,aAAR,EAAnB;IACA,MAAM3B,QAAQ,GAAGE,OAAO,CAAC0B,WAAR,EAAjB;;IACA,IAAI5B,QAAJ,EAAc;MACZF,MAAM,CAACE,QAAP,GAAkB6B,aAAa,CAAC7B,QAAD,EAAWZ,OAAX,CAA/B;MAEA,OAAOmC,UAAU,CAACrB,OAAO,CAAC4B,eAAR,EAAD,CAAjB;IACD;;IAED,IAAI,CAAC9C,OAAO,CAACuC,UAAD,CAAZ,EAA0B;MACxBzB,MAAM,CAACyB,UAAP,GAAoBA,UAApB;IACD;;IAED,OAAOzB,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEiC,mBAAmB,CAACrB,QAAD,EAAWtB,OAAX,EAAoB;IACrCA,OAAO,GAAG,KAAKkC,YAAL,CAAkBlC,OAAlB,CAAV;IACA,MAAM4C,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAInB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,QAAQ,CAACK,MAA9B,EAAsCF,CAAC,GAAGC,EAA1C,EAA8C,EAAED,CAAhD,EAAmD;MACjDmB,OAAO,CAAChB,IAAR,CAAa,KAAKK,kBAAL,CAAwBX,QAAQ,CAACG,CAAD,CAAhC,EAAqCzB,OAArC,CAAb;IACD;;IACD,OAAO;MACL6C,IAAI,EAAE,mBADD;MAELvB,QAAQ,EAAEsB;IAFL,CAAP;EAID;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,mBAAmB,CAAClC,QAAD,EAAWZ,OAAX,EAAoB;IACrC,OAAOyC,aAAa,CAAC7B,QAAD,EAAW,KAAKsB,YAAL,CAAkBlC,OAAlB,CAAX,CAApB;EACD;;AAvN+B;AA0NlC;AACA;AACA;AACA;AACA;;;AACA,SAASa,YAAT,CAAsBH,MAAtB,EAA8BV,OAA9B,EAAuC;EACrC,IAAI,CAACU,MAAL,EAAa;IACX,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACE,IAAIE,QAAJ;;EACA,QAAQF,MAAM,CAAC,MAAD,CAAd;IACE,KAAK,OAAL;MAAc;QACZE,QAAQ,GAAGmC,iBAAiB;QAAC;QAA6BrC,MAA9B,CAA5B;QACA;MACD;;IACD,KAAK,YAAL;MAAmB;QACjBE,QAAQ,GAAGoC,sBAAsB;QAC/B;QAAkCtC,MADH,CAAjC;QAGA;MACD;;IACD,KAAK,SAAL;MAAgB;QACdE,QAAQ,GAAGqC,mBAAmB;QAAC;QAA+BvC,MAAhC,CAA9B;QACA;MACD;;IACD,KAAK,YAAL;MAAmB;QACjBE,QAAQ,GAAGsC,sBAAsB;QAC/B;QAAkCxC,MADH,CAAjC;QAGA;MACD;;IACD,KAAK,iBAAL;MAAwB;QACtBE,QAAQ,GAAGuC,2BAA2B;QACpC;QAAuCzC,MADH,CAAtC;QAGA;MACD;;IACD,KAAK,cAAL;MAAqB;QACnBE,QAAQ,GAAGwC,wBAAwB;QACjC;QAAoC1C,MADH,CAAnC;QAGA;MACD;;IACD,KAAK,oBAAL;MAA2B;QACzBE,QAAQ,GAAGyC,8BAA8B;QACvC;QAA0C3C,MADH,CAAzC;QAGA;MACD;;IACD;MAAS;QACP,MAAM,IAAI4C,KAAJ,CAAU,+BAA+B5C,MAAM,CAAC,MAAD,CAA/C,CAAN;MACD;EAzCH;;EA2CA,OAAOb,4BAA4B,CAACe,QAAD,EAAW,KAAX,EAAkBZ,OAAlB,CAAnC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASqD,8BAAT,CAAwC3C,MAAxC,EAAgDV,OAAhD,EAAyD;EACvD,MAAMuD,UAAU,GAAG7C,MAAM,CAAC,YAAD,CAAN,CAAqB8C,GAArB;EACjB;AACJ;AACA;AACA;EACI,UAAU5C,QAAV,EAAoB;IAClB,OAAOC,YAAY,CAACD,QAAD,EAAWZ,OAAX,CAAnB;EACD,CAPgB,CAAnB;EASA,OAAO,IAAIf,kBAAJ,CAAuBsE,UAAvB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASR,iBAAT,CAA2BrC,MAA3B,EAAmC;EACjC,OAAO,IAAInB,KAAJ,CAAUmB,MAAM,CAAC,aAAD,CAAhB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASsC,sBAAT,CAAgCtC,MAAhC,EAAwC;EACtC,OAAO,IAAIvB,UAAJ,CAAeuB,MAAM,CAAC,aAAD,CAArB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASyC,2BAAT,CAAqCzC,MAArC,EAA6C;EAC3C,OAAO,IAAItB,eAAJ,CAAoBsB,MAAM,CAAC,aAAD,CAA1B,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASwC,sBAAT,CAAgCxC,MAAhC,EAAwC;EACtC,OAAO,IAAIrB,UAAJ,CAAeqB,MAAM,CAAC,aAAD,CAArB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAAS0C,wBAAT,CAAkC1C,MAAlC,EAA0C;EACxC,OAAO,IAAIpB,YAAJ,CAAiBoB,MAAM,CAAC,aAAD,CAAvB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASuC,mBAAT,CAA6BvC,MAA7B,EAAqC;EACnC,OAAO,IAAIlB,OAAJ,CAAYkB,MAAM,CAAC,aAAD,CAAlB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS+B,aAAT,CAAuB7B,QAAvB,EAAiCZ,OAAjC,EAA0C;EACxCY,QAAQ,GAAGf,4BAA4B,CAACe,QAAD,EAAW,IAAX,EAAiBZ,OAAjB,CAAvC;EACA,MAAM6C,IAAI,GAAGjC,QAAQ,CAAC6C,OAAT,EAAb;EAEA;;EACA,IAAIC,OAAJ;;EACA,QAAQb,IAAR;IACE,KAAK,OAAL;MAAc;QACZa,OAAO,GAAGC,kBAAkB;QAAC;QAAsB/C,QAAvB,EAAkCZ,OAAlC,CAA5B;QACA;MACD;;IACD,KAAK,YAAL;MAAmB;QACjB0D,OAAO,GAAGE,uBAAuB;QAC/B;QAA2BhD,QADI,EAE/BZ,OAF+B,CAAjC;QAIA;MACD;;IACD,KAAK,SAAL;MAAgB;QACd0D,OAAO,GAAGG,oBAAoB;QAC5B;QAAwBjD,QADI,EAE5BZ,OAF4B,CAA9B;QAIA;MACD;;IACD,KAAK,YAAL;MAAmB;QACjB0D,OAAO,GAAGI,uBAAuB;QAC/B;QAA2BlD,QADI,EAE/BZ,OAF+B,CAAjC;QAIA;MACD;;IACD,KAAK,iBAAL;MAAwB;QACtB0D,OAAO,GAAGK,4BAA4B;QACpC;QAAgCnD,QADI,EAEpCZ,OAFoC,CAAtC;QAIA;MACD;;IACD,KAAK,cAAL;MAAqB;QACnB0D,OAAO,GAAGM,yBAAyB;QACjC;QAA6BpD,QADI,EAEjCZ,OAFiC,CAAnC;QAIA;MACD;;IACD,KAAK,oBAAL;MAA2B;QACzB0D,OAAO,GAAGO,+BAA+B;QACvC;QAAmCrD,QADI,EAEvCZ,OAFuC,CAAzC;QAIA;MACD;;IACD,KAAK,QAAL;MAAe;QACb0D,OAAO,GAAG;UACRb,IAAI,EAAE,oBADE;UAERU,UAAU,EAAE;QAFJ,CAAV;QAIA;MACD;;IACD;MAAS;QACP,MAAM,IAAID,KAAJ,CAAU,gCAAgCT,IAA1C,CAAN;MACD;EAxDH;;EA0DA,OAAOa,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASO,+BAAT,CAAyCrD,QAAzC,EAAmDZ,OAAnD,EAA4D;EAC1DA,OAAO,GAAGkE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnE,OAAlB,CAAV;EACA,OAAOA,OAAO,CAACE,iBAAf;EACA,MAAMqD,UAAU,GAAG3C,QAAQ,CAACwD,kBAAT,GAA8BZ,GAA9B,CAAkC,UAAU5C,QAAV,EAAoB;IACvE,OAAO6B,aAAa,CAAC7B,QAAD,EAAWZ,OAAX,CAApB;EACD,CAFkB,CAAnB;EAGA,OAAO;IACL6C,IAAI,EAAE,oBADD;IAELU,UAAU,EAAEA;EAFP,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASK,uBAAT,CAAiChD,QAAjC,EAA2CZ,OAA3C,EAAoD;EAClD,OAAO;IACL6C,IAAI,EAAE,YADD;IAELwB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAT;EAFR,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASP,4BAAT,CAAsCnD,QAAtC,EAAgDZ,OAAhD,EAAyD;EACvD,OAAO;IACL6C,IAAI,EAAE,iBADD;IAELwB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAT;EAFR,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASR,uBAAT,CAAiClD,QAAjC,EAA2CZ,OAA3C,EAAoD;EAClD,OAAO;IACL6C,IAAI,EAAE,YADD;IAELwB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAT;EAFR,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASN,yBAAT,CAAmCpD,QAAnC,EAA6CZ,OAA7C,EAAsD;EACpD,IAAIuE,KAAJ;;EACA,IAAIvE,OAAJ,EAAa;IACXuE,KAAK,GAAGvE,OAAO,CAACwE,WAAhB;EACD;;EACD,OAAO;IACL3B,IAAI,EAAE,cADD;IAELwB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAT,CAAwBC,KAAxB;EAFR,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASZ,kBAAT,CAA4B/C,QAA5B,EAAsCZ,OAAtC,EAA+C;EAC7C,OAAO;IACL6C,IAAI,EAAE,OADD;IAELwB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAT;EAFR,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAST,oBAAT,CAA8BjD,QAA9B,EAAwCZ,OAAxC,EAAiD;EAC/C,IAAIuE,KAAJ;;EACA,IAAIvE,OAAJ,EAAa;IACXuE,KAAK,GAAGvE,OAAO,CAACwE,WAAhB;EACD;;EACD,OAAO;IACL3B,IAAI,EAAE,SADD;IAELwB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAT,CAAwBC,KAAxB;EAFR,CAAP;AAID;;AAED,eAAezE,OAAf"},"metadata":{},"sourceType":"module"}