{"ast":null,"code":"import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n\n      reader.onload = event => resolve(event.target.result);\n\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n\n}\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\n\n\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}","map":{"version":3,"names":["BaseSource","FileReaderSource","constructor","file","fetchSlice","slice","signal","Promise","resolve","reject","blob","offset","length","reader","FileReader","onload","event","target","result","onerror","onabort","readAsArrayBuffer","addEventListener","abort","makeFileReaderSource"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/geotiff/dist-module/source/filereader.js"],"sourcesContent":["import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;;AAEA,MAAMC,gBAAN,SAA+BD,UAA/B,CAA0C;EACxCE,WAAW,CAACC,IAAD,EAAO;IAChB;IACA,KAAKA,IAAL,GAAYA,IAAZ;EACD;;EAEe,MAAVC,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;IAC9B,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtC,MAAMC,IAAI,GAAG,KAAKP,IAAL,CAAUE,KAAV,CAAgBA,KAAK,CAACM,MAAtB,EAA8BN,KAAK,CAACM,MAAN,GAAeN,KAAK,CAACO,MAAnD,CAAb;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;MACAD,MAAM,CAACE,MAAP,GAAiBC,KAAD,IAAWR,OAAO,CAACQ,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAlC;;MACAL,MAAM,CAACM,OAAP,GAAiBV,MAAjB;MACAI,MAAM,CAACO,OAAP,GAAiBX,MAAjB;MACAI,MAAM,CAACQ,iBAAP,CAAyBX,IAAzB;;MAEA,IAAIJ,MAAJ,EAAY;QACVA,MAAM,CAACgB,gBAAP,CAAwB,OAAxB,EAAiC,MAAMT,MAAM,CAACU,KAAP,EAAvC;MACD;IACF,CAXM,CAAP;EAYD;;AAnBuC;AAsB1C;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,oBAAT,CAA8BrB,IAA9B,EAAoC;EACzC,OAAO,IAAIF,gBAAJ,CAAqBE,IAArB,CAAP;AACD"},"metadata":{},"sourceType":"module"}