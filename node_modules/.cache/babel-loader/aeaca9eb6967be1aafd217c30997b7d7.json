{"ast":null,"code":"/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\nimport FeatureFormat, { transformGeometryWithOptions } from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport { assert } from '../asserts.js';\nimport { get } from '../proj.js';\nimport { inflateEnds } from '../geom/flat/orient.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @param {Options} [options] Options.\n * @api\n */\n\nclass MVT extends FeatureFormat {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n    /**\n     * @type {Projection}\n     */\n\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels'\n    });\n    /**\n     * @private\n     * @type {import(\"../Feature.js\").FeatureClass}\n     */\n\n    this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n\n    this.layers_ = options.layers ? options.layers : null;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.idProperty_ = options.idProperty;\n    this.supportedMediaTypes = ['application/vnd.mapbox-vector-tile', 'application/x-protobuf'];\n  }\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n\n\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n    pbf.pos = feature.geometry;\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let coordsLen = 0;\n    let currentEnd = 0;\n\n    while (pbf.pos < end) {\n      if (!length) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (coordsLen > currentEnd) {\n            ends.push(coordsLen);\n            currentEnd = coordsLen;\n          }\n        }\n\n        flatCoordinates.push(x, y);\n        coordsLen += 2;\n      } else if (cmd === 7) {\n        if (coordsLen > currentEnd) {\n          // close polygon\n          flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);\n          coordsLen += 2;\n        }\n      } else {\n        assert(false, 59); // Invalid command found in the PBF\n      }\n    }\n\n    if (coordsLen > currentEnd) {\n      ends.push(coordsLen);\n      currentEnd = coordsLen;\n    }\n  }\n  /**\n   * @private\n   * @param {PBF} pbf PBF\n   * @param {Object} rawFeature Raw Mapbox feature.\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n   * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\n   */\n\n\n  createFeature_(pbf, rawFeature, options) {\n    const type = rawFeature.type;\n\n    if (type === 0) {\n      return null;\n    }\n\n    let feature;\n    const values = rawFeature.properties;\n    let id;\n\n    if (!this.idProperty_) {\n      id = rawFeature.id;\n    } else {\n      id = values[this.idProperty_];\n      delete values[this.idProperty_];\n    }\n\n    values[this.layerName_] = rawFeature.layer.name;\n    const flatCoordinates =\n    /** @type {Array<number>} */\n    [];\n    const ends =\n    /** @type {Array<number>} */\n    [];\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n    const geometryType = getGeometryType(type, ends.length);\n\n    if (this.featureClass_ === RenderFeature) {\n      feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);\n      feature.transform(options.dataProjection);\n    } else {\n      let geom;\n\n      if (geometryType == 'Polygon') {\n        const endss = inflateEnds(flatCoordinates, ends);\n        geom = endss.length > 1 ? new MultiPolygon(flatCoordinates, 'XY', endss) : new Polygon(flatCoordinates, 'XY', ends);\n      } else {\n        geom = geometryType === 'Point' ? new Point(flatCoordinates, 'XY') : geometryType === 'LineString' ? new LineString(flatCoordinates, 'XY') : geometryType === 'MultiPoint' ? new MultiPoint(flatCoordinates, 'XY') : geometryType === 'MultiLineString' ? new MultiLineString(flatCoordinates, 'XY', ends) : null;\n      }\n\n      const ctor =\n      /** @type {typeof import(\"../Feature.js\").default} */\n      this.featureClass_;\n      feature = new ctor();\n\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      }\n\n      const geometry = transformGeometryWithOptions(geom, false, options);\n      feature.setGeometry(geometry);\n\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n\n      feature.setProperties(values, true);\n    }\n\n    return feature;\n  }\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n\n\n  getType() {\n    return 'arraybuffer';\n  }\n  /**\n   * Read all features.\n   *\n   * @param {ArrayBuffer} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n\n\n  readFeatures(source, options) {\n    const layers = this.layers_;\n    options = this.adaptOptions(options);\n    const dataProjection = get(options.dataProjection);\n    dataProjection.setWorldExtent(options.extent);\n    options.dataProjection = dataProjection;\n    const pbf = new PBF(\n    /** @type {ArrayBuffer} */\n    source);\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\n    const features = [];\n\n    for (const name in pbfLayers) {\n      if (layers && !layers.includes(name)) {\n        continue;\n      }\n\n      const pbfLayer = pbfLayers[name];\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n      dataProjection.setExtent(extent);\n\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\n        const feature = this.createFeature_(pbf, rawFeature, options);\n\n        if (feature !== null) {\n          features.push(feature);\n        }\n      }\n    }\n\n    return features;\n  }\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  readProjection(source) {\n    return this.dataProjection;\n  }\n  /**\n   * Sets the layers that features will be read from.\n   * @param {Array<string>} layers Layers.\n   * @api\n   */\n\n\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n\n}\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\n\n\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    const layer = {\n      keys: [],\n      values: [],\n      features: []\n    };\n    const end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\n\n\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    let value = null;\n    const end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;\n    }\n\n    layer.values.push(value);\n  }\n}\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\n\n\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    const end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n      const key = feature.layer.keys[pbf.readVarint()];\n      const value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\n\n\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  const end = pbf.readVarint() + pbf.pos;\n  const feature = {\n    layer: layer,\n    type: 0,\n    properties: {}\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../geom/Geometry.js\").Type} The geometry type.\n */\n\n\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../geom/Geometry.js\").Type} */\n  let geometryType;\n\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon'; // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n\n  return geometryType;\n}\n\nexport default MVT;","map":{"version":3,"names":["FeatureFormat","transformGeometryWithOptions","LineString","MultiLineString","MultiPoint","MultiPolygon","PBF","Point","Polygon","Projection","RenderFeature","assert","get","inflateEnds","MVT","constructor","options","dataProjection","code","units","featureClass_","featureClass","geometryName_","geometryName","layerName_","layerName","layers_","layers","idProperty_","idProperty","supportedMediaTypes","readRawGeometry_","pbf","feature","flatCoordinates","ends","pos","geometry","end","readVarint","cmd","length","x","y","coordsLen","currentEnd","cmdLen","readSVarint","push","createFeature_","rawFeature","type","values","properties","id","layer","name","geometryType","getGeometryType","transform","geom","endss","ctor","setGeometryName","setGeometry","undefined","setId","setProperties","getType","readFeatures","source","adaptOptions","setWorldExtent","extent","pbfLayers","readFields","layersPBFReader","features","includes","pbfLayer","setExtent","i","ii","readRawFeature","readProjection","setLayers","tag","keys","layerPBFReader","version","readString","value","readFloat","readDouble","readVarint64","readBoolean","featurePBFReader","key","numEnds"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/format/MVT.js"],"sourcesContent":["/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\n\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport {assert} from '../asserts.js';\nimport {get} from '../proj.js';\nimport {inflateEnds} from '../geom/flat/orient.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../Feature.js\").FeatureClass} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @param {Options} [options] Options.\n * @api\n */\nclass MVT extends FeatureFormat {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {Projection}\n     */\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels',\n    });\n\n    /**\n     * @private\n     * @type {import(\"../Feature.js\").FeatureClass}\n     */\n    this.featureClass_ = options.featureClass\n      ? options.featureClass\n      : RenderFeature;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.idProperty_ = options.idProperty;\n\n    this.supportedMediaTypes = [\n      'application/vnd.mapbox-vector-tile',\n      'application/x-protobuf',\n    ];\n  }\n\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n    pbf.pos = feature.geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let coordsLen = 0;\n    let currentEnd = 0;\n\n    while (pbf.pos < end) {\n      if (!length) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (coordsLen > currentEnd) {\n            ends.push(coordsLen);\n            currentEnd = coordsLen;\n          }\n        }\n\n        flatCoordinates.push(x, y);\n        coordsLen += 2;\n      } else if (cmd === 7) {\n        if (coordsLen > currentEnd) {\n          // close polygon\n          flatCoordinates.push(\n            flatCoordinates[currentEnd],\n            flatCoordinates[currentEnd + 1]\n          );\n          coordsLen += 2;\n        }\n      } else {\n        assert(false, 59); // Invalid command found in the PBF\n      }\n    }\n\n    if (coordsLen > currentEnd) {\n      ends.push(coordsLen);\n      currentEnd = coordsLen;\n    }\n  }\n\n  /**\n   * @private\n   * @param {PBF} pbf PBF\n   * @param {Object} rawFeature Raw Mapbox feature.\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n   * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\n   */\n  createFeature_(pbf, rawFeature, options) {\n    const type = rawFeature.type;\n    if (type === 0) {\n      return null;\n    }\n\n    let feature;\n    const values = rawFeature.properties;\n\n    let id;\n    if (!this.idProperty_) {\n      id = rawFeature.id;\n    } else {\n      id = values[this.idProperty_];\n      delete values[this.idProperty_];\n    }\n\n    values[this.layerName_] = rawFeature.layer.name;\n\n    const flatCoordinates = /** @type {Array<number>} */ ([]);\n    const ends = /** @type {Array<number>} */ ([]);\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n\n    const geometryType = getGeometryType(type, ends.length);\n\n    if (this.featureClass_ === RenderFeature) {\n      feature = new this.featureClass_(\n        geometryType,\n        flatCoordinates,\n        ends,\n        values,\n        id\n      );\n      feature.transform(options.dataProjection);\n    } else {\n      let geom;\n      if (geometryType == 'Polygon') {\n        const endss = inflateEnds(flatCoordinates, ends);\n        geom =\n          endss.length > 1\n            ? new MultiPolygon(flatCoordinates, 'XY', endss)\n            : new Polygon(flatCoordinates, 'XY', ends);\n      } else {\n        geom =\n          geometryType === 'Point'\n            ? new Point(flatCoordinates, 'XY')\n            : geometryType === 'LineString'\n            ? new LineString(flatCoordinates, 'XY')\n            : geometryType === 'MultiPoint'\n            ? new MultiPoint(flatCoordinates, 'XY')\n            : geometryType === 'MultiLineString'\n            ? new MultiLineString(flatCoordinates, 'XY', ends)\n            : null;\n      }\n      const ctor = /** @type {typeof import(\"../Feature.js\").default} */ (\n        this.featureClass_\n      );\n      feature = new ctor();\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      }\n      const geometry = transformGeometryWithOptions(geom, false, options);\n      feature.setGeometry(geometry);\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n      feature.setProperties(values, true);\n    }\n\n    return feature;\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'arraybuffer';\n  }\n\n  /**\n   * Read all features.\n   *\n   * @param {ArrayBuffer} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    const layers = this.layers_;\n    options = this.adaptOptions(options);\n    const dataProjection = get(options.dataProjection);\n    dataProjection.setWorldExtent(options.extent);\n    options.dataProjection = dataProjection;\n\n    const pbf = new PBF(/** @type {ArrayBuffer} */ (source));\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\n    const features = [];\n    for (const name in pbfLayers) {\n      if (layers && !layers.includes(name)) {\n        continue;\n      }\n      const pbfLayer = pbfLayers[name];\n\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n      dataProjection.setExtent(extent);\n\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\n        const feature = this.createFeature_(pbf, rawFeature, options);\n        if (feature !== null) {\n          features.push(feature);\n        }\n      }\n    }\n\n    return features;\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Sets the layers that features will be read from.\n   * @param {Array<string>} layers Layers.\n   * @api\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n}\n\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    const layer = {\n      keys: [],\n      values: [],\n      features: [],\n    };\n    const end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    let value = null;\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value =\n        tag === 1\n          ? pbf.readString()\n          : tag === 2\n          ? pbf.readFloat()\n          : tag === 3\n          ? pbf.readDouble()\n          : tag === 4\n          ? pbf.readVarint64()\n          : tag === 5\n          ? pbf.readVarint()\n          : tag === 6\n          ? pbf.readSVarint()\n          : tag === 7\n          ? pbf.readBoolean()\n          : null;\n    }\n    layer.values.push(value);\n  }\n}\n\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      const key = feature.layer.keys[pbf.readVarint()];\n      const value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  const end = pbf.readVarint() + pbf.pos;\n\n  const feature = {\n    layer: layer,\n    type: 0,\n    properties: {},\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../geom/Geometry.js\").Type} The geometry type.\n */\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../geom/Geometry.js\").Type} */\n  let geometryType;\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon';\n    // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n  return geometryType;\n}\n\nexport default MVT;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}