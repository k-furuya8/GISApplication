{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { DEFAULT_VERSION } from './wms.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { ceil, floor, round } from '../math.js';\nimport { compareVersions } from '../string.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { get as getProjection, transform } from '../proj.js';\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\n\nconst DECIMALS = 4;\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\n\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.v13_ = true;\n    this.updateV13_();\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n\n    this.serverType_ = options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    Object.assign(baseParams, this.params_, params);\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  }\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n\n\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n\n      if (!isSingleLayer) {\n        return undefined;\n      }\n\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n    return appendParams(\n    /** @type {string} */\n    this.url_, baseParams);\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  getParams() {\n    return this.params_;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n    const center = getCenter(extent);\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    const requestWidth = ceil(this.ratio_ * getWidth(extent) / imageResolution, DECIMALS);\n    const requestHeight = ceil(this.ratio_ * getHeight(extent) / imageResolution, DECIMALS);\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    const image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    Object.assign(params, this.params_);\n    this.imageSize_[0] = round(getWidth(requestExtent) / imageResolution, DECIMALS);\n    this.imageSize_[1] = round(getHeight(requestExtent) / imageResolution, DECIMALS);\n    const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  }\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          // Unknown `serverType` configured\n          assert(false, 8);\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    return appendParams(\n    /** @type {string} */\n    this.url_, params);\n  }\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  getUrl() {\n    return this.url_;\n  }\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n  /**\n   * @private\n   */\n\n\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n}\n\nexport default ImageWMS;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","DEFAULT_VERSION","appendParams","assert","calculateSourceResolution","ceil","floor","round","compareVersions","containsExtent","getCenter","getForViewAndSize","getHeight","getWidth","get","getProjection","transform","DECIMALS","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","constructor","options","attributions","interpolate","projection","resolutions","crossOrigin_","crossOrigin","undefined","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","v13_","updateV13_","serverType_","serverType","hidpi_","hidpi","image_","imageSize_","renderedRevision_","ratio_","ratio","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","extent","baseParams","Object","assign","x","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","length","mpu","getMetersPerUnit","pixelSize","getParams","getImageInternal","pixelRatio","findNearestResolution","imageResolution","center","viewWidth","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","image","getRevision","getResolution","getPixelRatio","getExtent","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","getCode","dpi","axisOrientation","getAxisOrientation","bbox","substr","join","getUrl","setImageLoadFunction","changed","setUrl","updateParams","version"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/ImageWMS.js"],"sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {ceil, floor, round} from '../math.js';\nimport {compareVersions} from '../string.js';\nimport {\n  containsExtent,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 4;\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(\n      coordinate,\n      resolution,\n      0,\n      GETFEATUREINFO_IMAGE_SIZE\n    );\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent,\n      GETFEATUREINFO_IMAGE_SIZE,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    const center = getCenter(extent);\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\n      viewWidth,\n      viewHeight,\n    ]);\n    const requestWidth = ceil(\n      (this.ratio_ * getWidth(extent)) / imageResolution,\n      DECIMALS\n    );\n    const requestHeight = ceil(\n      (this.ratio_ * getHeight(extent)) / imageResolution,\n      DECIMALS\n    );\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\n      requestWidth,\n      requestHeight,\n    ]);\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, this.params_);\n\n    this.imageSize_[0] = round(\n      getWidth(requestExtent) / imageResolution,\n      DECIMALS\n    );\n    this.imageSize_[1] = round(\n      getHeight(requestExtent) / imageResolution,\n      DECIMALS\n    );\n\n    const url = this.getRequestUrl_(\n      requestExtent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      requestExtent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 8);\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\nexport default ImageWMS;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,IAAqBC,wBAArB,QAAoD,YAApD;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,SAAQC,eAAR,QAA8B,UAA9B;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,yBAAR,QAAwC,cAAxC;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,KAArB,QAAiC,YAAjC;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,iBAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,cANP;AAOA,SAAQC,GAAG,IAAIC,aAAf,EAA8BC,SAA9B,QAA8C,YAA9C;AAEA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,CAAjB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,yBAAyB,GAAG,CAAC,GAAD,EAAM,GAAN,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAN,SAAuBrB,WAAvB,CAAmC;EACjC;AACF;AACA;EACEsB,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAH,GAAa,EAA9B;IAEA,MAAM;MACJC,YAAY,EAAED,OAAO,CAACC,YADlB;MAEJC,WAAW,EAAEF,OAAO,CAACE,WAFjB;MAGJC,UAAU,EAAEH,OAAO,CAACG,UAHhB;MAIJC,WAAW,EAAEJ,OAAO,CAACI;IAJjB,CAAN;IAOA;AACJ;AACA;AACA;;IACI,KAAKC,YAAL,GACEL,OAAO,CAACM,WAAR,KAAwBC,SAAxB,GAAoCP,OAAO,CAACM,WAA5C,GAA0D,IAD5D;IAGA;AACJ;AACA;AACA;;IACI,KAAKE,IAAL,GAAYR,OAAO,CAACS,GAApB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,kBAAL,GACEV,OAAO,CAACW,iBAAR,KAA8BJ,SAA9B,GACIP,OAAO,CAACW,iBADZ,GAEIjC,wBAHN;IAKA;AACJ;AACA;AACA;;IACI,KAAKkC,OAAL,GAAeZ,OAAO,CAACa,MAAR,IAAkB,EAAjC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKC,UAAL;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmBhB,OAAO,CAACiB,UAA3B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAclB,OAAO,CAACmB,KAAR,KAAkBZ,SAAlB,GAA8BP,OAAO,CAACmB,KAAtC,GAA8C,IAA5D;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,IAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,iBAAL,GAAyB,CAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcvB,OAAO,CAACwB,KAAR,KAAkBjB,SAAlB,GAA8BP,OAAO,CAACwB,KAAtC,GAA8C,GAA5D;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,iBAAiB,CAACC,UAAD,EAAaC,UAAb,EAAyBxB,UAAzB,EAAqCU,MAArC,EAA6C;IAC5D,IAAI,KAAKL,IAAL,KAAcD,SAAlB,EAA6B;MAC3B,OAAOA,SAAP;IACD;;IACD,MAAMqB,aAAa,GAAGlC,aAAa,CAACS,UAAD,CAAnC;IACA,MAAM0B,mBAAmB,GAAG,KAAKnC,aAAL,EAA5B;;IAEA,IAAImC,mBAAmB,IAAIA,mBAAmB,KAAKD,aAAnD,EAAkE;MAChED,UAAU,GAAG5C,yBAAyB,CACpC8C,mBADoC,EAEpCD,aAFoC,EAGpCF,UAHoC,EAIpCC,UAJoC,CAAtC;MAMAD,UAAU,GAAG/B,SAAS,CAAC+B,UAAD,EAAaE,aAAb,EAA4BC,mBAA5B,CAAtB;IACD;;IAED,MAAMC,MAAM,GAAGxC,iBAAiB,CAC9BoC,UAD8B,EAE9BC,UAF8B,EAG9B,CAH8B,EAI9B9B,yBAJ8B,CAAhC;IAOA,MAAMkC,UAAU,GAAG;MACjB,WAAW,KADM;MAEjB,WAAWnD,eAFM;MAGjB,WAAW,gBAHM;MAIjB,UAAU,WAJO;MAKjB,eAAe,IALE;MAMjB,gBAAgB,KAAKgC,OAAL,CAAa,QAAb;IANC,CAAnB;IAQAoB,MAAM,CAACC,MAAP,CAAcF,UAAd,EAA0B,KAAKnB,OAA/B,EAAwCC,MAAxC;IAEA,MAAMqB,CAAC,GAAGjD,KAAK,CAAC,CAACyC,UAAU,CAAC,CAAD,CAAV,GAAgBI,MAAM,CAAC,CAAD,CAAvB,IAA8BH,UAA/B,EAA2C/B,QAA3C,CAAf;IACA,MAAMuC,CAAC,GAAGlD,KAAK,CAAC,CAAC6C,MAAM,CAAC,CAAD,CAAN,GAAYJ,UAAU,CAAC,CAAD,CAAvB,IAA8BC,UAA/B,EAA2C/B,QAA3C,CAAf;IACAmC,UAAU,CAAC,KAAKjB,IAAL,GAAY,GAAZ,GAAkB,GAAnB,CAAV,GAAoCoB,CAApC;IACAH,UAAU,CAAC,KAAKjB,IAAL,GAAY,GAAZ,GAAkB,GAAnB,CAAV,GAAoCqB,CAApC;IAEA,OAAO,KAAKC,cAAL,CACLN,MADK,EAELjC,yBAFK,EAGL,CAHK,EAILgC,mBAAmB,IAAID,aAJlB,EAKLG,UALK,CAAP;EAOD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEM,YAAY,CAACV,UAAD,EAAad,MAAb,EAAqB;IAC/B,IAAI,KAAKL,IAAL,KAAcD,SAAlB,EAA6B;MAC3B,OAAOA,SAAP;IACD;;IAED,MAAMwB,UAAU,GAAG;MACjB,WAAW,KADM;MAEjB,WAAWnD,eAFM;MAGjB,WAAW,kBAHM;MAIjB,UAAU;IAJO,CAAnB;;IAOA,IAAIiC,MAAM,KAAKN,SAAX,IAAwBM,MAAM,CAAC,OAAD,CAAN,KAAoBN,SAAhD,EAA2D;MACzD,MAAM+B,MAAM,GAAG,KAAK1B,OAAL,CAAa2B,MAA5B;MACA,MAAMC,aAAa,GAAG,CAACC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAD,IAA0BA,MAAM,CAACK,MAAP,KAAkB,CAAlE;;MACA,IAAI,CAACH,aAAL,EAAoB;QAClB,OAAOjC,SAAP;MACD;;MACDwB,UAAU,CAAC,OAAD,CAAV,GAAsBO,MAAtB;IACD;;IAED,IAAIX,UAAU,KAAKpB,SAAnB,EAA8B;MAC5B,MAAMqC,GAAG,GAAG,KAAKlD,aAAL,KACR,KAAKA,aAAL,GAAqBmD,gBAArB,EADQ,GAER,CAFJ;MAGA,MAAMC,SAAS,GAAG,OAAlB;MACAf,UAAU,CAAC,OAAD,CAAV,GAAuBJ,UAAU,GAAGiB,GAAd,GAAqBE,SAA3C;IACD;;IAEDd,MAAM,CAACC,MAAP,CAAcF,UAAd,EAA0BlB,MAA1B;IAEA,OAAOhC,YAAY;IAAC;IAAuB,KAAK2B,IAA7B,EAAoCuB,UAApC,CAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEgB,SAAS,GAAG;IACV,OAAO,KAAKnC,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEoC,gBAAgB,CAAClB,MAAD,EAASH,UAAT,EAAqBsB,UAArB,EAAiC9C,UAAjC,EAA6C;IAC3D,IAAI,KAAKK,IAAL,KAAcD,SAAlB,EAA6B;MAC3B,OAAO,IAAP;IACD;;IAEDoB,UAAU,GAAG,KAAKuB,qBAAL,CAA2BvB,UAA3B,CAAb;;IAEA,IAAIsB,UAAU,IAAI,CAAd,KAAoB,CAAC,KAAK/B,MAAN,IAAgB,KAAKF,WAAL,KAAqBT,SAAzD,CAAJ,EAAyE;MACvE0C,UAAU,GAAG,CAAb;IACD;;IAED,MAAME,eAAe,GAAGxB,UAAU,GAAGsB,UAArC;IAEA,MAAMG,MAAM,GAAG/D,SAAS,CAACyC,MAAD,CAAxB;IACA,MAAMuB,SAAS,GAAGrE,IAAI,CAACQ,QAAQ,CAACsC,MAAD,CAAR,GAAmBqB,eAApB,EAAqCvD,QAArC,CAAtB;IACA,MAAM0D,UAAU,GAAGtE,IAAI,CAACO,SAAS,CAACuC,MAAD,CAAT,GAAoBqB,eAArB,EAAsCvD,QAAtC,CAAvB;IACA,MAAM2D,UAAU,GAAGjE,iBAAiB,CAAC8D,MAAD,EAASD,eAAT,EAA0B,CAA1B,EAA6B,CAC/DE,SAD+D,EAE/DC,UAF+D,CAA7B,CAApC;IAIA,MAAME,YAAY,GAAGxE,IAAI,CACtB,KAAKuC,MAAL,GAAc/B,QAAQ,CAACsC,MAAD,CAAvB,GAAmCqB,eADZ,EAEvBvD,QAFuB,CAAzB;IAIA,MAAM6D,aAAa,GAAGzE,IAAI,CACvB,KAAKuC,MAAL,GAAchC,SAAS,CAACuC,MAAD,CAAxB,GAAoCqB,eADZ,EAExBvD,QAFwB,CAA1B;IAIA,MAAM8D,aAAa,GAAGpE,iBAAiB,CAAC8D,MAAD,EAASD,eAAT,EAA0B,CAA1B,EAA6B,CAClEK,YADkE,EAElEC,aAFkE,CAA7B,CAAvC;IAKA,MAAME,KAAK,GAAG,KAAKvC,MAAnB;;IACA,IACEuC,KAAK,IACL,KAAKrC,iBAAL,IAA0B,KAAKsC,WAAL,EAD1B,IAEAD,KAAK,CAACE,aAAN,MAAyBlC,UAFzB,IAGAgC,KAAK,CAACG,aAAN,MAAyBb,UAHzB,IAIA7D,cAAc,CAACuE,KAAK,CAACI,SAAN,EAAD,EAAoBR,UAApB,CALhB,EAME;MACA,OAAOI,KAAP;IACD;;IAED,MAAM9C,MAAM,GAAG;MACb,WAAW,KADE;MAEb,WAAWjC,eAFE;MAGb,WAAW,QAHE;MAIb,UAAU,WAJG;MAKb,eAAe;IALF,CAAf;IAOAoD,MAAM,CAACC,MAAP,CAAcpB,MAAd,EAAsB,KAAKD,OAA3B;IAEA,KAAKS,UAAL,CAAgB,CAAhB,IAAqBnC,KAAK,CACxBM,QAAQ,CAACkE,aAAD,CAAR,GAA0BP,eADF,EAExBvD,QAFwB,CAA1B;IAIA,KAAKyB,UAAL,CAAgB,CAAhB,IAAqBnC,KAAK,CACxBK,SAAS,CAACmE,aAAD,CAAT,GAA2BP,eADH,EAExBvD,QAFwB,CAA1B;IAKA,MAAMa,GAAG,GAAG,KAAK2B,cAAL,CACVsB,aADU,EAEV,KAAKrC,UAFK,EAGV4B,UAHU,EAIV9C,UAJU,EAKVU,MALU,CAAZ;IAQA,KAAKO,MAAL,GAAc,IAAIzC,YAAJ,CACZ+E,aADY,EAEZ/B,UAFY,EAGZsB,UAHY,EAIZxC,GAJY,EAKZ,KAAKJ,YALO,EAMZ,KAAKK,kBANO,CAAd;IASA,KAAKY,iBAAL,GAAyB,KAAKsC,WAAL,EAAzB;IAEA,KAAKxC,MAAL,CAAY4C,gBAAZ,CACExF,SAAS,CAACyF,MADZ,EAEE,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAFF;IAKA,OAAO,KAAK/C,MAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgD,oBAAoB,GAAG;IACrB,OAAO,KAAK1D,kBAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE0B,cAAc,CAACN,MAAD,EAASuC,IAAT,EAAepB,UAAf,EAA2B9C,UAA3B,EAAuCU,MAAvC,EAA+C;IAC3D/B,MAAM,CAAC,KAAK0B,IAAL,KAAcD,SAAf,EAA0B,CAA1B,CAAN,CAD2D,CACvB;;IAEpCM,MAAM,CAAC,KAAKC,IAAL,GAAY,KAAZ,GAAoB,KAArB,CAAN,GAAoCX,UAAU,CAACmE,OAAX,EAApC;;IAEA,IAAI,EAAE,YAAY,KAAK1D,OAAnB,CAAJ,EAAiC;MAC/BC,MAAM,CAAC,QAAD,CAAN,GAAmB,EAAnB;IACD;;IAED,IAAIoC,UAAU,IAAI,CAAlB,EAAqB;MACnB,QAAQ,KAAKjC,WAAb;QACE,KAAK,WAAL;UACE,MAAMuD,GAAG,GAAI,KAAKtB,UAAL,GAAkB,GAAnB,GAA0B,CAAtC;;UACA,IAAI,oBAAoBpC,MAAxB,EAAgC;YAC9BA,MAAM,CAAC,gBAAD,CAAN,IAA4B,UAAU0D,GAAtC;UACD,CAFD,MAEO;YACL1D,MAAM,CAAC,gBAAD,CAAN,GAA2B,SAAS0D,GAApC;UACD;;UACD;;QACF,KAAK,WAAL;UACE1D,MAAM,CAAC,gBAAD,CAAN,GAA2B,KAAKoC,UAAhC;UACA;;QACF,KAAK,gBAAL;QACA,KAAK,MAAL;UACEpC,MAAM,CAAC,KAAD,CAAN,GAAgB,KAAKoC,UAArB;UACA;;QACF;UAAS;UACPnE,MAAM,CAAC,KAAD,EAAQ,CAAR,CAAN;UACA;MAlBJ;IAoBD;;IAED+B,MAAM,CAAC,OAAD,CAAN,GAAkBwD,IAAI,CAAC,CAAD,CAAtB;IACAxD,MAAM,CAAC,QAAD,CAAN,GAAmBwD,IAAI,CAAC,CAAD,CAAvB;IAEA,MAAMG,eAAe,GAAGrE,UAAU,CAACsE,kBAAX,EAAxB;IACA,IAAIC,IAAJ;;IACA,IAAI,KAAK5D,IAAL,IAAa0D,eAAe,CAACG,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,KAAgC,IAAjD,EAAuD;MACrDD,IAAI,GAAG,CAAC5C,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B,EAAkCA,MAAM,CAAC,CAAD,CAAxC,CAAP;IACD,CAFD,MAEO;MACL4C,IAAI,GAAG5C,MAAP;IACD;;IACDjB,MAAM,CAAC,MAAD,CAAN,GAAiB6D,IAAI,CAACE,IAAL,CAAU,GAAV,CAAjB;IAEA,OAAO/F,YAAY;IAAC;IAAuB,KAAK2B,IAA7B,EAAoCK,MAApC,CAAnB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgE,MAAM,GAAG;IACP,OAAO,KAAKrE,IAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEsE,oBAAoB,CAACnE,iBAAD,EAAoB;IACtC,KAAKS,MAAL,GAAc,IAAd;IACA,KAAKV,kBAAL,GAA0BC,iBAA1B;IACA,KAAKoE,OAAL;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,MAAM,CAACvE,GAAD,EAAM;IACV,IAAIA,GAAG,IAAI,KAAKD,IAAhB,EAAsB;MACpB,KAAKA,IAAL,GAAYC,GAAZ;MACA,KAAKW,MAAL,GAAc,IAAd;MACA,KAAK2D,OAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEE,YAAY,CAACpE,MAAD,EAAS;IACnBmB,MAAM,CAACC,MAAP,CAAc,KAAKrB,OAAnB,EAA4BC,MAA5B;IACA,KAAKE,UAAL;IACA,KAAKK,MAAL,GAAc,IAAd;IACA,KAAK2D,OAAL;EACD;EAED;AACF;AACA;;;EACEhE,UAAU,GAAG;IACX,MAAMmE,OAAO,GAAG,KAAKtE,OAAL,CAAa,SAAb,KAA2BhC,eAA3C;IACA,KAAKkC,IAAL,GAAY3B,eAAe,CAAC+F,OAAD,EAAU,KAAV,CAAf,IAAmC,CAA/C;EACD;;AAlagC;;AAqanC,eAAepF,QAAf"},"metadata":{},"sourceType":"module"}