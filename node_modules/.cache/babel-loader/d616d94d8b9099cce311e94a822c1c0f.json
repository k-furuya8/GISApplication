{"ast":null,"code":"/**\n * @module ol/render/canvas/ExecutorGroup\n */\nimport Executor from './Executor.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { isEmpty } from '../../obj.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { transform2D } from '../../geom/flat/transform.js';\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\n\nconst ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   */\n  constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, renderBuffer) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overlaps_ = overlaps;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.resolution_ = resolution;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.renderBuffer_ = renderBuffer;\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\n     */\n\n    this.executorsByZIndex_ = {};\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.hitDetectionContext_ = null;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.hitDetectionTransform_ = createTransform();\n    this.createExecutors_(allInstructions);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n\n\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n\n\n  createExecutors_(allInstructions) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n\n      const instructionByZindex = allInstructions[zIndex];\n\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n      }\n    }\n  }\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n\n\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n    const newContext = !this.hitDetectionContext_;\n\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);\n    }\n\n    const context = this.hitDetectionContext_;\n\n    if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n\n    let hitExtent;\n\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n    let builderType;\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n\n    function featureCallback(feature, geometry) {\n      const imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (!declutteredFeatures || builderType !== 'Image' && builderType !== 'Text' || declutteredFeatures.includes(feature)) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - idx % contextSize;\n            const y = hitTolerance - (idx / contextSize | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n\n            if (result) {\n              return result;\n            }\n          }\n\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n\n      return undefined;\n    }\n    /** @type {Array<number>} */\n\n\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n    let i, j, executors, executor, result;\n\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n\n\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n\n    if (!maxExtent) {\n      return null;\n    }\n\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n\n\n  execute(context, contextScale, transform, viewRotation, snapToPixel, builderTypes, declutterTree) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction); // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    builderTypes = builderTypes ? builderTypes : ORDER;\n    let i, ii, j, jj, replays, replay;\n\n    if (declutterTree) {\n      zs.reverse();\n    }\n\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        replay = replays[builderType];\n\n        if (replay !== undefined) {\n          replay.execute(context, contextScale, transform, viewRotation, snapToPixel, declutterTree);\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  }\n\n}\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\n\n\nconst circlePixelIndexArrayCache = {};\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\n\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n\n      let distance = distances[distanceSq];\n\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\nexport default ExecutorGroup;","map":{"version":3,"names":["Executor","buffer","createEmpty","extendCoordinate","compose","composeTransform","create","createTransform","createCanvasContext2D","isEmpty","numberSafeCompareFunction","transform2D","ORDER","ExecutorGroup","constructor","maxExtent","resolution","pixelRatio","overlaps","allInstructions","renderBuffer","maxExtent_","overlaps_","pixelRatio_","resolution_","renderBuffer_","executorsByZIndex_","hitDetectionContext_","hitDetectionTransform_","createExecutors_","clip","context","transform","flatClipCoords","getClipCoords","beginPath","moveTo","lineTo","zIndex","executors","undefined","instructionByZindex","builderType","instructions","hasExecutors","candidates","i","ii","length","forEachFeatureAtCoordinate","coordinate","rotation","hitTolerance","callback","declutteredFeatures","Math","round","contextSize","newContext","canvas","width","height","clearRect","hitExtent","indexes","getPixelIndexArray","featureCallback","feature","geometry","imageData","getImageData","data","includes","idx","x","y","result","zs","Object","keys","map","Number","sort","j","executor","zIndexKey","toString","executeHitDetection","minX","minY","maxX","maxY","execute","contextScale","viewRotation","snapToPixel","builderTypes","declutterTree","save","jj","replays","replay","reverse","restore","circlePixelIndexArrayCache","radius","size","maxDistanceSq","distances","Array","distanceSq","distance","push","pixelIndex"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/render/canvas/ExecutorGroup.js"],"sourcesContent":["/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport Executor from './Executor.js';\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {isEmpty} from '../../obj.js';\nimport {numberSafeCompareFunction} from '../../array.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nconst ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    renderBuffer\n  ) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    this.createExecutors_(allInstructions);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n  createExecutors_(allInstructions) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1]\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(\n        contextSize,\n        contextSize\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            (builderType !== 'Image' && builderType !== 'Text') ||\n            declutteredFeatures.includes(feature)\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    builderTypes,\n    declutterTree\n  ) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    builderTypes = builderTypes ? builderTypes : ORDER;\n    let i, ii, j, jj, replays, replay;\n    if (declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        replay = replays[builderType];\n        if (replay !== undefined) {\n          replay.execute(\n            context,\n            contextScale,\n            transform,\n            viewRotation,\n            snapToPixel,\n            declutterTree\n          );\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\nexport default ExecutorGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}