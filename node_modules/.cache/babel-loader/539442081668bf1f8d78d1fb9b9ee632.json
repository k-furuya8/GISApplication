{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\n\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    /**\n     * @type {number}\n     */\n\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n    /**\n     * @type {number}\n     */\n\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n\n    const scale = options.scale !== undefined ? options.scale : 1;\n    /**\n     * @type {boolean}\n     */\n\n    const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    });\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.normalizedAnchor_ = null;\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n\n    const image = options.img !== undefined ? options.img : null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n\n    this.imgSize_ = options.imgSize;\n    /**\n     * @type {string|undefined}\n     */\n\n    let src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n\n    assert(!image || image && this.imgSize_, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src =\n      /** @type {HTMLImageElement} */\n      image.src || getUid(image);\n    }\n\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n\n    const imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n\n    this.iconImage_ = getIconImage(image,\n    /** @type {string} */\n    src, this.imgSize_ !== undefined ? this.imgSize_ : null, this.crossOrigin_, imageState, this.color_);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.origin_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.size_ = options.size !== undefined ? options.size : null;\n  }\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    const scale = this.getScale();\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      imgSize: this.imgSize_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n  }\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n\n      if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n        if (!size) {\n          return null;\n        }\n\n        anchor = this.anchor_.slice();\n\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n\n        if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[0] = -anchor[0] + size[0];\n        }\n\n        if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n\n      this.normalizedAnchor_ = anchor;\n    }\n\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray(); // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n\n    return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n  }\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n\n\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n\n\n  getColor() {\n    return this.color_;\n  }\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n\n\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n\n\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n\n\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n\n      if (!size || !iconImageSize) {\n        return null;\n      }\n\n      offset = offset.slice();\n\n      if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n\n      if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n\n    this.origin_ = offset;\n    return this.origin_;\n  }\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n\n\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n\n\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n\n\n  load() {\n    this.iconImage_.load();\n  }\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n\n}\n\nexport default Icon;","map":{"version":3,"names":["EventType","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","Icon","constructor","options","opacity","undefined","rotation","scale","rotateWithView","displacement","declutterMode","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","imgSize_","imgSize","src","length","imageState","IDLE","LOADED","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","clone","getScale","slice","getOpacity","getRotateWithView","getRotation","Array","isArray","getSrc","getDisplacement","getDeclutterMode","getAnchor","getSize","getScaleArray","setAnchor","getColor","getImage","pixelRatio","getPixelRatio","getImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","listenImageChange","listener","addEventListener","CHANGE","load","unlistenImageChange","removeEventListener"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    this.imgSize_ = options.imgSize;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && this.imgSize_), 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState =\n      options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (src),\n      this.imgSize_ !== undefined ? this.imgSize_ : null,\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      imgSize: this.imgSize_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}