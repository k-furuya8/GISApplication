{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\n\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n    /** @private */\n\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n    /**\n     * @type {boolean}\n     */\n\n    this.animatingOrInteracting_;\n    /**\n     * @type {ImageData}\n     */\n\n    this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n\n    this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    this.wrappedRenderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n\n    this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n\n    this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n\n    this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n\n    this.replayGroupChanged = true;\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    this.declutterExecutorGroup = null;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n\n    this.clipping = true;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.compositionContext_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.opacity_ = 1;\n  }\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n\n\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n\n    do {\n      const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n      executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterTree);\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n\n\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n      this.releaseCompositionContext_();\n    }\n  }\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex]; // set forward and inverse pixel transforms\n\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    const canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n\n    if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n      return null;\n    } // resize and clear\n\n\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_(); // clipped rendering if layer extent is set\n\n    let clipped = false;\n    let render = true;\n\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n\n    return this.container;\n  }\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n\n\n  getFeatures(pixel) {\n    return new Promise(\n    /**\n     * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (resolve) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n\n          world = 0;\n          startX = extent[2];\n\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    }.bind(this));\n  }\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n\n    const features = {};\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n\n    executorGroups.some(executorGroup => {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(item => item.value) : null);\n    });\n    return result;\n  }\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n\n\n  handleFontsChanged() {\n    const layer = this.getLayer();\n\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n\n\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n\n    this.animatingOrInteracting_ = false;\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection); // If the extent crosses the date line, we load data for both edges of the worlds\n\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n\n    if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n    const replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    let declutterBuilderGroup;\n\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(userExtent, toUserResolution(resolution, projection), userProjection);\n      }\n\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n\n    const render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (feature) {\n      let styles;\n      const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n\n      if (styles) {\n        const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n        ready = ready && !dirty;\n      }\n    }.bind(this);\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  }\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n\n\n  renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n\n    let loading = false;\n\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup);\n    }\n\n    return loading;\n  }\n\n}\n\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasLayerRenderer","canvasPool","ExecutorGroup","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","makeInverse","makeScale","toString","transformToString","buffer","containsExtent","createEmpty","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","createCanvasContext2D","releaseCanvas","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","equals","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","constructor","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","compositionContext_","opacity_","renderWorlds","executorGroup","frameState","declutterTree","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","size","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","transform","getRenderTransform","execute","undefined","setupCompositionContext_","compositionContext","canvas","releaseCompositionContext_","alpha","globalAlpha","drawImage","push","renderDeclutter","renderFrame","target","layerState","layerStatesArray","layerIndex","pixelTransform","inversePixelTransform","canvasTransform","useContainer","getBackground","replayGroup","isEmpty","style","containerReused","clearRect","preRender","opacity","clipped","render","layerExtent","clipUnrotated","restore","postRender","container","getFeatures","pixel","Promise","resolve","layer","transforms","slice","source","startX","offsetX","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","result","executorGroups","some","all","map","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","declutterBuilderGroup","getDeclutter","userProjection","userTransform","i","ii","length","userExtent","loadFeatures","squaredTolerance","styles","styleFunction","dirty","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","loading","Array","isArray"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/renderer/canvas/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool\n      );\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if (\n      (!replayGroup || replayGroup.isEmpty()) &&\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\n    ) {\n      return null;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(\n      /**\n       * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n       * @this {CanvasVectorLayerRenderer}\n       */\n      function (resolve) {\n        if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n          const size = [this.context.canvas.width, this.context.canvas.height];\n          apply(this.pixelTransform, size);\n          const center = this.renderedCenter_;\n          const resolution = this.renderedResolution_;\n          const rotation = this.renderedRotation_;\n          const projection = this.renderedProjection_;\n          const extent = this.wrappedRenderedExtent_;\n          const layer = this.getLayer();\n          const transforms = [];\n          const width = size[0] * HIT_DETECT_RESOLUTION;\n          const height = size[1] * HIT_DETECT_RESOLUTION;\n          transforms.push(\n            this.getRenderTransform(\n              center,\n              resolution,\n              rotation,\n              HIT_DETECT_RESOLUTION,\n              width,\n              height,\n              0\n            ).slice()\n          );\n          const source = layer.getSource();\n          const projectionExtent = projection.getExtent();\n          if (\n            source.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, extent)\n          ) {\n            let startX = extent[0];\n            const worldWidth = getWidth(projectionExtent);\n            let world = 0;\n            let offsetX;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  HIT_DETECT_RESOLUTION,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  HIT_DETECT_RESOLUTION,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX -= worldWidth;\n            }\n          }\n\n          this.hitDetectionImageData_ = createHitDetectionImageData(\n            size,\n            transforms,\n            this.renderedFeatures_,\n            layer.getStyleFunction(),\n            extent,\n            resolution,\n            rotation\n          );\n        }\n        resolve(\n          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n        );\n      }.bind(this)\n    );\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup &&\n          frameState.declutterTree\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        getRenderTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       * @this {CanvasVectorLayerRenderer}\n       */\n      function (feature) {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          ready = ready && !dirty;\n        }\n      }.bind(this);\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}