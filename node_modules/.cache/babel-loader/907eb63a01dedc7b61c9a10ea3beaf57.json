{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81806\\\\Documents\\\\work\\\\GIS_APP\\\\gis_app1\\\\src\\\\App.js\";\nimport './App.css';\nimport \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport Tile from 'ol/layer/Tile';\nimport Vector from 'ol/layer/Vector';\nimport { fromLonLat } from 'ol/proj';\nimport Stroke from 'ol/style/Stroke';\nimport interaction from 'ol/interaction';\nimport Draw from 'ol/interaction/Draw';\nimport Source from 'ol/source';\nimport OSM from \"ol/source/OSM\";\nimport Style from 'ol/style/Style';\nimport Circle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport MapApp from \"./Map/MapApp\";\nimport TypeSelect from './TypeSelect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MapApp, {\n      children: /*#__PURE__*/_jsxDEV(Polygon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\n\nclass Polygon extends React.Component {\n  componentDidMount() {\n    const source = new Vector({\n      wrapX: false\n    });\n    this.polygonBase = new Vector({\n      source\n    });\n    this.context.map.addLayer(this.polygonBase);\n\n    const styleFunction = feature => {\n      var geometry = feature.getGeometry();\n      console.log('geometry', geometry.getType());\n\n      if (geometry.getType() === 'LineString') {\n        var styles = [new Style({\n          stroke: new Stroke({\n            color: 'rgba(255, 102, 0, 1)',\n            width: 3\n          })\n        })];\n        return styles;\n      }\n\n      if (geometry.getType() === 'Point') {\n        var styles = [new Style({\n          image: new Circle({\n            radius: 5,\n            stroke: new Stroke({\n              color: 'rgba(255, 0, 0, 1)'\n            }),\n            fill: new Fill({\n              color: 'rgba(255, 0, 0, 0.5)'\n            })\n          })\n        })];\n        return styles;\n      }\n\n      if (geometry.getType() === 'Polygon') {\n        var styles = [new Style({\n          stroke: new Stroke({\n            color: 'rgba(255, 102, 0, 0)',\n            width: 3\n          }),\n          fill: new Fill({\n            color: 'rgba(255, 102, 0, 0.3)'\n          })\n        })];\n        return styles;\n      }\n\n      return false;\n    }; // Define the polygon draw interaction\n\n\n    this.draw = new Draw({\n      source: source,\n      type: 'Polygon',\n      style: styleFunction\n    }); // Add the draw interaction\n\n    this.context.map.addInteraction(this.draw);\n    this.draw.on('drawstart', event => {\n      this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n    });\n  }\n\n  componentWillUnmount() {\n    this.context.map.removeInteraction(this.draw);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drawing polygon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, this);\n  }\n\n} // import React from \"react\"\n// import MapPane from \"./Map/MapPane\";\n// import TypeSelect from './TypeSelect'\n//  const App = () =>{\n//   return (\n//   <div>\n//     <MapPane />\n//     <TypeSelect />\n//   </div>\n//   );\n// }\n\n\nPolygon.contextTypes = {\n  map: PropTypes.object\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","PropTypes","Map","View","Tile","Vector","fromLonLat","Stroke","interaction","Draw","Source","OSM","Style","Circle","Fill","MapApp","TypeSelect","App","Polygon","Component","componentDidMount","source","wrapX","polygonBase","context","map","addLayer","styleFunction","feature","geometry","getGeometry","console","log","getType","styles","stroke","color","width","image","radius","fill","draw","type","style","addInteraction","on","event","polygonFirstCoordinate","getFirstCoordinate","componentWillUnmount","removeInteraction","render","contextTypes","object"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/src/App.js"],"sourcesContent":["import './App.css';\nimport \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport Tile from 'ol/layer/Tile';\nimport Vector from 'ol/layer/Vector';\nimport { fromLonLat } from 'ol/proj';\nimport Stroke from 'ol/style/Stroke';\nimport interaction from 'ol/interaction';\nimport Draw from 'ol/interaction/Draw';\nimport Source from 'ol/source';\nimport OSM from \"ol/source/OSM\";\nimport Style from 'ol/style/Style';\nimport Circle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\n\nimport MapApp from \"./Map/MapApp\";\nimport TypeSelect from './TypeSelect';\n\nconst App = () => {\n  return(\n    <div>\n      <MapApp><Polygon /></MapApp>\n    </div>\n   );\n}\n\n\n\nclass Polygon extends React.Component {\n  static contextTypes = {\n    map: PropTypes.object\n  }\n\n  componentDidMount() {\n  \tconst source = new Vector({wrapX: false});\n    this.polygonBase = new Vector({ source });\n    this.context.map.addLayer(this.polygonBase);\n\t\t\n\t\tconst styleFunction = feature => {\n      var geometry = feature.getGeometry();\n      console.log('geometry', geometry.getType());\n      if (geometry.getType() === 'LineString') {\n        var styles = [\n          new Style({\n            stroke: new Stroke({\n              color: 'rgba(255, 102, 0, 1)',\n              width: 3\n            })\n          })\n        ];\n        return styles;\n      }\n\t\t\tif (geometry.getType() === 'Point') {\n        var styles = [\n          new Style({\n\t\t\t\t\t\timage: new Circle({\n      \t    \tradius: 5,\n      \t    \tstroke: new Stroke({ color: 'rgba(255, 0, 0, 1)' }),\n      \t    \tfill: new Fill({ color: 'rgba(255, 0, 0, 0.5)' })\n\t\t\t\t\t\t})\n          })\n        ];\n        return styles;\n      }\n      if (geometry.getType() === 'Polygon') {\n        var styles = [\n          new Style({\n            stroke: new Stroke({\n              color: 'rgba(255, 102, 0, 0)',\n              width: 3\n            }),\n            fill: new Fill({\n              color: 'rgba(255, 102, 0, 0.3)'\n            })\n          })\n        ];\n        return styles;\n      }\n      return false;\n    };\n    \n    // Define the polygon draw interaction\n    this.draw = new Draw({\n      source: source,\n      type: 'Polygon',\n\t\t\tstyle: styleFunction\n    });\n    // Add the draw interaction\n    this.context.map.addInteraction(this.draw);\n\t\t\n\t\tthis.draw.on('drawstart', event => {\n\t\t\tthis.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n\t\t});\n  }\n\n  componentWillUnmount () {\n    this.context.map.removeInteraction(this.draw);\n  }\n\n  render() { return <p>Drawing polygon</p>; }\n}\n\n\n\n// import React from \"react\"\n\n// import MapPane from \"./Map/MapPane\";\n// import TypeSelect from './TypeSelect'\n\n\n//  const App = () =>{\n//   return (\n//   <div>\n//     <MapPane />\n//     <TypeSelect />\n\n//   </div>\n//   );\n// }\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}