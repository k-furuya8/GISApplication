{"ast":null,"code":"/**\n * @module ol/layer/WebGLPoints\n */\nimport Layer from './Layer.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { parseLiteralStyle } from '../webgl/ShaderBuilder.js';\n/**\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @typedef {Object} Options\n * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Point source.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'circle',\n *     size: 8,\n *     color: '#33AAFF',\n *     opacity: 0.9\n *   }\n * }\n * ```\n *\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'image',\n *     offset: [0, 12],\n *     size: [4, 8],\n *     src: '../static/exclamation-mark.png'\n *   }\n * }\n * ```\n *\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\n * @fires import(\"../render/Event.js\").RenderEvent\n */\n\nclass WebGLPointsLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} options Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    super(baseOptions);\n    /**\n     * @private\n     * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}\n     */\n\n    this.parseResult_ = parseLiteralStyle(options.style);\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n\n    this.styleVariables_ = options.style.variables || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\n      hitVertexShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolVertexShader(true),\n      hitFragmentShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolFragmentShader(true),\n      uniforms: this.parseResult_.uniforms,\n      attributes: this.parseResult_.attributes\n    });\n  }\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   */\n\n\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n\n}\n\nexport default WebGLPointsLayer;","map":{"version":3,"names":["Layer","WebGLPointsLayerRenderer","parseLiteralStyle","WebGLPointsLayer","constructor","options","baseOptions","Object","assign","parseResult_","style","styleVariables_","variables","hitDetectionDisabled_","disableHitDetection","createRenderer","vertexShader","builder","getSymbolVertexShader","fragmentShader","getSymbolFragmentShader","hitVertexShader","hitFragmentShader","uniforms","attributes","updateStyleVariables","changed"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/layer/WebGLPoints.js"],"sourcesContent":["/**\n * @module ol/layer/WebGLPoints\n */\nimport Layer from './Layer.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {parseLiteralStyle} from '../webgl/ShaderBuilder.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @typedef {Object} Options\n * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Point source.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'circle',\n *     size: 8,\n *     color: '#33AAFF',\n *     opacity: 0.9\n *   }\n * }\n * ```\n *\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'image',\n *     offset: [0, 12],\n *     size: [4, 8],\n *     src: '../static/exclamation-mark.png'\n *   }\n * }\n * ```\n *\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nclass WebGLPointsLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} options Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}\n     */\n    this.parseResult_ = parseLiteralStyle(options.style);\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = options.style.variables || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\n      hitVertexShader:\n        !this.hitDetectionDisabled_ &&\n        this.parseResult_.builder.getSymbolVertexShader(true),\n      hitFragmentShader:\n        !this.hitDetectionDisabled_ &&\n        this.parseResult_.builder.getSymbolFragmentShader(true),\n      uniforms: this.parseResult_.uniforms,\n      attributes: this.parseResult_.attributes,\n    });\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\nexport default WebGLPointsLayer;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,wBAAP,MAAqC,kCAArC;AACA,SAAQC,iBAAR,QAAgC,2BAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAN,SAA+BH,KAA/B,CAAqC;EACnC;AACF;AACA;EACEI,WAAW,CAACC,OAAD,EAAU;IACnB,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAApB;IAEA,MAAMC,WAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKG,YAAL,GAAoBP,iBAAiB,CAACG,OAAO,CAACK,KAAT,CAArC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,eAAL,GAAuBN,OAAO,CAACK,KAAR,CAAcE,SAAd,IAA2B,EAAlD;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,qBAAL,GAA6B,CAAC,CAACR,OAAO,CAACS,mBAAvC;EACD;;EAEDC,cAAc,GAAG;IACf,OAAO,IAAId,wBAAJ,CAA6B,IAA7B,EAAmC;MACxCe,YAAY,EAAE,KAAKP,YAAL,CAAkBQ,OAAlB,CAA0BC,qBAA1B,EAD0B;MAExCC,cAAc,EAAE,KAAKV,YAAL,CAAkBQ,OAAlB,CAA0BG,uBAA1B,EAFwB;MAGxCC,eAAe,EACb,CAAC,KAAKR,qBAAN,IACA,KAAKJ,YAAL,CAAkBQ,OAAlB,CAA0BC,qBAA1B,CAAgD,IAAhD,CALsC;MAMxCI,iBAAiB,EACf,CAAC,KAAKT,qBAAN,IACA,KAAKJ,YAAL,CAAkBQ,OAAlB,CAA0BG,uBAA1B,CAAkD,IAAlD,CARsC;MASxCG,QAAQ,EAAE,KAAKd,YAAL,CAAkBc,QATY;MAUxCC,UAAU,EAAE,KAAKf,YAAL,CAAkBe;IAVU,CAAnC,CAAP;EAYD;EAED;AACF;AACA;AACA;;;EACEC,oBAAoB,CAACb,SAAD,EAAY;IAC9BL,MAAM,CAACC,MAAP,CAAc,KAAKG,eAAnB,EAAoCC,SAApC;IACA,KAAKc,OAAL;EACD;;AAlDkC;;AAqDrC,eAAevB,gBAAf"},"metadata":{},"sourceType":"module"}