{"ast":null,"code":"/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\n\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n\n\n  getType() {\n    return 'json';\n  }\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  readFeature(source, options) {\n    return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, options));\n  }\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, options));\n  }\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n\n\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, options));\n  }\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n\n\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n\n\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n\n\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n\n\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n\n\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n\n\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n\n}\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\n\n\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ?\n    /** @type {Object} */\n    object : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\nexport default JSONFeature;","map":{"version":3,"names":["FeatureFormat","abstract","JSONFeature","constructor","getType","readFeature","source","options","readFeatureFromObject","getObject","getReadOptions","readFeatures","readFeaturesFromObject","object","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","JSON","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","geometry","writeGeometryObject","parse"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/format/JSONFeature.js"],"sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\nexport default JSONFeature;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}