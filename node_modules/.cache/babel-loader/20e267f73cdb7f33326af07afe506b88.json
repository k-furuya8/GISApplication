{"ast":null,"code":"/**\n * @module ol/source/ImageMapGuide\n */\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  getParams() {\n    return this.params_;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    let image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);\n      image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    } else {\n      image = null;\n    }\n\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n    return image;\n  }\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n\n\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    Object.assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\n\n\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\nexport default ImageMapGuide;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","containsExtent","getCenter","getHeight","getWidth","scaleFromCenter","ImageMapGuide","constructor","options","interpolate","projection","resolutions","crossOrigin_","crossOrigin","undefined","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","imageUrl","getUrl","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","updateParams","Object","assign","changed","baseUrl","scale","getScale","center","baseParams","Math","round","setImageLoadFunction","dpi","mcsW","mcsH","devW","devH","mpp"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/ImageMapGuide.js"],"sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {\n  containsExtent,\n  getCenter,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    let image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(\n        this.url_,\n        this.params_,\n        extent,\n        size,\n        projection\n      );\n      image = new ImageWrapper(\n        extent,\n        resolution,\n        pixelRatio,\n        imageUrl,\n        this.crossOrigin_,\n        this.imageLoadFunction_\n      );\n      image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this)\n      );\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_\n        ? 'GETDYNAMICMAPOVERLAYIMAGE'\n        : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1],\n    };\n    Object.assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  } else {\n    return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n  }\n}\n\nexport default ImageMapGuide;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}