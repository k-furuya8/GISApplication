{"ast":null,"code":"/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\n\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n    /**\n     * @type {Config}\n     * @private\n     */\n\n    this.tileJSON_ = null;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n\n    this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this), this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  onXHRLoad_(event) {\n    const client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n\n      try {\n        response =\n        /** @type {Config} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n\n\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n\n\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n    const sourceProjection = this.getProjection();\n    let extent;\n\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_\n    });\n    this.tileGrid = tileGrid;\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n\n        return null;\n      });\n    }\n\n    this.tileJSON_ = tileJSON;\n    this.setState('ready');\n  }\n  /**\n   * @protected\n   */\n\n\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n}\n\nexport default TileJSON;","map":{"version":3,"names":["TileImage","applyTransform","intersects","assert","createFromTemplates","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","TileJSON","constructor","options","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","wrapX","undefined","transition","zDirection","tileJSON_","tileSize_","tileSize","url","handleTileJSONResponse","bind","handleTileJSONError","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","tileJSON","event","target","status","response","JSON","parse","responseText","err","getTileJSON","epsg4326Projection","sourceProjection","extent","transform","gridExtent","minZoom","maxZoom","tileGrid","tileUrlFunction","getAttributions","attributionExtent","setAttributions","frameState","setState"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/TileJSON.js"],"sourcesContent":["/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\n\nimport TileImage from './TileImage.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {assert} from '../asserts.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n    this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {Config} */ (JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_,\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState('ready');\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n}\n\nexport default TileJSON;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}