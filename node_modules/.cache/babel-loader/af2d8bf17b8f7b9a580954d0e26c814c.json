{"ast":null,"code":"/**\n * @module ol/format/Feature\n */\nimport { abstract } from '../util.js';\nimport { equivalent as equivalentProjection, get as getProjection, transformExtent } from '../proj.js';\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n/**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\n\nclass FeatureFormat {\n  constructor() {\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.dataProjection = undefined;\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n\n    this.defaultFeatureProjection = undefined;\n    /**\n     * A list media types supported by the format in descending order of preference.\n     * @type {Array<string>}\n     */\n\n    this.supportedMediaTypes = null;\n  }\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n\n\n  getReadOptions(source, options) {\n    if (options) {\n      let dataProjection = options.dataProjection ? getProjection(options.dataProjection) : this.readProjection(source);\n\n      if (options.extent && dataProjection && dataProjection.getUnits() === 'tile-pixels') {\n        dataProjection = getProjection(dataProjection);\n        dataProjection.setWorldExtent(options.extent);\n      }\n\n      options = {\n        dataProjection: dataProjection,\n        featureProjection: options.featureProjection\n      };\n    }\n\n    return this.adaptOptions(options);\n  }\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n\n\n  adaptOptions(options) {\n    return Object.assign({\n      dataProjection: this.dataProjection,\n      featureProjection: this.defaultFeatureProjection\n    }, options);\n  }\n  /**\n   * @abstract\n   * @return {Type} The format type.\n   */\n\n\n  getType() {\n    return abstract();\n  }\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n\n\n  readFeature(source, options) {\n    return abstract();\n  }\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n\n\n  readFeatures(source, options) {\n    return abstract();\n  }\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  readGeometry(source, options) {\n    return abstract();\n  }\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n\n\n  readProjection(source) {\n    return abstract();\n  }\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  writeFeature(feature, options) {\n    return abstract();\n  }\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  writeFeatures(features, options) {\n    return abstract();\n  }\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  writeGeometry(geometry, options) {\n    return abstract();\n  }\n\n}\n\nexport default FeatureFormat;\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\n\nexport function transformGeometryWithOptions(geometry, write, options) {\n  const featureProjection = options ? getProjection(options.featureProjection) : null;\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\n  let transformed;\n\n  if (featureProjection && dataProjection && !equivalentProjection(featureProjection, dataProjection)) {\n    transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n  } else {\n    transformed = geometry;\n  }\n\n  if (write && options &&\n  /** @type {WriteOptions} */\n  options.decimals !== undefined) {\n    const power = Math.pow(10,\n    /** @type {WriteOptions} */\n    options.decimals); // if decimals option on write, round each coordinate appropriately\n\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n\n    const transform = function (coordinates) {\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\n      }\n\n      return coordinates;\n    };\n\n    if (transformed === geometry) {\n      transformed = geometry.clone();\n    }\n\n    transformed.applyTransform(transform);\n  }\n\n  return transformed;\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\n\nexport function transformExtentWithOptions(extent, options) {\n  const featureProjection = options ? getProjection(options.featureProjection) : null;\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\n\n  if (featureProjection && dataProjection && !equivalentProjection(featureProjection, dataProjection)) {\n    return transformExtent(extent, dataProjection, featureProjection);\n  } else {\n    return extent;\n  }\n}","map":{"version":3,"names":["abstract","equivalent","equivalentProjection","get","getProjection","transformExtent","FeatureFormat","constructor","dataProjection","undefined","defaultFeatureProjection","supportedMediaTypes","getReadOptions","source","options","readProjection","extent","getUnits","setWorldExtent","featureProjection","adaptOptions","Object","assign","getType","readFeature","readFeatures","readGeometry","writeFeature","feature","writeFeatures","features","writeGeometry","geometry","transformGeometryWithOptions","write","transformed","clone","transform","decimals","power","Math","pow","coordinates","i","ii","length","round","applyTransform","transformExtentWithOptions"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/format/Feature.js"],"sourcesContent":["/**\n * @module ol/format/Feature\n */\nimport {abstract} from '../util.js';\nimport {\n  equivalent as equivalentProjection,\n  get as getProjection,\n  transformExtent,\n} from '../proj.js';\n\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n/**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nclass FeatureFormat {\n  constructor() {\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.dataProjection = undefined;\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.defaultFeatureProjection = undefined;\n\n    /**\n     * A list media types supported by the format in descending order of preference.\n     * @type {Array<string>}\n     */\n    this.supportedMediaTypes = null;\n  }\n\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n  getReadOptions(source, options) {\n    if (options) {\n      let dataProjection = options.dataProjection\n        ? getProjection(options.dataProjection)\n        : this.readProjection(source);\n      if (\n        options.extent &&\n        dataProjection &&\n        dataProjection.getUnits() === 'tile-pixels'\n      ) {\n        dataProjection = getProjection(dataProjection);\n        dataProjection.setWorldExtent(options.extent);\n      }\n      options = {\n        dataProjection: dataProjection,\n        featureProjection: options.featureProjection,\n      };\n    }\n    return this.adaptOptions(options);\n  }\n\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n  adaptOptions(options) {\n    return Object.assign(\n      {\n        dataProjection: this.dataProjection,\n        featureProjection: this.defaultFeatureProjection,\n      },\n      options\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Type} The format type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n  readFeature(source, options) {\n    return abstract();\n  }\n\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  readFeatures(source, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometry(source, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n  readProjection(source) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeFeature(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeFeatures(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeGeometry(geometry, options) {\n    return abstract();\n  }\n}\n\nexport default FeatureFormat;\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\nexport function transformGeometryWithOptions(geometry, write, options) {\n  const featureProjection = options\n    ? getProjection(options.featureProjection)\n    : null;\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\n\n  let transformed;\n  if (\n    featureProjection &&\n    dataProjection &&\n    !equivalentProjection(featureProjection, dataProjection)\n  ) {\n    transformed = (write ? geometry.clone() : geometry).transform(\n      write ? featureProjection : dataProjection,\n      write ? dataProjection : featureProjection\n    );\n  } else {\n    transformed = geometry;\n  }\n  if (\n    write &&\n    options &&\n    /** @type {WriteOptions} */ (options).decimals !== undefined\n  ) {\n    const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);\n    // if decimals option on write, round each coordinate appropriately\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n    const transform = function (coordinates) {\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\n      }\n      return coordinates;\n    };\n    if (transformed === geometry) {\n      transformed = geometry.clone();\n    }\n    transformed.applyTransform(transform);\n  }\n  return transformed;\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\nexport function transformExtentWithOptions(extent, options) {\n  const featureProjection = options\n    ? getProjection(options.featureProjection)\n    : null;\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\n\n  if (\n    featureProjection &&\n    dataProjection &&\n    !equivalentProjection(featureProjection, dataProjection)\n  ) {\n    return transformExtent(extent, dataProjection, featureProjection);\n  } else {\n    return extent;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,QAAR,QAAuB,YAAvB;AACA,SACEC,UAAU,IAAIC,oBADhB,EAEEC,GAAG,IAAIC,aAFT,EAGEC,eAHF,QAIO,YAJP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;EAClBC,WAAW,GAAG;IACZ;AACJ;AACA;AACA;IACI,KAAKC,cAAL,GAAsBC,SAAtB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,wBAAL,GAAgCD,SAAhC;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,mBAAL,GAA2B,IAA3B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,cAAc,CAACC,MAAD,EAASC,OAAT,EAAkB;IAC9B,IAAIA,OAAJ,EAAa;MACX,IAAIN,cAAc,GAAGM,OAAO,CAACN,cAAR,GACjBJ,aAAa,CAACU,OAAO,CAACN,cAAT,CADI,GAEjB,KAAKO,cAAL,CAAoBF,MAApB,CAFJ;;MAGA,IACEC,OAAO,CAACE,MAAR,IACAR,cADA,IAEAA,cAAc,CAACS,QAAf,OAA8B,aAHhC,EAIE;QACAT,cAAc,GAAGJ,aAAa,CAACI,cAAD,CAA9B;QACAA,cAAc,CAACU,cAAf,CAA8BJ,OAAO,CAACE,MAAtC;MACD;;MACDF,OAAO,GAAG;QACRN,cAAc,EAAEA,cADR;QAERW,iBAAiB,EAAEL,OAAO,CAACK;MAFnB,CAAV;IAID;;IACD,OAAO,KAAKC,YAAL,CAAkBN,OAAlB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEM,YAAY,CAACN,OAAD,EAAU;IACpB,OAAOO,MAAM,CAACC,MAAP,CACL;MA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"},"metadata":{},"sourceType":"module"}