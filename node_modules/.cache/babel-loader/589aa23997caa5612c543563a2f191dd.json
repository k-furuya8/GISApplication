{"ast":null,"code":"/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport ImageState from '../ImageState.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport { abstract } from '../util.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport { linearFindNearest } from '../array.js';\n/**\n * @enum {string}\n */\n\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\n\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n\n    this.image = image;\n  }\n\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true\n    });\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.on;\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    this.once;\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n\n    this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n\n    this.reprojectedImage_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.reprojectedRevision_ = 0;\n  }\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n\n\n  getResolutions() {\n    return this.resolutions_;\n  }\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n\n\n  findNearestResolution(resolution) {\n    if (this.resolutions_) {\n      const idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n\n    return resolution;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n\n\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n\n    if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n      }.bind(this), this.getInterpolate());\n      this.reprojectedRevision_ = this.getRevision();\n      return this.reprojectedImage_;\n    }\n  }\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n\n\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    return abstract();\n  }\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  handleImageChange(event) {\n    const image =\n    /** @type {import(\"../Image.js\").default} */\n    event.target;\n    let type;\n\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n\n      default:\n        return;\n    }\n\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n\n}\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\n\n\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  image.getImage().src = src;\n}\nexport default ImageSource;","map":{"version":3,"names":["Event","ImageState","ReprojImage","Source","abstract","equals","equivalent","linearFindNearest","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","constructor","type","image","ImageSource","options","attributions","projection","state","interpolate","undefined","on","once","un","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","getResolutions","findNearestResolution","resolution","idx","getImage","extent","pixelRatio","sourceProjection","getProjection","getImageInternal","getRevision","getResolution","getExtent","dispose","bind","getInterpolate","handleImageChange","event","target","getState","LOADING","loading","LOADED","ERROR","hasListener","dispatchEvent","defaultImageLoadFunction","src"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport ImageState from '../ImageState.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport {abstract} from '../util.js';\nimport {equals} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport {linearFindNearest} from '../array.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    if (this.resolutions_) {\n      const idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (\n          this.reprojectedRevision_ == this.getRevision() &&\n          equivalent(this.reprojectedImage_.getProjection(), projection) &&\n          this.reprojectedImage_.getResolution() == resolution &&\n          equals(this.reprojectedImage_.getExtent(), extent)\n        ) {\n          return this.reprojectedImage_;\n        }\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(\n        sourceProjection,\n        projection,\n        extent,\n        resolution,\n        pixelRatio,\n        function (extent, resolution, pixelRatio) {\n          return this.getImageInternal(\n            extent,\n            resolution,\n            pixelRatio,\n            sourceProjection\n          );\n        }.bind(this),\n        this.getInterpolate()\n      );\n      this.reprojectedRevision_ = this.getRevision();\n\n      return this.reprojectedImage_;\n    }\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\nexport default ImageSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}