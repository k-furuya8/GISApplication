{"ast":null,"code":"/**\n * @module ol/style/Style\n */\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\n\nclass Style {\n  /**\n   * @param {Options} [options] Style options.\n   */\n  constructor(options) {\n    options = options || {};\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n\n    this.geometry_ = null;\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n\n    this.image_ = options.image !== undefined ? options.image : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n\n    this.text_ = options.text !== undefined ? options.text : null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.zIndex_ = options.zIndex;\n  }\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    let geometry = this.getGeometry();\n\n    if (geometry && typeof geometry === 'object') {\n      geometry =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry.clone();\n    }\n\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  }\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  getRenderer() {\n    return this.renderer_;\n  }\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n\n\n  getGeometry() {\n    return this.geometry_;\n  }\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n\n\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  getFill() {\n    return this.fill_;\n  }\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n\n\n  getImage() {\n    return this.image_;\n  }\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n\n\n  setImage(image) {\n    this.image_ = image;\n  }\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  getStroke() {\n    return this.stroke_;\n  }\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n\n\n  getText() {\n    return this.text_;\n  }\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n\n\n  setText(text) {\n    this.text_ = text;\n  }\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n\n\n  getZIndex() {\n    return this.zIndex_;\n  }\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n\n\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          geometry\n        );\n      };\n    }\n\n    this.geometry_ = geometry;\n  }\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n\n\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n\n}\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\n\n\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof\n      /** @type {?} */\n      obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n\n      const style =\n      /** @type {Style} */\n      obj;\n      styles = [style];\n    }\n\n    styleFunction = function () {\n      return styles;\n    };\n  }\n\n  return styleFunction;\n}\n/**\n * @type {Array<Style>|null}\n */\n\nlet defaultStyles = null;\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\n\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n\n  return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\n\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles['Polygon'] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles['MultiPolygon'] = styles['Polygon'];\n  styles['LineString'] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles['MultiLineString'] = styles['LineString'];\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n  styles['Point'] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles['MultiPoint'] = styles['Point'];\n  styles['GeometryCollection'] = styles['Polygon'].concat(styles['LineString'], styles['Point']);\n  return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\n\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;","map":{"version":3,"names":["CircleStyle","Fill","Stroke","assert","Style","constructor","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","hitDetectionRenderer_","hitDetectionRenderer","stroke_","stroke","text_","text","zIndex_","zIndex","clone","getGeometry","getFill","getImage","getRenderer","getStroke","getText","getZIndex","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","white","blue","concat","Infinity"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/node_modules/ol/style/Style.js"],"sourcesContent":["/**\n * @module ol/style/Style\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\nclass Style {\n  /**\n   * @param {Options} [options] Style options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.hitDetectionRenderer_ =\n      options.hitDetectionRenderer !== undefined\n        ? options.hitDetectionRenderer\n        : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        geometry\n      ).clone();\n    }\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex(),\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)',\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25,\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5,\n        }),\n        fill: fill,\n        stroke: stroke,\n      }),\n    ];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles['Polygon'] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5],\n      }),\n    }),\n  ];\n  styles['MultiPolygon'] = styles['Polygon'];\n\n  styles['LineString'] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2,\n      }),\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width,\n      }),\n    }),\n  ];\n  styles['MultiLineString'] = styles['LineString'];\n\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n\n  styles['Point'] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue,\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2,\n        }),\n      }),\n      zIndex: Infinity,\n    }),\n  ];\n  styles['MultiPoint'] = styles['Point'];\n\n  styles['GeometryCollection'] = styles['Polygon'].concat(\n    styles['LineString'],\n    styles['Point']\n  );\n\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}