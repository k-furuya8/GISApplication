{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81806\\\\Documents\\\\work\\\\GIS_APP\\\\gis_app1\\\\src\\\\Map\\\\DrawMap.js\",\n    _s = $RefreshSig$();\n\nimport \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\nimport { React, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport Tile from \"ol/layer/Tile\";\nimport Vector from \"ol/layer/Vector\";\nimport { fromLonLat } from \"ol/proj\";\nimport Stroke from \"ol/style/Stroke\";\nimport interaction from \"ol/interaction\";\nimport Draw from \"ol/interaction/Draw\";\nimport Source from \"ol/source\";\nimport OSM from \"ol/source/OSM\";\nimport Style from \"ol/style/Style\";\nimport Circle from \"ol/style/Circle\";\nimport Fill from \"ol/style/Fill\";\nimport { Vector as VectorSorsce } from 'ol/source';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DrawMap = _ref => {\n  _s();\n\n  let {\n    type,\n    map\n  } = _ref;\n  const source = new VectorSorsce({\n    wrapX: false\n  }); //this.polygonBase = new Vector({ source });\n\n  useEffect(() => {\n    function addInteraction() {\n      if (type !== \"None\") {\n        let draw = new Draw({\n          Source: source,\n          type: type\n        });\n        map.addInteraction(draw);\n      }\n    } //return () => map.\n\n  }, [type]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"aaa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}; // class DrawMap extends React.Component {\n//     static contextTypes = {\n//       map: PropTypes.object\n//     }\n//     componentDidMount() {\n//         const source = new Vector({wrapX: false});\n//       this.polygonBase = new Vector({ source });\n//       this.context.map.addLayer(this.polygonBase);\n//           const styleFunction = feature => {\n//         var geometry = feature.getGeometry();\n//         console.log('geometry', geometry.getType());\n//         if (geometry.getType() === 'LineString') {\n//           var styles = [\n//             new Style({\n//               stroke: new Stroke({\n//                 color: 'rgba(255, 102, 0, 1)',\n//                 width: 3\n//               })\n//             })\n//           ];\n//           return styles;\n//         }\n//               if (geometry.getType() === 'Point') {\n//           var styles = [\n//             new Style({\n//                           image: new Circle({\n//                     radius: 5,\n//                     stroke: new Stroke({ color: 'rgba(255, 0, 0, 1)' }),\n//                     fill: new Fill({ color: 'rgba(255, 0, 0, 0.5)' })\n//                           })\n//             })\n//           ];\n//           return styles;\n//         }\n//         if (geometry.getType() === 'Polygon') {\n//           var styles = [\n//             new Style({\n//               stroke: new Stroke({\n//                 color: 'rgba(255, 102, 0, 0)',\n//                 width: 3\n//               }),\n//               fill: new Fill({\n//                 color: 'rgba(255, 102, 0, 0.3)'\n//               })\n//             })\n//           ];\n//           return styles;\n//         }\n//         return false;\n//       };\n//       // Define the polygon draw interaction\n//       this.draw = new Draw({\n//         source: source,\n//         type: 'Polygon',\n//               style: styleFunction\n//       });\n//       // Add the draw interaction\n//       this.context.map.addInteraction(this.draw);\n//           this.draw.on('drawstart', event => {\n//               this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\n//           });\n//     }\n//     componentWillUnmount () {\n//       this.context.map.removeInteraction(this.draw);\n//     }\n//     render() { return <p>Drawing polygon</p>; }\n//   }\n\n\n_s(DrawMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DrawMap;\nexport default DrawMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawMap\");","map":{"version":3,"names":["React","useEffect","ReactDOM","PropTypes","Map","View","Tile","Vector","fromLonLat","Stroke","interaction","Draw","Source","OSM","Style","Circle","Fill","VectorSorsce","DrawMap","type","map","source","wrapX","addInteraction","draw"],"sources":["C:/Users/81806/Documents/work/GIS_APP/gis_app1/src/Map/DrawMap.js"],"sourcesContent":["import \"https://unpkg.com/elm-pep@1.0.6/dist/elm-pep.js\";\r\nimport {React,useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport Tile from \"ol/layer/Tile\";\r\nimport Vector from \"ol/layer/Vector\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport Stroke from \"ol/style/Stroke\";\r\nimport interaction from \"ol/interaction\";\r\nimport Draw from \"ol/interaction/Draw\";\r\nimport Source from \"ol/source\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport Style from \"ol/style/Style\";\r\nimport Circle from \"ol/style/Circle\";\r\nimport Fill from \"ol/style/Fill\";\r\nimport {Vector as VectorSorsce} from 'ol/source';\r\n\r\nconst DrawMap = ({ type,map }) => {\r\n\r\n\r\n  const source = new VectorSorsce({ wrapX: false });\r\n  //this.polygonBase = new Vector({ source });\r\n  useEffect( () => {\r\n    function addInteraction() {\r\n      if (type !== \"None\") {\r\n        let draw = new Draw({\r\n          Source: source,\r\n          type: type,\r\n        });\r\n        map.addInteraction(draw);\r\n      }\r\n    }\r\n\r\n    //return () => map.\r\n\r\n    \r\n\r\n  },[type]);\r\n\r\n  return (\r\n    <div>\r\n      <label>aaa</label>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n// class DrawMap extends React.Component {\r\n//     static contextTypes = {\r\n//       map: PropTypes.object\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         const source = new Vector({wrapX: false});\r\n//       this.polygonBase = new Vector({ source });\r\n//       this.context.map.addLayer(this.polygonBase);\r\n\r\n//           const styleFunction = feature => {\r\n//         var geometry = feature.getGeometry();\r\n//         console.log('geometry', geometry.getType());\r\n//         if (geometry.getType() === 'LineString') {\r\n//           var styles = [\r\n//             new Style({\r\n//               stroke: new Stroke({\r\n//                 color: 'rgba(255, 102, 0, 1)',\r\n//                 width: 3\r\n//               })\r\n//             })\r\n//           ];\r\n//           return styles;\r\n//         }\r\n//               if (geometry.getType() === 'Point') {\r\n//           var styles = [\r\n//             new Style({\r\n//                           image: new Circle({\r\n//                     radius: 5,\r\n//                     stroke: new Stroke({ color: 'rgba(255, 0, 0, 1)' }),\r\n//                     fill: new Fill({ color: 'rgba(255, 0, 0, 0.5)' })\r\n//                           })\r\n//             })\r\n//           ];\r\n//           return styles;\r\n//         }\r\n//         if (geometry.getType() === 'Polygon') {\r\n//           var styles = [\r\n//             new Style({\r\n//               stroke: new Stroke({\r\n//                 color: 'rgba(255, 102, 0, 0)',\r\n//                 width: 3\r\n//               }),\r\n//               fill: new Fill({\r\n//                 color: 'rgba(255, 102, 0, 0.3)'\r\n//               })\r\n//             })\r\n//           ];\r\n//           return styles;\r\n//         }\r\n//         return false;\r\n//       };\r\n\r\n//       // Define the polygon draw interaction\r\n//       this.draw = new Draw({\r\n//         source: source,\r\n//         type: 'Polygon',\r\n//               style: styleFunction\r\n//       });\r\n//       // Add the draw interaction\r\n//       this.context.map.addInteraction(this.draw);\r\n\r\n//           this.draw.on('drawstart', event => {\r\n//               this.polygonFirstCoordinate = event.feature.getGeometry().getFirstCoordinate();\r\n//           });\r\n//     }\r\n\r\n//     componentWillUnmount () {\r\n//       this.context.map.removeInteraction(this.draw);\r\n//     }\r\n\r\n//     render() { return <p>Drawing polygon</p>; }\r\n//   }\r\n\r\nexport default DrawMap;\r\n"],"mappings":";;;AAAA,OAAO,iDAAP;AACA,SAAQA,KAAR,EAAcC,SAAd,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAAQT,MAAM,IAAIU,YAAlB,QAAqC,WAArC;;;AAEA,MAAMC,OAAO,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC,IAAF;IAAOC;EAAP,CAAiB;EAGhC,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;IAAEK,KAAK,EAAE;EAAT,CAAjB,CAAf,CAHgC,CAIhC;;EACArB,SAAS,CAAE,MAAM;IACf,SAASsB,cAAT,GAA0B;MACxB,IAAIJ,IAAI,KAAK,MAAb,EAAqB;QACnB,IAAIK,IAAI,GAAG,IAAIb,IAAJ,CAAS;UAClBC,MAAM,EAAES,MADU;UAElBF,IAAI,EAAEA;QAFY,CAAT,CAAX;QAIAC,GAAG,CAACG,cAAJ,CAAmBC,IAAnB;MACD;IACF,CATc,CAWf;;EAID,CAfQ,EAeP,CAACL,IAAD,CAfO,CAAT;EAiBA,oBACE;IAAA,uBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA3BD,C,CAgCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;GAxGMD,O;;KAAAA,O;AA0GN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}